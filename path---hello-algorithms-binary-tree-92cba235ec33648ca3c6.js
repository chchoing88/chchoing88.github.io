webpackJsonp([0xda623405bad],{503:function(s,a){s.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/binaryTree.md absPath of file >>> MarkdownRemark",html:'<h2>트리 정의</h2>\n<ul>\n<li>트리는 에지로 연결된 노드의 집합입니다. 예를 들면 회사의 조직도를 들수 있습니다.</li>\n<li>각각의 상자가 노드며 상자를 연결하는 선이 에지이다.</li>\n<li>트리의 최상위 노드를 <code>루트(root)</code> 노드라고 한다.</li>\n<li>한 노드가 아래 노드와 연결되어 있을때 위에 있는 노드를 <code>부모(parent)</code> 노드라 한다.</li>\n<li>부모 노드 아래에 있는 모든 노드를 <code>자식(child)</code> 노드라고 한다.</li>\n<li>한 노드는 0개 이상의 노드와 연결 될 수 있다.</li>\n<li>자식 노드가 없는 노드를 <code>리프(leaf)</code> 노드라 부른다.</li>\n<li>이진 트리는 모든 노드의 자식 노드 수가 2개 이하인 특수한 노드를 가리킨다.</li>\n<li>한 노드에서 다른 노드로 도달하는데 사용한 에지의 모음을 <code>경로(path)</code>라 한다.</li>\n<li>트리는 레벨로 구분할 수 있으며, 트리에 있는 레벨의 수를 트리의 <code>깊이(depth)</code> 라고 한다.</li>\n<li>트리의 각 노드는 값을 갖는데, 노드의 값을 키 값이라고도 표현한다.</li>\n</ul>\n<h2>이진 검색 트리 (BST)</h2>\n<ul>\n<li>자식중에 작은 값은 왼쪽 노드에, 큰 값을 오른쪽 노드에 저장한다.</li>\n<li>이진 검색트리는 단어, 문자열도 저장할 수 있다.</li>\n</ul>\n<h2>이진 검색 트리 탐색</h2>\n<ul>\n<li>BST 클래스에서는 <code>중위(inorder)</code>, <code>전위(preorder)</code>, <code>후위(postorder)</code>라는 세 가지 탐색 방법을 사용한다.</li>\n<li>중위 탐색에서는 노드의 오름차순 키(수치가 점점 커지는) 값으로 BST 클래스의 모든 노드를 방문한다. (왼쪽 -> 부모 -> 오른쪽 순)</li>\n<li>전위 탐색에서는 먼저 루트 노드를 방문한 다음 루트 왼쪽 자식을 중심으로 하는 서브트리를 같은 방식으로 방문하며, 마지막으로 루트 노드의 오른쪽 자식을 중심으로 하는 서브트리를 방문한다. (부모 -> 왼쪽 -> 오른쪽)</li>\n<li>후위 탐색에서는 루트 노드의 왼쪽 자식을 중심으로 하는 서브트리를 먼저 방문한 다음, 루트 노드의 오른쪽 자식을 중심으로 하는 서브트리를 방문하며, 마지막으로 루트 노드를 방문한다. (왼쪽 -> 오른쪽 -> 부모)</li>\n<li>재귀를 이용하면 깔끔하게 중위 탐색을 구현할 수 있다.</li>\n</ul>\n<h2>BST 검색</h2>\n<ul>\n<li>특정값 검색 : 현재 노드와 검색 대상 노드의 값을 비교 검색 결과에 따라 왼쪽/오른쪽 탐색할지 결정할 수 있다.</li>\n<li>최솟값 검색 : 더 이상 왼쪽 자식 노드가 없을 때까지 BST의 왼쪾 에지를 탐색하면 최솟값을 찾을 수 있다.</li>\n<li>최댓값 검색 : 가장 오른쪽에 저장된 자식 노드에 저장된 값이 BST의 최댓값이다.</li>\n</ul>\n<h2>이진 검색 트리 구현</h2>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>left</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>right</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>left</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>right</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>left</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>right</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>show</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>BST</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>root</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>insert</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;루트&nbsp;노드를&nbsp;current&nbsp;노드로&nbsp;설정</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;삽입할&nbsp;노드의&nbsp;값이&nbsp;current&nbsp;노드의&nbsp;값보다&nbsp;작으면&nbsp;왼쪽&nbsp;자식으로&nbsp;크다면&nbsp;오른쪽&nbsp;자식으로&nbsp;삽입</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;current&nbsp;노드의&nbsp;값&nbsp;보다&nbsp;작으면서&nbsp;왼쪽&nbsp;자식이&nbsp;null이면&nbsp;왼쪽&nbsp;자식에&nbsp;삽입&nbsp;그렇지&nbsp;않다면&nbsp;왼쪽&nbsp;자식을&nbsp;current로&nbsp;바꾼후&nbsp;다시&nbsp;루프</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;반대로&nbsp;current&nbsp;노드의&nbsp;값&nbsp;보다&nbsp;크면서&nbsp;오른쪽&nbsp;자식이&nbsp;null이면&nbsp;오른쪽&nbsp;자식에&nbsp;삽입&nbsp;그렇지&nbsp;않다면&nbsp;오른쪽&nbsp;자식을&nbsp;current로&nbsp;바꾼후&nbsp;다시&nbsp;루프</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>bstNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>data</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>bstNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>current</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="constant language boolean true ts"><span>true</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;삽입할&nbsp;데이터가&nbsp;작으면&nbsp;왼쪽</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>bstNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>break</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;삽입할&nbsp;데이터가&nbsp;크면&nbsp;오른쪽</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>bstNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>break</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>inOrder</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>node</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;중위&nbsp;탐색&nbsp;(왼쪽&nbsp;-&gt;&nbsp;부모&nbsp;-&gt;&nbsp;오른쪽)&nbsp;오름&nbsp;차순&nbsp;탐색</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;기준으로&nbsp;왼쪽&nbsp;시도후&nbsp;부모&nbsp;시도&nbsp;그리고&nbsp;나서&nbsp;부모의&nbsp;오른쪽&nbsp;시도</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>node</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>inOrder</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;노드의&nbsp;왼쪽부터&nbsp;출력&nbsp;시도</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>+</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>&nbsp;</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;자신&nbsp;출력</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>inOrder</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;노드의&nbsp;오른쪽&nbsp;출력&nbsp;시도</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>preOrder</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>node</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;전위&nbsp;탐색&nbsp;(부모&nbsp;-&gt;&nbsp;왼쪽&nbsp;-&gt;&nbsp;오른쪽)&nbsp;부모를&nbsp;기준으로&nbsp;부모&nbsp;먼저&nbsp;시도&nbsp;후&nbsp;왼쪽&nbsp;시도&nbsp;그리고&nbsp;다&nbsp;끝났으면&nbsp;오른쪽&nbsp;시도</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>node</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>+</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>&nbsp;</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>inOrder</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;노드의&nbsp;왼쪽부터&nbsp;출력&nbsp;시도</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>inOrder</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;노드의&nbsp;오른쪽&nbsp;출력&nbsp;시도</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>postOrder</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>node</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;후위&nbsp;탐색&nbsp;(왼쪽&nbsp;-&gt;&nbsp;오른쪽&nbsp;-&gt;&nbsp;부모)&nbsp;부모를&nbsp;기준으로&nbsp;왼쪽&nbsp;시도&nbsp;그리고&nbsp;다&nbsp;끝났으면&nbsp;오른쪽&nbsp;시도&nbsp;후&nbsp;마지막으로&nbsp;부모&nbsp;시도</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>node</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>inOrder</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;노드의&nbsp;왼쪽부터&nbsp;출력&nbsp;시도</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>inOrder</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;부모&nbsp;노드의&nbsp;오른쪽&nbsp;출력&nbsp;시도</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>+</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>&nbsp;</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;최솟값</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>getMin</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>current</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="keyword operator logical ts"><span>!</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;최댓값</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>getMax</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>current</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="keyword operator logical ts"><span>!</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;특정값&nbsp;검색</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>find</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>current</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&gt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>getSmallest</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>node</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>current</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>node</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="keyword operator logical ts"><span>!</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>current</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>current</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>remove</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>removeNode</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>root</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>removeNode</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>node</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>BSTNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>node</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;재귀</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;자식이&nbsp;없는&nbsp;노드</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;왼쪽&nbsp;자식이&nbsp;없는&nbsp;노드</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;오른쪽&nbsp;자식이&nbsp;없는&nbsp;노드</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;두&nbsp;자식이&nbsp;있는&nbsp;노드</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;가장&nbsp;오른쪽에서&nbsp;작은&nbsp;노드를&nbsp;찾는다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>tempNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>getSmallest</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;찾은&nbsp;노드의&nbsp;데이터를&nbsp;삭제하고자&nbsp;하는&nbsp;노드와&nbsp;교체한다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>tempNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;찾은&nbsp;노드를&nbsp;null&nbsp;처리&nbsp;한다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;node.right&nbsp;가&nbsp;그대로&nbsp;리턴된다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>removeNode</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other object ts"><span>tempNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>node</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>data</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>removeNode</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>left</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>node</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>removeNode</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>node</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>right</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>node</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></div></pre>',
frontmatter:{title:"binaryTree Hashing",date:"April 19, 2020"}}},pathContext:{slug:"/hello-algorithms/binaryTree/"}}}});
//# sourceMappingURL=path---hello-algorithms-binary-tree-92cba235ec33648ca3c6.js.map