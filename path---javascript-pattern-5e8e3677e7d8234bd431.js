webpackJsonp([71473981912016],{534:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/javascript-pattern/index.md absPath of file >>> MarkdownRemark",html:'<h1>목표</h1>\n<h1>목차</h1>\n<h1>패턴</h1>\n<h2>callback pattern</h2>\n<ul>\n<li>콜백은 나중에 실행할 부차 함수에 인자로 넣는 함수다. </li>\n<li>여기서 콜백이 실행될 ‘나중’시점이 부차 함수의 실행 완료 이전이면 동기, 반대로 실행 완료 이후면 비동기라고 본다.</li>\n</ul>\n<h3>시나리오</h3>\n<ul>\n<li>컨퍼런스에 attend(참가자) 등록을 하는 시스템이 있다.</li>\n<li>한명 또는 여러명을 한번에 참가 등록을 할수 있다.</li>\n<li>attend(참가자)는 또는 참가자들은 참가자 등록이 되었는지 안되었는지 확인할 수 있다.</li>\n<li>attend(참가자)는 또는 참가자들은 이름을 알 수 있다. </li>\n</ul>\n<h3>code</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> C <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// singleton </span>\n<span class="token keyword">var</span> C<span class="token punctuation">.</span><span class="token function-variable function">attend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fullName <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    registry<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    isRegistry<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getFullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 참가자 한명이 생성되었다. </span>\n<span class="token comment">// 참가자는 참가자 등록에 실제 현실에선 수동적이지만 oop 에선 능동적으로 생각한다.</span>\n<span class="token keyword">var</span> attendee1 <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">attend</span><span class="token punctuation">(</span><span class="token string">\'merlin1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> attendee2 <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">attend</span><span class="token punctuation">(</span><span class="token string">\'merlin2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token keyword">var</span> C<span class="token punctuation">.</span><span class="token function-variable function">attendeeCollection</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> attendees <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n\n    contains<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>attendee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> attendees<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 들어있니??</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    add<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>attendee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        attendees<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    remove<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>attendee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> index <span class="token operator">=</span> attendees<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        attendees<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    iterate<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 반복..</span>\n      <span class="token comment">// attendees의 각 attendee에 대해 콜백을 실행한다..</span>\n      attendees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">addAttendeesToCollection</span><span class="token punctuation">(</span>attendeeArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      attendeeArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> attendees <span class="token operator">=</span> Conference<span class="token punctuation">.</span><span class="token function">attendeeCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addAttendeesToCollection</span><span class="token punctuation">(</span><span class="token punctuation">[</span>attendee1<span class="token punctuation">,</span> attendee2<span class="token punctuation">]</span><span class="token punctuation">)</span>\nattendees<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">doCheckIn</span><span class="token punctuation">(</span>attend<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 익명의 콜백함수 -> 디버깅 용이함을 위해 이름을 지정한다. </span>\n  attend<span class="token punctuation">.</span><span class="token function">checkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h3>주의사항</h3>\n<ul>\n<li>콜백을 사용할때는 디버깅에 용이하기 위해 이름을 붙여주자.</li>\n<li>콜백 헬이 발생할때는 편 코딩으로 해결할수 있다.</li>\n<li>콜백 함수 안의 this를 주의하자.</li>\n</ul>\n<h3>정리</h3>\n<ul>\n<li>한가지 일을 여러번 수행해야 할때 함수하나를 인자로 보내(콜백 패턴) 여러번 호출을 진행할수 있다.</li>\n<li>A작업이 끝난뒤에 B작업이 수행되어지길 바랄때 콜백 패턴을 이용할 수 있다.</li>\n</ul>\n<h2>promise pattern</h2>\n<ul>\n<li>비동기 액션을 초기화하고 성공과 실패 케이스를 각각 처리할 콜백을 준다.</li>\n<li>이벤트 기반의 비동기 프로그래밍보다 훨씬 더 이해하기 쉽고 우아하며 탄탄한 코드를 작성할 수 있다.</li>\n</ul>\n<h2>partial pattern</h2>\n<h2>memoization pattern</h2>\n<h2>singleton pattern</h2>\n<h2>factory pattern</h2>\n<h2>sandbox pattern</h2>\n<h2>decoration pattern</h2>\n<ul>\n<li>단일 책임 원칙을 준수하면서 믿음성이 강화된 코드를 효과적으로 작성할 수 있다.</li>\n</ul>\n<h2>strategy pattern</h2>\n<h2>proxy pattern</h2>\n<h2>chaning pattern</h2>',frontmatter:{title:"javascript pattern",date:"August 05, 2018"}}},pathContext:{slug:"/javascript-pattern/"}}}});
//# sourceMappingURL=path---javascript-pattern-5e8e3677e7d8234bd431.js.map