{"version":3,"sources":["webpack:///path---index-c7b7b7ce978f395d4d59.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","473","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","excerpt","fields","slug","frontmatter","date","pathContext"],"mappings":"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","file":"path---index-c7b7b7ce978f395d4d59.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 473:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"이 글은  https://www.impressivewebs.com/javascript-try-catch/  의 번역 본입니다. 내가 javascript app 들을 개발할때 꽤 도움이 되는 한가지 기술은 Javascript  try-catch…\",\"fields\":{\"slug\":\"/try-catch/\"},\"frontmatter\":{\"date\":\"07 June, 2019\",\"title\":\"Using JavaScript’s Try-Catch Statement\"}}},{\"node\":{\"excerpt\":\"이 글은 아래 링크에 있는 글을 참조 했습니다.\\n 참조 Rendering DOM element 우리가 render 할 때 필요한게 뭔지 설명하는 plain JS object 를 하나 만들 것이다.\\n이것을 우리는 element…\",\"fields\":{\"slug\":\"/build-react/\"},\"frontmatter\":{\"date\":\"03 June, 2019\",\"title\":\"build-react\"}}},{\"node\":{\"excerpt\":\"자바스크립트는 재귀 깊이가 너무 깊어지면 오류가 발생한다. 호출 스택을 펼쳐서 재귀 호출을 루프처럼 펼쳐주는 기법을 사용하면 이런 오류를 막을 수 있다.  컴파일러는  꼬리 재귀(tail recursion…\",\"fields\":{\"slug\":\"/tail-recursion/\"},\"frontmatter\":{\"date\":\"16 May, 2019\",\"title\":\"꼬리 재귀\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/refactoring/\"},\"frontmatter\":{\"date\":\"10 May, 2019\",\"title\":\"(리팩토링) 리팩토링 요점 정리\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/maintainable-javascript/user-error-throwing/\"},\"frontmatter\":{\"date\":\"02 May, 2019\",\"title\":\"(읽기 쉬운 자바스크립트) 사용자 에러 던지기\"}}},{\"node\":{\"excerpt\":\"변수에 필요한 값이 할당되었는지 확인할 때  null 과 비교하는 방법은 흔히 잘못 사용하는 패턴이다. 위 코드는 items 변수에 sort() 와 forEach() 를 사용하는 것을 보아 items…\",\"fields\":{\"slug\":\"/maintainable-javascript/no-null-comparison/\"},\"frontmatter\":{\"date\":\"02 May, 2019\",\"title\":\"(읽기 쉬운 자바스크립트) null 비교 금지\"}}},{\"node\":{\"excerpt\":\"고전적인 방법 나쁜 예 위 예제는 이벤트 객체에서 clientX, clientY 프로퍼티만 사용한다. 이 코드만 으로는 간단하고 문제 없어 보이지만, 실제 활용하기에는 제한 사항이 많아서 사용하기 어려운 나쁜 패턴이다. 규칙…\",\"fields\":{\"slug\":\"/maintainable-javascript/event-handling/\"},\"frontmatter\":{\"date\":\"02 May, 2019\",\"title\":\"(읽기 쉬운 자바스크립트) 이벤트 처리\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/complex-refactoring/\"},\"frontmatter\":{\"date\":\"28 April, 2019\",\"title\":\"(리팩토링) 복합 리팩토링\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/generalization-processing/\"},\"frontmatter\":{\"date\":\"22 April, 2019\",\"title\":\"(리팩토링) 일반화 처리\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/simplifying-method-calls/\"},\"frontmatter\":{\"date\":\"15 April, 2019\",\"title\":\"(리팩토링) 메서드 호출 단순화\"}}},{\"node\":{\"excerpt\":\"자바스크립트는 메모리에 있는 데이터 구조의 전체 접근 권한을 주지 않는다.\\n하지만 언어차원에서 reference types 는 존재한다.\\nvalue 와 reference types…\",\"fields\":{\"slug\":\"/value-and-reference/\"},\"frontmatter\":{\"date\":\"07 April, 2019\",\"title\":\"Javascript의 Value와 Reference Types 이해\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 조건문 쪼개기 (Decompose Conditional) 복잡한 조건문(if-then-else)이 있을땐 if…\",\"fields\":{\"slug\":\"/refactoring/concise-conditionals/\"},\"frontmatter\":{\"date\":\"03 April, 2019\",\"title\":\"(리팩토링) 조건문 간결화\"}}},{\"node\":{\"excerpt\":\"번역 :  http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/ 자바스크립트가 OOP(객체 지향 언어인지 함수형 언어인지 많은 혼란들이 있다. 실제로 Javascript…\",\"fields\":{\"slug\":\"/javascript-object/\"},\"frontmatter\":{\"date\":\"01 April, 2019\",\"title\":\"Javascript 의 모든것은 Object 이다? 아니다?\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 클래스의 단방향 연결을 양방향으로 전환 (Change Unidirectional Association to…\",\"fields\":{\"slug\":\"/refactoring/organization-data2/\"},\"frontmatter\":{\"date\":\"01 April, 2019\",\"title\":\"(리팩토링) 데이터 체계화2\"}}},{\"node\":{\"excerpt\":\"자바스크립트 콜스택의 이해 번역 :  hocheol 원문 출처 :  https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d…\",\"fields\":{\"slug\":\"/call-stack/\"},\"frontmatter\":{\"date\":\"27 March, 2019\",\"title\":\"call stack\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/organization-data1/\"},\"frontmatter\":{\"date\":\"27 March, 2019\",\"title\":\"(리팩토링) 데이터 체계화1\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/moving-between-object/\"},\"frontmatter\":{\"date\":\"25 March, 2019\",\"title\":\"(리팩토링) 객체 간의 기능 이동\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 메서드 추출 (Extract Method…\",\"fields\":{\"slug\":\"/refactoring/method-cleanup/\"},\"frontmatter\":{\"date\":\"20 March, 2019\",\"title\":\"(리팩토링) 메서드 정리\"}}},{\"node\":{\"excerpt\":\"SOP 영어로 하면 same-origin policy…\",\"fields\":{\"slug\":\"/sop-and-cors-dnsRebinding/\"},\"frontmatter\":{\"date\":\"27 February, 2019\",\"title\":\"sop와 cors 그리고 DNS Rebinding\"}}},{\"node\":{\"excerpt\":\"Intro RxJS 의 특징을 알아보고 공부하자. RxJS 의 공홈을 독파해보자. definition RxJS 는 Observables…\",\"fields\":{\"slug\":\"/hello-rxjs/\"},\"frontmatter\":{\"date\":\"28 January, 2019\",\"title\":\"hello-RxJS\"}}},{\"node\":{\"excerpt\":\"Intro MobX 의 특징을 알아보고 공부하자. MobX 의 공홈을 독파해보자. Concepts State state 란 어플리케이션을 이끄는 데이터이다. Derivations ( 파생 ) state…\",\"fields\":{\"slug\":\"/hello-mobx/\"},\"frontmatter\":{\"date\":\"31 December, 2018\",\"title\":\"hello-MobX\"}}},{\"node\":{\"excerpt\":\"intro Node.js 에서 사용되는 use 함수와 redux에서 사용되는 middleware…\",\"fields\":{\"slug\":\"/hello-middleware/\"},\"frontmatter\":{\"date\":\"15 November, 2018\",\"title\":\"hello middleware\"}}},{\"node\":{\"excerpt\":\"High Order Function에 대해서 생각을 적는다. 서론 기본적인 high order function (고차함수) 특성을 이해한다. high order function…\",\"fields\":{\"slug\":\"/think-highOrderFunction/\"},\"frontmatter\":{\"date\":\"05 November, 2018\",\"title\":\"thinking high order function\"}}},{\"node\":{\"excerpt\":\"Goal 다양한 자바스크립트 패턴을 익히고 어느 상황에서 사용되는지 파악한다. Contents callback pattern promise pattern partial pattern memoization pattern singleton pattern…\",\"fields\":{\"slug\":\"/javascript-pattern/\"},\"frontmatter\":{\"date\":\"05 August, 2018\",\"title\":\"javascript pattern\"}}},{\"node\":{\"excerpt\":\"Intro 비지니스 코드가 아닌 ui의 이벤트를 활용한 코드를 자스민으로 testing을 진행해보자. jasmine 이란? 행위 주도 개발 (Behavior-Driven Development, BDD…\",\"fields\":{\"slug\":\"/ui-unit-testing/\"},\"frontmatter\":{\"date\":\"04 August, 2018\",\"title\":\"UI unit testing\"}}},{\"node\":{\"excerpt\":\"javascript promise 를 만들어보자. 동기 javascript 비동기를 다루는데 쓰이는 Promise 라는 객체가 있다. Promise 를 다루는 방법은 많지만 실제로이 객체가 어떤 방식으로 움직이는지 그 구조를 파악하면서 Promise…\",\"fields\":{\"slug\":\"/make-promise/\"},\"frontmatter\":{\"date\":\"27 July, 2018\",\"title\":\"make promise\"}}},{\"node\":{\"excerpt\":\"intro 공통모듈을 한 repo 에서 관리 하는 시도를 해보자. 여러 npm 패키지를 하나의 github repo 에서 관리하자. 즉, monorepo 를 구축해서 공통모듈을 관리하는 환경을 만들자. monorepo 의 이점 lint 나 build…\",\"fields\":{\"slug\":\"/experience-monorepo/\"},\"frontmatter\":{\"date\":\"13 July, 2018\",\"title\":\"experience monorepo\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/hello-oop/\"},\"frontmatter\":{\"date\":\"25 April, 2018\",\"title\":\"hello OOP\"}}},{\"node\":{\"excerpt\":\"게으른 평가 call-by-need 라고도 불리는 이 전략 방법은 ( 반대는 call-by-name ) 값이 실제로 필요할때 평가를 하는것이다. 또한 반복적인 평가를 피하기 위해서 한번 평가해둔 자료는 기억해 둔다.(memoization…\",\"fields\":{\"slug\":\"/lazy-evaluation/\"},\"frontmatter\":{\"date\":\"05 April, 2018\",\"title\":\"lazy evaluation\"}}},{\"node\":{\"excerpt\":\"패턴 연습을 위한 기본 다지기 일급 객체인 함수를 잘 다루자 함수를 인자로 받거나 함수를 리턴한다. 이것은 즉, 함수가 high order function 임을 인지한다. 위의 getX 와 getY 를 그냥 getX() / getY…\",\"fields\":{\"slug\":\"/javascript-basic1/\"},\"frontmatter\":{\"date\":\"05 April, 2018\",\"title\":\"Javascript-Basic1\"}}},{\"node\":{\"excerpt\":\"Intro flow 는 자바스크립트의 스태틱한 타입들을 체크해주는 도구이다. flow 는 코드가 변경되는 동안 빠른 피드백을 줍니다. flow 는 타입을 추론할 수 있습니다.  install 바벨을 이용해서 flow…\",\"fields\":{\"slug\":\"/hello-flow/\"},\"frontmatter\":{\"date\":\"29 March, 2018\",\"title\":\"hello-flow\"}}},{\"node\":{\"excerpt\":\"web Server web server 는 요청 과 응답의 연속이다. web browser에 web page주소를 입력(요청) 하면 입력한 주소에 맞는 웹 페이지(응답) 을 제공한다.  요청은 요청하는 url , 요청하는 방식 (ex. get,post…\",\"fields\":{\"slug\":\"/hello-webServer/\"},\"frontmatter\":{\"date\":\"15 March, 2018\",\"title\":\"hello-webServer\"}}},{\"node\":{\"excerpt\":\"Intro 기존에 돌아가는 서버를 바라보는 dev proxy server를 띄워 부분적으로 react component를 개발하는 환경을 만들어보자. 그러기 위해서 사용하는 개발서버 webpack dev config…\",\"fields\":{\"slug\":\"/webpack-config/\"},\"frontmatter\":{\"date\":\"14 March, 2018\",\"title\":\"webpack config\"}}},{\"node\":{\"excerpt\":\"Intro…\",\"fields\":{\"slug\":\"/hello-monad/\"},\"frontmatter\":{\"date\":\"13 February, 2018\",\"title\":\"hello monad\"}}},{\"node\":{\"excerpt\":\"intro 웹팩을 알아보고 웹팩 번들링엔 어떤 특징이 있는지 알아보자. webpack config ( webpack version 3) webpack config ( webpack version 4) 기존과 달라졌다고 하는점은 기존에 config…\",\"fields\":{\"slug\":\"/hello-webpack/\"},\"frontmatter\":{\"date\":\"01 February, 2018\",\"title\":\"Hello webpack\"}}},{\"node\":{\"excerpt\":\"intro React 리엑트를 처음 마주해보자.\\n해당 정리 내용의 출처는 \\n https://www.youtube.com/watch?v=GEoNiUcVwjE&list=PL9FpF z-xR GMujql3S_XGV2SpdfDBkeC…\",\"fields\":{\"slug\":\"/hello-react/\"},\"frontmatter\":{\"date\":\"31 January, 2018\",\"title\":\"Hello React\"}}},{\"node\":{\"excerpt\":\"Docker Depolyment blue-green 배포 개념 로드발란서를 앞단에 하나를 두고 v1 버젼인 블루(가칭) 라는 앱을 띄운다. 그러다가 나는 v…\",\"fields\":{\"slug\":\"/docker-depolyment/\"},\"frontmatter\":{\"date\":\"20 January, 2018\",\"title\":\"Docker Depolyment\"}}},{\"node\":{\"excerpt\":\"Docker term What is Docker? 소프트웨어를 containerization(컨테이너화) 한 플랫폼. ( 웹서비스 컨테이너 , 디비 컨테이너 따로 담는다고 하면 서로 isolation…\",\"fields\":{\"slug\":\"/hello-docker/\"},\"frontmatter\":{\"date\":\"09 January, 2018\",\"title\":\"Hello Docker\"}}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-c7b7b7ce978f395d4d59.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"이 글은  https://www.impressivewebs.com/javascript-try-catch/  의 번역 본입니다. 내가 javascript app 들을 개발할때 꽤 도움이 되는 한가지 기술은 Javascript  try-catch…\",\"fields\":{\"slug\":\"/try-catch/\"},\"frontmatter\":{\"date\":\"07 June, 2019\",\"title\":\"Using JavaScript’s Try-Catch Statement\"}}},{\"node\":{\"excerpt\":\"이 글은 아래 링크에 있는 글을 참조 했습니다.\\n 참조 Rendering DOM element 우리가 render 할 때 필요한게 뭔지 설명하는 plain JS object 를 하나 만들 것이다.\\n이것을 우리는 element…\",\"fields\":{\"slug\":\"/build-react/\"},\"frontmatter\":{\"date\":\"03 June, 2019\",\"title\":\"build-react\"}}},{\"node\":{\"excerpt\":\"자바스크립트는 재귀 깊이가 너무 깊어지면 오류가 발생한다. 호출 스택을 펼쳐서 재귀 호출을 루프처럼 펼쳐주는 기법을 사용하면 이런 오류를 막을 수 있다.  컴파일러는  꼬리 재귀(tail recursion…\",\"fields\":{\"slug\":\"/tail-recursion/\"},\"frontmatter\":{\"date\":\"16 May, 2019\",\"title\":\"꼬리 재귀\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/refactoring/\"},\"frontmatter\":{\"date\":\"10 May, 2019\",\"title\":\"(리팩토링) 리팩토링 요점 정리\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/maintainable-javascript/user-error-throwing/\"},\"frontmatter\":{\"date\":\"02 May, 2019\",\"title\":\"(읽기 쉬운 자바스크립트) 사용자 에러 던지기\"}}},{\"node\":{\"excerpt\":\"변수에 필요한 값이 할당되었는지 확인할 때  null 과 비교하는 방법은 흔히 잘못 사용하는 패턴이다. 위 코드는 items 변수에 sort() 와 forEach() 를 사용하는 것을 보아 items…\",\"fields\":{\"slug\":\"/maintainable-javascript/no-null-comparison/\"},\"frontmatter\":{\"date\":\"02 May, 2019\",\"title\":\"(읽기 쉬운 자바스크립트) null 비교 금지\"}}},{\"node\":{\"excerpt\":\"고전적인 방법 나쁜 예 위 예제는 이벤트 객체에서 clientX, clientY 프로퍼티만 사용한다. 이 코드만 으로는 간단하고 문제 없어 보이지만, 실제 활용하기에는 제한 사항이 많아서 사용하기 어려운 나쁜 패턴이다. 규칙…\",\"fields\":{\"slug\":\"/maintainable-javascript/event-handling/\"},\"frontmatter\":{\"date\":\"02 May, 2019\",\"title\":\"(읽기 쉬운 자바스크립트) 이벤트 처리\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/complex-refactoring/\"},\"frontmatter\":{\"date\":\"28 April, 2019\",\"title\":\"(리팩토링) 복합 리팩토링\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/generalization-processing/\"},\"frontmatter\":{\"date\":\"22 April, 2019\",\"title\":\"(리팩토링) 일반화 처리\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/simplifying-method-calls/\"},\"frontmatter\":{\"date\":\"15 April, 2019\",\"title\":\"(리팩토링) 메서드 호출 단순화\"}}},{\"node\":{\"excerpt\":\"자바스크립트는 메모리에 있는 데이터 구조의 전체 접근 권한을 주지 않는다.\\n하지만 언어차원에서 reference types 는 존재한다.\\nvalue 와 reference types…\",\"fields\":{\"slug\":\"/value-and-reference/\"},\"frontmatter\":{\"date\":\"07 April, 2019\",\"title\":\"Javascript의 Value와 Reference Types 이해\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 조건문 쪼개기 (Decompose Conditional) 복잡한 조건문(if-then-else)이 있을땐 if…\",\"fields\":{\"slug\":\"/refactoring/concise-conditionals/\"},\"frontmatter\":{\"date\":\"03 April, 2019\",\"title\":\"(리팩토링) 조건문 간결화\"}}},{\"node\":{\"excerpt\":\"번역 :  http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/ 자바스크립트가 OOP(객체 지향 언어인지 함수형 언어인지 많은 혼란들이 있다. 실제로 Javascript…\",\"fields\":{\"slug\":\"/javascript-object/\"},\"frontmatter\":{\"date\":\"01 April, 2019\",\"title\":\"Javascript 의 모든것은 Object 이다? 아니다?\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 클래스의 단방향 연결을 양방향으로 전환 (Change Unidirectional Association to…\",\"fields\":{\"slug\":\"/refactoring/organization-data2/\"},\"frontmatter\":{\"date\":\"01 April, 2019\",\"title\":\"(리팩토링) 데이터 체계화2\"}}},{\"node\":{\"excerpt\":\"자바스크립트 콜스택의 이해 번역 :  hocheol 원문 출처 :  https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d…\",\"fields\":{\"slug\":\"/call-stack/\"},\"frontmatter\":{\"date\":\"27 March, 2019\",\"title\":\"call stack\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/organization-data1/\"},\"frontmatter\":{\"date\":\"27 March, 2019\",\"title\":\"(리팩토링) 데이터 체계화1\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript…\",\"fields\":{\"slug\":\"/refactoring/moving-between-object/\"},\"frontmatter\":{\"date\":\"25 March, 2019\",\"title\":\"(리팩토링) 객체 간의 기능 이동\"}}},{\"node\":{\"excerpt\":\"해당 글은  리팩토링 (코드 품질을 개선하는 객체지향 사고법)  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 메서드 추출 (Extract Method…\",\"fields\":{\"slug\":\"/refactoring/method-cleanup/\"},\"frontmatter\":{\"date\":\"20 March, 2019\",\"title\":\"(리팩토링) 메서드 정리\"}}},{\"node\":{\"excerpt\":\"SOP 영어로 하면 same-origin policy…\",\"fields\":{\"slug\":\"/sop-and-cors-dnsRebinding/\"},\"frontmatter\":{\"date\":\"27 February, 2019\",\"title\":\"sop와 cors 그리고 DNS Rebinding\"}}},{\"node\":{\"excerpt\":\"Intro RxJS 의 특징을 알아보고 공부하자. RxJS 의 공홈을 독파해보자. definition RxJS 는 Observables…\",\"fields\":{\"slug\":\"/hello-rxjs/\"},\"frontmatter\":{\"date\":\"28 January, 2019\",\"title\":\"hello-RxJS\"}}},{\"node\":{\"excerpt\":\"Intro MobX 의 특징을 알아보고 공부하자. MobX 의 공홈을 독파해보자. Concepts State state 란 어플리케이션을 이끄는 데이터이다. Derivations ( 파생 ) state…\",\"fields\":{\"slug\":\"/hello-mobx/\"},\"frontmatter\":{\"date\":\"31 December, 2018\",\"title\":\"hello-MobX\"}}},{\"node\":{\"excerpt\":\"intro Node.js 에서 사용되는 use 함수와 redux에서 사용되는 middleware…\",\"fields\":{\"slug\":\"/hello-middleware/\"},\"frontmatter\":{\"date\":\"15 November, 2018\",\"title\":\"hello middleware\"}}},{\"node\":{\"excerpt\":\"High Order Function에 대해서 생각을 적는다. 서론 기본적인 high order function (고차함수) 특성을 이해한다. high order function…\",\"fields\":{\"slug\":\"/think-highOrderFunction/\"},\"frontmatter\":{\"date\":\"05 November, 2018\",\"title\":\"thinking high order function\"}}},{\"node\":{\"excerpt\":\"Goal 다양한 자바스크립트 패턴을 익히고 어느 상황에서 사용되는지 파악한다. Contents callback pattern promise pattern partial pattern memoization pattern singleton pattern…\",\"fields\":{\"slug\":\"/javascript-pattern/\"},\"frontmatter\":{\"date\":\"05 August, 2018\",\"title\":\"javascript pattern\"}}},{\"node\":{\"excerpt\":\"Intro 비지니스 코드가 아닌 ui의 이벤트를 활용한 코드를 자스민으로 testing을 진행해보자. jasmine 이란? 행위 주도 개발 (Behavior-Driven Development, BDD…\",\"fields\":{\"slug\":\"/ui-unit-testing/\"},\"frontmatter\":{\"date\":\"04 August, 2018\",\"title\":\"UI unit testing\"}}},{\"node\":{\"excerpt\":\"javascript promise 를 만들어보자. 동기 javascript 비동기를 다루는데 쓰이는 Promise 라는 객체가 있다. Promise 를 다루는 방법은 많지만 실제로이 객체가 어떤 방식으로 움직이는지 그 구조를 파악하면서 Promise…\",\"fields\":{\"slug\":\"/make-promise/\"},\"frontmatter\":{\"date\":\"27 July, 2018\",\"title\":\"make promise\"}}},{\"node\":{\"excerpt\":\"intro 공통모듈을 한 repo 에서 관리 하는 시도를 해보자. 여러 npm 패키지를 하나의 github repo 에서 관리하자. 즉, monorepo 를 구축해서 공통모듈을 관리하는 환경을 만들자. monorepo 의 이점 lint 나 build…\",\"fields\":{\"slug\":\"/experience-monorepo/\"},\"frontmatter\":{\"date\":\"13 July, 2018\",\"title\":\"experience monorepo\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/hello-oop/\"},\"frontmatter\":{\"date\":\"25 April, 2018\",\"title\":\"hello OOP\"}}},{\"node\":{\"excerpt\":\"게으른 평가 call-by-need 라고도 불리는 이 전략 방법은 ( 반대는 call-by-name ) 값이 실제로 필요할때 평가를 하는것이다. 또한 반복적인 평가를 피하기 위해서 한번 평가해둔 자료는 기억해 둔다.(memoization…\",\"fields\":{\"slug\":\"/lazy-evaluation/\"},\"frontmatter\":{\"date\":\"05 April, 2018\",\"title\":\"lazy evaluation\"}}},{\"node\":{\"excerpt\":\"패턴 연습을 위한 기본 다지기 일급 객체인 함수를 잘 다루자 함수를 인자로 받거나 함수를 리턴한다. 이것은 즉, 함수가 high order function 임을 인지한다. 위의 getX 와 getY 를 그냥 getX() / getY…\",\"fields\":{\"slug\":\"/javascript-basic1/\"},\"frontmatter\":{\"date\":\"05 April, 2018\",\"title\":\"Javascript-Basic1\"}}},{\"node\":{\"excerpt\":\"Intro flow 는 자바스크립트의 스태틱한 타입들을 체크해주는 도구이다. flow 는 코드가 변경되는 동안 빠른 피드백을 줍니다. flow 는 타입을 추론할 수 있습니다.  install 바벨을 이용해서 flow…\",\"fields\":{\"slug\":\"/hello-flow/\"},\"frontmatter\":{\"date\":\"29 March, 2018\",\"title\":\"hello-flow\"}}},{\"node\":{\"excerpt\":\"web Server web server 는 요청 과 응답의 연속이다. web browser에 web page주소를 입력(요청) 하면 입력한 주소에 맞는 웹 페이지(응답) 을 제공한다.  요청은 요청하는 url , 요청하는 방식 (ex. get,post…\",\"fields\":{\"slug\":\"/hello-webServer/\"},\"frontmatter\":{\"date\":\"15 March, 2018\",\"title\":\"hello-webServer\"}}},{\"node\":{\"excerpt\":\"Intro 기존에 돌아가는 서버를 바라보는 dev proxy server를 띄워 부분적으로 react component를 개발하는 환경을 만들어보자. 그러기 위해서 사용하는 개발서버 webpack dev config…\",\"fields\":{\"slug\":\"/webpack-config/\"},\"frontmatter\":{\"date\":\"14 March, 2018\",\"title\":\"webpack config\"}}},{\"node\":{\"excerpt\":\"Intro…\",\"fields\":{\"slug\":\"/hello-monad/\"},\"frontmatter\":{\"date\":\"13 February, 2018\",\"title\":\"hello monad\"}}},{\"node\":{\"excerpt\":\"intro 웹팩을 알아보고 웹팩 번들링엔 어떤 특징이 있는지 알아보자. webpack config ( webpack version 3) webpack config ( webpack version 4) 기존과 달라졌다고 하는점은 기존에 config…\",\"fields\":{\"slug\":\"/hello-webpack/\"},\"frontmatter\":{\"date\":\"01 February, 2018\",\"title\":\"Hello webpack\"}}},{\"node\":{\"excerpt\":\"intro React 리엑트를 처음 마주해보자.\\n해당 정리 내용의 출처는 \\n https://www.youtube.com/watch?v=GEoNiUcVwjE&list=PL9FpF z-xR GMujql3S_XGV2SpdfDBkeC…\",\"fields\":{\"slug\":\"/hello-react/\"},\"frontmatter\":{\"date\":\"31 January, 2018\",\"title\":\"Hello React\"}}},{\"node\":{\"excerpt\":\"Docker Depolyment blue-green 배포 개념 로드발란서를 앞단에 하나를 두고 v1 버젼인 블루(가칭) 라는 앱을 띄운다. 그러다가 나는 v…\",\"fields\":{\"slug\":\"/docker-depolyment/\"},\"frontmatter\":{\"date\":\"20 January, 2018\",\"title\":\"Docker Depolyment\"}}},{\"node\":{\"excerpt\":\"Docker term What is Docker? 소프트웨어를 containerization(컨테이너화) 한 플랫폼. ( 웹서비스 컨테이너 , 디비 컨테이너 따로 담는다고 하면 서로 isolation…\",\"fields\":{\"slug\":\"/hello-docker/\"},\"frontmatter\":{\"date\":\"09 January, 2018\",\"title\":\"Hello Docker\"}}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 473\n// module chunks = 142629428675168"],"sourceRoot":""}