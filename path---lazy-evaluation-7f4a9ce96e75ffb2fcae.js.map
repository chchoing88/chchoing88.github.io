{"version":3,"sources":["webpack:///path---lazy-evaluation-7f4a9ce96e75ffb2fcae.js","webpack:///./.cache/json/lazy-evaluation.json"],"names":["webpackJsonp","418","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,cAAgDC,gBAAmBC,GAAA,iIAAAC,KAAA,oynBAAszoBC,aAAobL,MAAA,kBAAAM,KAAA,oBAAoDC,aAAgBC,KAAA","file":"path---lazy-evaluation-7f4a9ce96e75ffb2fcae.js","sourcesContent":["webpackJsonp([275591574691347],{\n\n/***/ 418:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/lazy-evaluation/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>게으른 평가</h1>\\n<ul>\\n<li>\\n<p>call-by-need 라고도 불리는 이 전략 방법은 ( 반대는 call-by-name ) 값이 실제로 필요할때 평가를 하는것이다. 또한 반복적인 평가를 피하기 위해서 한번 평가해둔 자료는 기억해 둔다.(memoization)</p>\\n</li>\\n</ul>\\n<h1>왜?</h1>\\n<ul>\\n<li>아래와 같은 코드를 생각해 보자. </li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> someValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">expensiveFunction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//.. someValue를 사용하지 않는 다른 연산 코드들 및 유저 인터페이스를 포함하고 있는 수많은 코드들..</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>someValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>someValue는 코드의 맨 마지막 console.log 찍을때 필요하다.</li>\\n<li>처음에 expensiveFunction을 호출할때 브라우저는 그 시간동안 아무것도 안한다. 그 이후에 있을 사용자 경험을 높이기 위한 코드를 지연시키고 따라서 사용자 경험을 방해했을 것이다. 이것은 문제다.</li>\\n<li>물론 아래와 같이 바꿀수 있다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">//.. someValue를 사용하지 않는 다른 연산 코드들 및 유저 인터페이스를 포함하고 있는 수많은 코드들..</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">expensiveFunction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>아름답지 않을 뿐더러 큰 프로젝트일수록 언제 쓰일지도 모르고 필요할때마다 매번 호출하게 되니 비용이 많이 든다.</li>\\n</ul>\\n<h1>이렇게 하고 싶다.</h1>\\n<ul>\\n<li>만약 평가를 정말 필요할때 하면 어떨까? </li>\\n<li>자바스크립트에서 lazy 라는 키워드가 있다면..</li>\\n<li>someValue에는 실제 평가를 진행하는 코드가 있을테고 해당 값을 호출하면 그때 실제로 작동하는 코드이다.</li>\\n<li>아래와 같이 쓸수 있을 것이다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>lazy <span class=\\\"token keyword\\\">const</span> someValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">expensiveFunction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//... 수많은 코드들..</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>soameValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>soameValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>다만, 여기서 2번 반복해서 썼다고 해서 평가를 2번하는건 비효율 적이다.</li>\\n</ul>\\n<h1>만들어 보자.</h1>\\n<ul>\\n<li>\\n<p>실제 자바스크립트 안에는 lazy 라는 키워드가 없기 때문에 lazy 라는 함수를 만들어 보자.</p>\\n<h2>memoization 패턴을 이용한 반복호출을 피하자.</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">lazy</span> <span class=\\\"token operator\\\">=</span> getter <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">let</span> evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> _res <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">res</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>evaluated<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> _res <span class=\\\"token operator\\\">=</span> getter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>lazy 함수는 getter 라는 함수를 인자로 받아서 getter를 호출시켜주는 새로운 함수를 반환한다.</li>\\n<li>클로저를 사용, evaluated 와 _res 변수는 반복 호출을 피하기 위한 자유변수들이다.</li>\\n</ul>\\n<h2>사용해보자.</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> counter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> lazyVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\ncounter <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'result'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 0</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">lazyVal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// result</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">lazyVal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// result</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">lazyVal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// result</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p>여러번 호출하더라도 한번만 호출이 된다는걸 알수 있다.</p>\\n</li>\\n<li>\\n<p>이제 실질적으로 사용하면 되는가????</p>\\n</li>\\n<li>\\n<p>실제 lazyValue들 끼리 연산작업이 필요할 경우엔 어떻게 해야할까???</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">const</span> actualVal1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> actualVal2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>actualVal1 <span class=\\\"token operator\\\">+</span> actualVal1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>음..달라진게 없는거 같다. </li>\\n<li>우리는 평가를 실제로 필요한 지점에서 사용하고 싶은데 그럼 어떻게 해야할까.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> newVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> actualVal1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> actualVal2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> actualVal1 <span class=\\\"token operator\\\">+</span> actualVal2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>다시 lazy로 감싸야한다.</li>\\n<li>음.. 아름답지가 않다.</li>\\n</ul>\\n<h2>업그레이드 하자</h2>\\n<ul>\\n<li>우리가 원하는 시점으로 평가를 할수있도록 뒤로 늦추긴 했지만 매번 lazy로 감싸야 하는 번거로움이 있었다.</li>\\n<li>체이닝으로 엮어서 표현하면 어떨까???</li>\\n<li>다시 lazy 함수를 업그레이드 해보자.</li>\\n</ul>\\n<h3>이런 모양이면 좋겠다.</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> counter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> lazyVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> counter <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">/* 첫 평가 실행후 리턴 된 값으로 다시 lazy를 리턴 */</span>\\n<span class=\\\"token keyword\\\">const</span> lazyOp <span class=\\\"token operator\\\">=</span> lazyVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> v1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h3>lazy를 수정하자.</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">lazy</span> <span class=\\\"token operator\\\">=</span> getter <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> _res <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">res</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>evaluated<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> _res <span class=\\\"token operator\\\">=</span> getter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">/* 체이닝을 위한 then 함수 생성 */</span>      \\n  res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> modifier <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">modifier</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">res</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>리턴된 inner함수 (res) 에게 프로퍼티로 then 함수를 추가.</li>\\n<li>then에서 인자로는 첫번째 평가 이후에 리턴된 값으로 다시 lazy를 수행할수 있는 next 함수를 받는다.</li>\\n<li>여기서 modifier 인자는 v1 => lazy() 함수가 되겠다. </li>\\n<li>res()는 lazyVal 함수가 될것이고 여기서 res() 호출된 결과는 즉, v1으로 들어갈 것이다.</li>\\n<li>받은 v1을 다시 lazy로 감싸서 lazyOp로 return 한다. </li>\\n</ul>\\n<h3>map 함수를 만들어 보자.</h3>\\n<ul>\\n<li>\\n<p>then 함수는 임의로 우리가 lazy 함수를 리턴해줬었어야 했다.</p>\\n</li>\\n<li>\\n<p>이번엔 그것마저 자동으로 해주는 map 함수를 만들어보자.</p>\\n<h4>이런 모양이어야 한다.</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> counter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* 첫 평가 실행후 리턴 된 값으로 다시 lazy를 리턴 */</span>\\n<span class=\\\"token keyword\\\">const</span> lazyOp <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> counter <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">=></span> \\nv1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>v2 <span class=\\\"token operator\\\">=></span> \\nv2 <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>다시 lazy 함수를 수정하자.</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">lazy</span> <span class=\\\"token operator\\\">=</span> getter <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">let</span> evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> _res <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">res</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>evaluated<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> _res <span class=\\\"token operator\\\">=</span> getter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/* 체이닝을 위한 then 함수 생성 */</span>      \\nres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> modifier <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">modifier</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">res</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* map 함수 */</span>\\nres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">map</span> <span class=\\\"token operator\\\">=</span> mapper <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">mapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">res</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>정리</h1>\\n<ul>\\n<li>자바스크립트에서의 게으른 평가는 결국 호출하고 싶은 코드들을 함수로 한번 더 감싸 실제 필요할때 평가한다.</li>\\n<li>lazy 체이닝의 경우 연속된 함수 참조에 의해서 이뤄진다.</li>\\n</ul>\\n<h1>참고</h1>\\n<p><a href=\\\"https://www.codementor.io/agustinchiappeberrini/lazy-evaluation-and-javascript-a5m7g8gs3\\\">https://www.codementor.io/agustinchiappeberrini/lazy-evaluation-and-javascript-a5m7g8gs3</a></p>\",\"frontmatter\":{\"title\":\"lazy evaluation\",\"date\":\"April 05, 2018\"}}},\"pathContext\":{\"slug\":\"/lazy-evaluation/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lazy-evaluation-7f4a9ce96e75ffb2fcae.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/lazy-evaluation/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>게으른 평가</h1>\\n<ul>\\n<li>\\n<p>call-by-need 라고도 불리는 이 전략 방법은 ( 반대는 call-by-name ) 값이 실제로 필요할때 평가를 하는것이다. 또한 반복적인 평가를 피하기 위해서 한번 평가해둔 자료는 기억해 둔다.(memoization)</p>\\n</li>\\n</ul>\\n<h1>왜?</h1>\\n<ul>\\n<li>아래와 같은 코드를 생각해 보자. </li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> someValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">expensiveFunction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//.. someValue를 사용하지 않는 다른 연산 코드들 및 유저 인터페이스를 포함하고 있는 수많은 코드들..</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>someValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>someValue는 코드의 맨 마지막 console.log 찍을때 필요하다.</li>\\n<li>처음에 expensiveFunction을 호출할때 브라우저는 그 시간동안 아무것도 안한다. 그 이후에 있을 사용자 경험을 높이기 위한 코드를 지연시키고 따라서 사용자 경험을 방해했을 것이다. 이것은 문제다.</li>\\n<li>물론 아래와 같이 바꿀수 있다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">//.. someValue를 사용하지 않는 다른 연산 코드들 및 유저 인터페이스를 포함하고 있는 수많은 코드들..</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">expensiveFunction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>아름답지 않을 뿐더러 큰 프로젝트일수록 언제 쓰일지도 모르고 필요할때마다 매번 호출하게 되니 비용이 많이 든다.</li>\\n</ul>\\n<h1>이렇게 하고 싶다.</h1>\\n<ul>\\n<li>만약 평가를 정말 필요할때 하면 어떨까? </li>\\n<li>자바스크립트에서 lazy 라는 키워드가 있다면..</li>\\n<li>someValue에는 실제 평가를 진행하는 코드가 있을테고 해당 값을 호출하면 그때 실제로 작동하는 코드이다.</li>\\n<li>아래와 같이 쓸수 있을 것이다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>lazy <span class=\\\"token keyword\\\">const</span> someValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">expensiveFunction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//... 수많은 코드들..</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>soameValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>soameValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>다만, 여기서 2번 반복해서 썼다고 해서 평가를 2번하는건 비효율 적이다.</li>\\n</ul>\\n<h1>만들어 보자.</h1>\\n<ul>\\n<li>\\n<p>실제 자바스크립트 안에는 lazy 라는 키워드가 없기 때문에 lazy 라는 함수를 만들어 보자.</p>\\n<h2>memoization 패턴을 이용한 반복호출을 피하자.</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">lazy</span> <span class=\\\"token operator\\\">=</span> getter <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">let</span> evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> _res <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">res</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>evaluated<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> _res <span class=\\\"token operator\\\">=</span> getter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>lazy 함수는 getter 라는 함수를 인자로 받아서 getter를 호출시켜주는 새로운 함수를 반환한다.</li>\\n<li>클로저를 사용, evaluated 와 _res 변수는 반복 호출을 피하기 위한 자유변수들이다.</li>\\n</ul>\\n<h2>사용해보자.</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> counter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> lazyVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\ncounter <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'result'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 0</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">lazyVal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// result</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">lazyVal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// result</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>counter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">lazyVal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// result</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p>여러번 호출하더라도 한번만 호출이 된다는걸 알수 있다.</p>\\n</li>\\n<li>\\n<p>이제 실질적으로 사용하면 되는가????</p>\\n</li>\\n<li>\\n<p>실제 lazyValue들 끼리 연산작업이 필요할 경우엔 어떻게 해야할까???</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">const</span> actualVal1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> actualVal2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>actualVal1 <span class=\\\"token operator\\\">+</span> actualVal1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>음..달라진게 없는거 같다. </li>\\n<li>우리는 평가를 실제로 필요한 지점에서 사용하고 싶은데 그럼 어떻게 해야할까.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> newVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> actualVal1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> actualVal2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazyVal2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> actualVal1 <span class=\\\"token operator\\\">+</span> actualVal2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>다시 lazy로 감싸야한다.</li>\\n<li>음.. 아름답지가 않다.</li>\\n</ul>\\n<h2>업그레이드 하자</h2>\\n<ul>\\n<li>우리가 원하는 시점으로 평가를 할수있도록 뒤로 늦추긴 했지만 매번 lazy로 감싸야 하는 번거로움이 있었다.</li>\\n<li>체이닝으로 엮어서 표현하면 어떨까???</li>\\n<li>다시 lazy 함수를 업그레이드 해보자.</li>\\n</ul>\\n<h3>이런 모양이면 좋겠다.</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> counter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> lazyVal <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> counter <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">/* 첫 평가 실행후 리턴 된 값으로 다시 lazy를 리턴 */</span>\\n<span class=\\\"token keyword\\\">const</span> lazyOp <span class=\\\"token operator\\\">=</span> lazyVal<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> v1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h3>lazy를 수정하자.</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">lazy</span> <span class=\\\"token operator\\\">=</span> getter <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> _res <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">res</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>evaluated<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> _res <span class=\\\"token operator\\\">=</span> getter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">/* 체이닝을 위한 then 함수 생성 */</span>      \\n  res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> modifier <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">modifier</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">res</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>리턴된 inner함수 (res) 에게 프로퍼티로 then 함수를 추가.</li>\\n<li>then에서 인자로는 첫번째 평가 이후에 리턴된 값으로 다시 lazy를 수행할수 있는 next 함수를 받는다.</li>\\n<li>여기서 modifier 인자는 v1 => lazy() 함수가 되겠다. </li>\\n<li>res()는 lazyVal 함수가 될것이고 여기서 res() 호출된 결과는 즉, v1으로 들어갈 것이다.</li>\\n<li>받은 v1을 다시 lazy로 감싸서 lazyOp로 return 한다. </li>\\n</ul>\\n<h3>map 함수를 만들어 보자.</h3>\\n<ul>\\n<li>\\n<p>then 함수는 임의로 우리가 lazy 함수를 리턴해줬었어야 했다.</p>\\n</li>\\n<li>\\n<p>이번엔 그것마저 자동으로 해주는 map 함수를 만들어보자.</p>\\n<h4>이런 모양이어야 한다.</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> counter <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/* 첫 평가 실행후 리턴 된 값으로 다시 lazy를 리턴 */</span>\\n<span class=\\\"token keyword\\\">const</span> lazyOp <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> counter <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">=></span> \\nv1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>v2 <span class=\\\"token operator\\\">=></span> \\nv2 <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>다시 lazy 함수를 수정하자.</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">lazy</span> <span class=\\\"token operator\\\">=</span> getter <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">let</span> evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> _res <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">res</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>evaluated<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> _res <span class=\\\"token operator\\\">=</span> getter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  evaluated <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> _res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/* 체이닝을 위한 then 함수 생성 */</span>      \\nres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> modifier <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">modifier</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">res</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* map 함수 */</span>\\nres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">map</span> <span class=\\\"token operator\\\">=</span> mapper <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">mapper</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">res</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>정리</h1>\\n<ul>\\n<li>자바스크립트에서의 게으른 평가는 결국 호출하고 싶은 코드들을 함수로 한번 더 감싸 실제 필요할때 평가한다.</li>\\n<li>lazy 체이닝의 경우 연속된 함수 참조에 의해서 이뤄진다.</li>\\n</ul>\\n<h1>참고</h1>\\n<p><a href=\\\"https://www.codementor.io/agustinchiappeberrini/lazy-evaluation-and-javascript-a5m7g8gs3\\\">https://www.codementor.io/agustinchiappeberrini/lazy-evaluation-and-javascript-a5m7g8gs3</a></p>\",\"frontmatter\":{\"title\":\"lazy evaluation\",\"date\":\"April 05, 2018\"}}},\"pathContext\":{\"slug\":\"/lazy-evaluation/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lazy-evaluation.json\n// module id = 418\n// module chunks = 275591574691347"],"sourceRoot":""}