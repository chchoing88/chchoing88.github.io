{"version":3,"sources":["webpack:///path---tail-recursion-112d6f6c158ce2ab06a7.js","webpack:///./.cache/json/tail-recursion.json"],"names":["webpackJsonp","519","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,cAAgDC,gBAAmBC,GAAA,gIAAAC,KAAA;AAAop8EC,aAAouBL,MAAA,QAAAM,KAAA,kBAAwCC,aAAgBC,KAAA","file":"path---tail-recursion-112d6f6c158ce2ab06a7.js","sourcesContent":["webpackJsonp([246346007348531],{\n\n/***/ 519:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/tail-recursion/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>자바스크립트는 재귀 깊이가 너무 깊어지면 오류가 발생한다. 호출 스택을 펼쳐서 재귀 호출을 루프처럼 펼쳐주는 기법을 사용하면 이런 오류를 막을 수 있다.</p>\\n<p>컴파일러는 <em>꼬리 재귀(tail recursion)</em> 이라는 특별한 형태의 재귀 호출을 스택 깊이를 키우지 않고 처리하도록 최적화해줄 수 있다.\\n컴파일러가 최적화를 제공하지 않으면 <em>트램폴린(trampoline)</em> 과 <em>스트림(stream)</em> 등의 기법을 사용해 재귀를 수동으로 최적화할 수 있고, 스택이나 리스트 등의 데이터 구조와 함께 재귀를 루프로 바꾸는 일반적인 규칙을 활용하면 재귀를 기계적으로 루프로 바꿀 수 있다.</p>\\n<blockquote>\\n<p>여기서 stack 이란 ? 함수를 호출한 후에 원래 자리로 돌아오려면, 원래 자리를 어딘가에 저장해둬야 하는데, 그 어딘가가 바로 Stack 이다.</p>\\n</blockquote>\\n<p>피보나치 수열과 단순한 합을 구하는 재귀함수에서 문제는 두가지 이다.</p>\\n<ol>\\n<li>피보나치 수열은 재귀 호출을 두겹으로 호출하기 때문에 함수 호출 횟수가 많다.</li>\\n<li>단순한 합을 구하는 재귀함수에서는 stack 의 깊이가 너무 깊어진다.</li>\\n</ol>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;단순&nbsp;합을&nbsp;재귀로&nbsp;해결한&nbsp;예제.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>sum</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>sum</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>첫번 째 문제는 한겹으로 재귀를 호출 할 수 있다면 함수 호출을 줄일 수 있을 것이다.\\n두번 째 문제의 해결책은 두가지가 있을 수 있는데 다음과 같다.</p>\\n<ul>\\n<li>stack 을 쓰지 말자. 즉, 함수 호출을 하지말자.</li>\\n<li>stack 을 쓰되 누적해서 쓰지말고 있는걸 재활용하자.</li>\\n</ul>\\n<p>피보나치 수열에서 해결은 <em>반복 단계별 계산 결과를 반복이 끝날 때까지 어떤 변수(여기서는 previousFibo)에 계속 저장한다.</em> 방식으로 해결이 된다.\\n피보나치 수열을 재귀가 아닌 반복문을 이용해서 풀어보자. 바로 해결이 될 것이다.</p>\\n<p>프로그램이 stack 을 쓰는 이유는 함수 실행 후 돌아갈 원래 자리를 stack 에 저장을 하기 때문이다.\\n그렇다면 왜 원래 자리로 돌아가는가??</p>\\n<p>바로 <em>원래 자리에서 해야 할 일이 남아있기 때문이다.</em>\\n바꿔 말하면, <em>원래 자리에서 해야할 일이 남아있지 않다면 돌아갈 원래 자리를 Stack 에 추가로 저장할 필요가 없다.</em></p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>fibonacci</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacci</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacci</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p><code>fibonacci(n - 1)</code>를 호출한 후에 바로 리턴하는 것이 아니라 다시 한 번 <code>fibonacci(n - 2)</code>를 실행해서 두 값을 더한 후에 리턴한다. 다시 말해, 원래 자리로 돌아와서 해야할 일이 남아있으므로 돌아올 원래 자리의 정보를 Stack 에 추가해서 저장해야 한다.</p>\\n<p>그렇다면 원래 자리에서 해야할 일을 남겨두지 않는 방법은 무엇인가? 그 방법이 바로 Tail Call(꼬리 호출)이다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>a</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;v&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>0</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>b</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>v</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>b</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>a</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div></pre>\\n<p><em>Tail Call 은 함수를 호출해서 값을 반환 받은 후 아무 일도 하지 않고 바로 반환하게 하기 위해 논리적으로 가장 마지막(꼬리) 위치에서 함수를 호출하는 방식을 말한다.</em>\\n<em>Tail Call 방식을 적용하려면 두 겹인 재귀 호출을 한 겹으로 줄여야만 한다.</em></p>\\n<p>즉, 반환 받은 후 아무일도 하지 않게끔 하는 Tail Call 방식으로 짜는 것까지는 프로그래머가 할 수 있는 일이지만, Tail Call 방식으로 짰다고 해도 그런 코드를 돌리는 실행 환경에서는 내부적으로 여전히 Stack 을 새로 만들어 추가하는 비효율적인 방식으로 동작할 수도 있다.</p>\\n<blockquote>\\n<p>tail Call 방식으로 짜여지면 Stack 을 새로 만들지 않고 이미 있는 Stack 속의 값만 대체해서 Stack 을 재사용하는 방식으로 동작하도록 최적화 할 수 있다. 이러한 최적화를 Tail Call Optimization(또는 Tail Call Elimination)이라고 하며 언어의 실행 환경에서 지원해줘야 한다.</p>\\n</blockquote>\\n<p>Tail Recursion 의 경우에는 <em>Tail Call 의 특별한 경우로서 Tail Call 로 호출하는 함수가 자기 자신인 경우</em>에 해당한다.\\n이제 Tail Recursion 으로 fibonacci 수를 구하는 코드를 짜보자. 앞에서 재귀 호출 방식을 반복 방식으로 바꾸는 작업을 직접 해봤다면 크게 어렵지 않을 것이다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>fibonacciTailRecursion</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousFibo</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousPreviousFibo</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;currentFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;previousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;이번&nbsp;호출의&nbsp;피보나치&nbsp;수를&nbsp;구하고</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;currentFibo&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;previousFibo&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;previousPreviousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;다음번&nbsp;재귀&nbsp;호출을&nbsp;위해&nbsp;앞의&nbsp;피보나치&nbsp;수를&nbsp;앞의앞의&nbsp;피보나치&nbsp;수로&nbsp;한&nbsp;칸&nbsp;미루고</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;previousPreviousFibo&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;previousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;다음번&nbsp;재귀&nbsp;호출을&nbsp;위해&nbsp;현재의&nbsp;피보나치&nbsp;수를&nbsp;앞의&nbsp;피보나치&nbsp;수로&nbsp;한&nbsp;칸&nbsp;미룬다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;previousFibo&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;currentFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacciRecursion</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;previousFibo</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;previousPreviousFibo</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>fibonacciTailRecursion</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousFibo</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousPreviousFibo</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;previousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacciTailRecursion</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;previousFibo&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;previousPreviousFibo</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;previousFibo</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>재귀 호출을 반복이나 Tail Recursion 방식으로 구현하려면 다음의 사항을 꼭 기억하자.\\n반복이나 꼬리 호출 단계별 계산 결과를 어딘가에 계속 저장한다.</p>\\n<p>반복 방식에서는 previousFibo 이 반복문 외부에서 선언되었고, Tail Recursion 방식에서는 previousFibo 이 함수의 파라미터로 사용된다는 점만 다를 뿐, 반복이나 꼬리 호출 단계별 계산 결과를 어딘가에 저장해둔다는 점은 똑같다.</p>\\n<p>인터프리터 / 컴파일러는 호출 스택에서 과거 함수 호출을 제거하여 재귀를 최적화합니다. 하지만 자바 스크립트에서 꼬리 재귀는 인식되지 않고 여전히 호출 스택에 배치가 되는 문제점을 가지고 있다.</p>\\n<h2>Trampoline</h2>\\n<p>일반적인 Tail Recursion 에서는 tail position 에서 함수 스스로를 계속 호출을 하고 그 결과를 바로 다시 자기 자신 함수의 결과로 넘겨서 호출하곤 했었다.\\n이때 컴파일러가 tail positon 호출을 위한 optimizations 이 안되어 있다면 스택은 계속 쌓여만 간다.</p>\\n<p>Tail Recursion 으로 짠 factorial</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>factorial</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;</span><span class=\\\"meta function js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"storage type function js\\\"><span>function</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>result</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>===</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>result&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;n</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;So&nbsp;factorial(4)&nbsp;=&nbsp;recur(1,&nbsp;4)&nbsp;=&nbsp;recur(4&nbsp;*&nbsp;1,&nbsp;3)&nbsp;=&nbsp;recur(4&nbsp;*&nbsp;3,&nbsp;3)&nbsp;=&nbsp;recur(12&nbsp;*&nbsp;2,&nbsp;2)&nbsp;=&nbsp;recur(24&nbsp;*&nbsp;1,&nbsp;1)&nbsp;=&nbsp;24.</span></span></span></div></pre>\\n<p>위 코드에서 <code>factorial(100000000)</code> 실행시키면 Maximum call stack size exceeded 에러가 발생한다.</p>\\n<p>그래서 한가지 방법중에 하나가 trampoline 이라고 불리는 패턴이다.\\n만약 위에서 말한 계속 호출하는 방식이 아닌 호출할 함수를 리턴해준다면, 우리는 tramploine 을 사용해서 계속적으로 실행할 수 있다.</p>\\n<p>trampoline 자바스크립트에서 tail recursion 을 실행시켜주는 helper function 이다.\\n보통 다른 문서들에서 thunk 와 tramploining 이란 단어를 들어 봤을 것이다.\\n<code>thunk</code>는 아직 호출되지 않는 함수를 말한다. 즉, 다른 함수에 대한 호출을 래핑하는 함수이다. 간단하게는 currying 과 binding 에서 이런 기능을 볼 수 있다.\\n<code>trampoline function</code>에 thunk 를 전달을 하면 bound function 이 나오고, 해당 인자 값과 함께 while-loop 를 통해서 bound function 이 더 이상 함수가 아닐때 까지 그것의 recursive function 을 호출한다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>trampoline</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>fn</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>fn&nbsp;</span><span class=\\\"keyword operator logical js\\\"><span>&amp;&amp;</span></span><span>&nbsp;fn&nbsp;</span><span class=\\\"keyword operator instanceof js\\\"><span>instanceof</span></span><span>&nbsp;</span><span class=\\\"support class js\\\"><span>Function</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>continue&nbsp;if&nbsp;fn&nbsp;is&nbsp;not&nbsp;undefined/null&nbsp;and&nbsp;if&nbsp;it&nbsp;is&nbsp;still&nbsp;a</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;fn&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fn</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;recur.bind(null,1*4,3)&nbsp;을&nbsp;실행..&nbsp;이&nbsp;함수도&nbsp;thunk&nbsp;함수이다.&nbsp;함수&nbsp;호출&nbsp;이후에&nbsp;함수를&nbsp;리턴함으로</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>we&nbsp;call&nbsp;the&nbsp;function&nbsp;and&nbsp;assign&nbsp;the&nbsp;result&nbsp;of&nbsp;called&nbsp;previous&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>to&nbsp;new&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;fn</span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>when&nbsp;we&nbsp;are&nbsp;done&nbsp;return&nbsp;fn&nbsp;when&nbsp;fn&nbsp;is&nbsp;the&nbsp;result&nbsp;and&nbsp;no&nbsp;longer</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>factorial</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;</span><span class=\\\"meta function js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"storage type function js\\\"><span>function</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>result</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>===</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>recur</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"entity name function js\\\"><span>bind</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant language null js\\\"><span>null</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;result&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;n</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n&nbsp;—&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>trampoline</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>위 예에서 <code>factorical(4)</code> 를 호출한다고 가정을 해보고 호출을 따라가보자.\\n여기서 위에서 설명한 <code>thunk 함수</code>는 <code>recur 함수</code>이다.\\n<code>recur(1,n)</code> 을 trampoline 함수에 인자로 넘겼을 때, <code>recur(1,4)</code> 를 호출 후에 우리는 사실 <code>recur.bind(null,1*4,3)</code> 을 넘기게 됩니다.\\nwhile 반복문은 recur 가 undefined/null 이지 않고, 함수인지를 체크한다. 여기서 recur 이 bounded 되고 나서도 recur 함수는 Function object 의 인스턴스로 여전히 남아있게 된다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"entity name type object console js\\\"><span>console</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function console js\\\"><span>log</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>recur</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"entity name function js\\\"><span>bind</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant language null js\\\"><span>null</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span>&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>4</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>3</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;[Function:&nbsp;bound&nbsp;recur]</span></span></span></div></pre>\\n<p>루프에 2 가지 상태를 확인한 후에 fn 을 호출한다. 그리곤 그것의 결과를 다시 fn 에 할당한다.\\n그러면 fn 은 <code>recur.bind(null,4*3,2)</code> 가 된다. 이 루프는 <code>recur.bind(null,12*2,1)</code> 이 될때까지 동작하게 된다. 그리곤 24 를 리턴한다. 여기서 24 값은 undefined/null 이 아니다, 그래서 while 루프 상태값에서 통과가 되지만 24 값은 function 이 아니기에 while 루프가 중지된다. trampoline 함수는 결국 24 인 fn 을 반환하게 된다.</p>\\n<p>이 과정에서 우리는 함수 호출을 쌓을 필요가 없습니다. 각 함수가 호출되어 바운드 함수를 반환 한 다음 호출 스택에서 제거됩니다. 그런 다음 trampoline 의 while 루프를 사용하여 바운드 함수를 호출하여 각 재귀 적 단계로 건너 뛰게 됩니다.</p>\\n<p>while 문을 돌면서 fn 이 함수가 아닌 값으로 떨어질때까지 호출하고 리턴하고를 반복한다. fn 을 만들때에는 해당 조건이 완성되지 않았을 때는 계속 함수를 리턴하도록 해준다.</p>\\n<p>결과적으로 같이 <code>factorial(100000000)</code>을 실행할 경우에 call stack 에러가 뜨지 않는다.</p>\\n<h2>예시</h2>\\n<p>트리 구조로 되어있는 것을 flat 하게 만들자.</p>\\n<p>예시</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>tree</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>root</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>subtree1</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child1</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child2</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child3</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>subtree2</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child1</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child4</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child5</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child6</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div></pre>\\n<p>맨 처음에는 재귀 함수를 사용했었다.</p>\\n<p>재귀 함수가 퍼포먼스 측면에서 느린건 잘 모르겠으나 자바스크립트에서 stack 이 overflow 날 위험이 있다.\\n브라우저 쪽에서 tail call optimization 을 지원한다면 stack 이 과다하게 차지 않아도 될듯 싶은데 아직은 그런 기능이 없는거 같다.</p>\\n<p>&#x3C; 처음 짠 재귀 함수 ></p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>makeFlatTreeStructureData</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>treeData</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>result</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>insertItem</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>root</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other object js\\\"><span>root</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function dom js\\\"><span>forEach</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"variable parameter function js\\\"><span>item</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>item</span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other object js\\\"><span>result</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>push</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>item</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>item</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span>&nbsp;</span><span class=\\\"keyword operator logical js\\\"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>item</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other object property js\\\"><span>child</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"support variable property js\\\"><span>length</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&gt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>0</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>insertItem</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>item</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>insertItem</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>treeData</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>여기서 stack 이 overflow 나지 않게 트릭을 하나 쓸수 있는데 바로 trampoline 패턴이다.\\n근데 이 trampoline 패턴의 방식은 큰 약점이 있는데 그것은 느리다는 것이다.</p>\\n<p>각 재귀 마다 새로운 함수를 만들어내고 많은 재귀는 당연히 많은 함수를 만든다는 것이다.\\n그래서 이방식은 오류를 방지할 순 있지만 느리다는게 최대 단점이다.</p>\\n<p>참조: <a href=\\\"https://marmelab.com/blog/2018/02/12/understanding-recursion.html\\\">https://marmelab.com/blog/2018/02/12/understanding-recursion.html</a></p>\\n<p>참고로 아직 trampoline 방식으로 구현을 어떻게 해야할지 구현을 못해봤다. ( 5 월 16 일 )</p>\\n<p>구현을 따로 해봐야 할 꺼 같다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;trampoline&nbsp;방식</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;재귀&nbsp;함수를&nbsp;스택을&nbsp;늘리지&nbsp;않고&nbsp;호출&nbsp;할&nbsp;수&nbsp;있게끔&nbsp;하는&nbsp;helper&nbsp;함수.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>trampoline</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"variable parameter function js\\\"><span>fn</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>fn&nbsp;</span><span class=\\\"keyword operator logical js\\\"><span>&amp;&amp;</span></span><span>&nbsp;fn&nbsp;</span><span class=\\\"keyword operator instanceof js\\\"><span>instanceof</span></span><span>&nbsp;</span><span class=\\\"support class js\\\"><span>Function</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>continue&nbsp;if&nbsp;fn&nbsp;is&nbsp;not&nbsp;undefined/null&nbsp;and&nbsp;if&nbsp;it&nbsp;is&nbsp;still&nbsp;a</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;fn&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fn</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>we&nbsp;call&nbsp;the&nbsp;function&nbsp;and&nbsp;assign&nbsp;the&nbsp;result&nbsp;of&nbsp;called&nbsp;previous&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>to&nbsp;new&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;fn</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>when&nbsp;we&nbsp;are&nbsp;done&nbsp;return&nbsp;fn&nbsp;when&nbsp;fn&nbsp;is&nbsp;the&nbsp;result&nbsp;and&nbsp;no&nbsp;longer</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;구현..</span></span></span></div></pre>\\n<p>마지막으로 할 수 있는 방법은 이 재귀 적인 로직을 iteration 로직으로 바꾸는 방법이다.</p>\\n<p>우선 stack 에 처음 해당 데이터를 넣는다. shift 로 첫번째 요소를 제거하고 반환시킨다.\\n그럼 처음에는 root 가 나올것이다. root 를 result 결과에 넣어두고 child 가 존재하면 root 자리에 있었던 곳에 child 를 다 풀어서 stack 에 쌓아둔다. 그리고 다시 stack 에서 가장 첫번째껄 확인한다.</p>\\n<p>만약 아래와 같은 간단한 구조였다면</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>data</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\tid</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>us</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\tchild</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>kor</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;child</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>ab</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>cd</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>jp</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t</span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;stack의&nbsp;움직임</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;1.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span>data</span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;data를&nbsp;result에&nbsp;넣어두고&nbsp;data있었던&nbsp;자리에&nbsp;child를&nbsp;풀어서&nbsp;다시&nbsp;스택에&nbsp;넣는다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>kor</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"keyword operator spread js\\\"><span>...</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>jp</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"keyword operator spread js\\\"><span>...</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;2.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;첫번째&nbsp;데이터(id:&#39;kor&#39;)를&nbsp;빼내어서&nbsp;다시&nbsp;result에&nbsp;넣어두고&nbsp;child가&nbsp;있기에&nbsp;다시&nbsp;풀어서&nbsp;stack에&nbsp;넣는다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>ab</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>cd</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>jp</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter method period js\\\"><span>.</span><span>.</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;지금까지의&nbsp;result는</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>us</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>kor</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;이렇게&nbsp;해서&nbsp;순서대로&nbsp;flat하게&nbsp;만들&nbsp;수&nbsp;있다.</span></span></span></div></pre>\\n<p>&#x3C; iteration 로직 ></p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;중첩된&nbsp;데이타를&nbsp;재귀를&nbsp;피하고&nbsp;iteration&nbsp;logic으로&nbsp;풀어서&nbsp;함.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>getFlatDataListFromNestedData</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"variable parameter function js\\\"><span>nestedData</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>stack</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span>nestedData</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;add&nbsp;the&nbsp;initial&nbsp;tree&nbsp;to&nbsp;the&nbsp;stack</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>result</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;initialize&nbsp;the&nbsp;result&nbsp;accumulator</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>stack</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"support variable property js\\\"><span>length</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>currentTree</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>stack</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>shift</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;첫번째&nbsp;요소&nbsp;제거&nbsp;후&nbsp;반환</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>currentTree</span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>result</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>push</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>currentTree</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;첫번째&nbsp;요소가&nbsp;존재하면&nbsp;push</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>currentTree</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other object js\\\"><span>stack</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>unshift</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"keyword operator spread js\\\"><span>...</span></span><span class=\\\"variable other object js\\\"><span>currentTree</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;해당&nbsp;첫번째&nbsp;요소에&nbsp;child가&nbsp;존재하면&nbsp;그&nbsp;첫번째&nbsp;요소&nbsp;자리에&nbsp;child으로&nbsp;다시&nbsp;매꾼다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>getFlatDataListFromNestedDataList</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>rootTreeDataList</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>rootTreeDataList</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"entity name function js\\\"><span>flatMap</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>getFlatDataListFromNestedData</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<h2>참고</h2>\\n<p><a href=\\\"https://medium.com/@cukejianya/functional-js-trampolines-tails-88723b4da320\\\">https://medium.com/@cukejianya/functional-js-trampolines-tails-88723b4da320</a>\\n<a href=\\\"https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/\\\">https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/</a>\\n<a href=\\\"https://www.datchley.name/recursion-tail-calls-and-trampolines/\\\">https://www.datchley.name/recursion-tail-calls-and-trampolines/</a>\\n<a href=\\\"https://marmelab.com/blog/2018/02/12/understanding-recursion.html\\\">https://marmelab.com/blog/2018/02/12/understanding-recursion.html</a></p>\",\"frontmatter\":{\"title\":\"꼬리 재귀\",\"date\":\"May 16, 2019\"}}},\"pathContext\":{\"slug\":\"/tail-recursion/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tail-recursion-112d6f6c158ce2ab06a7.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/tail-recursion/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>자바스크립트는 재귀 깊이가 너무 깊어지면 오류가 발생한다. 호출 스택을 펼쳐서 재귀 호출을 루프처럼 펼쳐주는 기법을 사용하면 이런 오류를 막을 수 있다.</p>\\n<p>컴파일러는 <em>꼬리 재귀(tail recursion)</em> 이라는 특별한 형태의 재귀 호출을 스택 깊이를 키우지 않고 처리하도록 최적화해줄 수 있다.\\n컴파일러가 최적화를 제공하지 않으면 <em>트램폴린(trampoline)</em> 과 <em>스트림(stream)</em> 등의 기법을 사용해 재귀를 수동으로 최적화할 수 있고, 스택이나 리스트 등의 데이터 구조와 함께 재귀를 루프로 바꾸는 일반적인 규칙을 활용하면 재귀를 기계적으로 루프로 바꿀 수 있다.</p>\\n<blockquote>\\n<p>여기서 stack 이란 ? 함수를 호출한 후에 원래 자리로 돌아오려면, 원래 자리를 어딘가에 저장해둬야 하는데, 그 어딘가가 바로 Stack 이다.</p>\\n</blockquote>\\n<p>피보나치 수열과 단순한 합을 구하는 재귀함수에서 문제는 두가지 이다.</p>\\n<ol>\\n<li>피보나치 수열은 재귀 호출을 두겹으로 호출하기 때문에 함수 호출 횟수가 많다.</li>\\n<li>단순한 합을 구하는 재귀함수에서는 stack 의 깊이가 너무 깊어진다.</li>\\n</ol>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;단순&nbsp;합을&nbsp;재귀로&nbsp;해결한&nbsp;예제.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>sum</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>sum</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>첫번 째 문제는 한겹으로 재귀를 호출 할 수 있다면 함수 호출을 줄일 수 있을 것이다.\\n두번 째 문제의 해결책은 두가지가 있을 수 있는데 다음과 같다.</p>\\n<ul>\\n<li>stack 을 쓰지 말자. 즉, 함수 호출을 하지말자.</li>\\n<li>stack 을 쓰되 누적해서 쓰지말고 있는걸 재활용하자.</li>\\n</ul>\\n<p>피보나치 수열에서 해결은 <em>반복 단계별 계산 결과를 반복이 끝날 때까지 어떤 변수(여기서는 previousFibo)에 계속 저장한다.</em> 방식으로 해결이 된다.\\n피보나치 수열을 재귀가 아닌 반복문을 이용해서 풀어보자. 바로 해결이 될 것이다.</p>\\n<p>프로그램이 stack 을 쓰는 이유는 함수 실행 후 돌아갈 원래 자리를 stack 에 저장을 하기 때문이다.\\n그렇다면 왜 원래 자리로 돌아가는가??</p>\\n<p>바로 <em>원래 자리에서 해야 할 일이 남아있기 때문이다.</em>\\n바꿔 말하면, <em>원래 자리에서 해야할 일이 남아있지 않다면 돌아갈 원래 자리를 Stack 에 추가로 저장할 필요가 없다.</em></p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>fibonacci</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacci</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacci</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p><code>fibonacci(n - 1)</code>를 호출한 후에 바로 리턴하는 것이 아니라 다시 한 번 <code>fibonacci(n - 2)</code>를 실행해서 두 값을 더한 후에 리턴한다. 다시 말해, 원래 자리로 돌아와서 해야할 일이 남아있으므로 돌아올 원래 자리의 정보를 Stack 에 추가해서 저장해야 한다.</p>\\n<p>그렇다면 원래 자리에서 해야할 일을 남겨두지 않는 방법은 무엇인가? 그 방법이 바로 Tail Call(꼬리 호출)이다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>a</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;v&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>0</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>b</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>v</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>b</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>a</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div></pre>\\n<p><em>Tail Call 은 함수를 호출해서 값을 반환 받은 후 아무 일도 하지 않고 바로 반환하게 하기 위해 논리적으로 가장 마지막(꼬리) 위치에서 함수를 호출하는 방식을 말한다.</em>\\n<em>Tail Call 방식을 적용하려면 두 겹인 재귀 호출을 한 겹으로 줄여야만 한다.</em></p>\\n<p>즉, 반환 받은 후 아무일도 하지 않게끔 하는 Tail Call 방식으로 짜는 것까지는 프로그래머가 할 수 있는 일이지만, Tail Call 방식으로 짰다고 해도 그런 코드를 돌리는 실행 환경에서는 내부적으로 여전히 Stack 을 새로 만들어 추가하는 비효율적인 방식으로 동작할 수도 있다.</p>\\n<blockquote>\\n<p>tail Call 방식으로 짜여지면 Stack 을 새로 만들지 않고 이미 있는 Stack 속의 값만 대체해서 Stack 을 재사용하는 방식으로 동작하도록 최적화 할 수 있다. 이러한 최적화를 Tail Call Optimization(또는 Tail Call Elimination)이라고 하며 언어의 실행 환경에서 지원해줘야 한다.</p>\\n</blockquote>\\n<p>Tail Recursion 의 경우에는 <em>Tail Call 의 특별한 경우로서 Tail Call 로 호출하는 함수가 자기 자신인 경우</em>에 해당한다.\\n이제 Tail Recursion 으로 fibonacci 수를 구하는 코드를 짜보자. 앞에서 재귀 호출 방식을 반복 방식으로 바꾸는 작업을 직접 해봤다면 크게 어렵지 않을 것이다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>fibonacciTailRecursion</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousFibo</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousPreviousFibo</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;currentFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;previousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;이번&nbsp;호출의&nbsp;피보나치&nbsp;수를&nbsp;구하고</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;currentFibo&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;previousFibo&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;previousPreviousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;다음번&nbsp;재귀&nbsp;호출을&nbsp;위해&nbsp;앞의&nbsp;피보나치&nbsp;수를&nbsp;앞의앞의&nbsp;피보나치&nbsp;수로&nbsp;한&nbsp;칸&nbsp;미루고</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;previousPreviousFibo&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;previousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;다음번&nbsp;재귀&nbsp;호출을&nbsp;위해&nbsp;현재의&nbsp;피보나치&nbsp;수를&nbsp;앞의&nbsp;피보나치&nbsp;수로&nbsp;한&nbsp;칸&nbsp;미룬다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;previousFibo&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;currentFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacciRecursion</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;previousFibo</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;previousPreviousFibo</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>fibonacciTailRecursion</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousFibo</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>previousPreviousFibo</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>2</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;previousFibo</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fibonacciTailRecursion</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;previousFibo&nbsp;</span><span class=\\\"keyword operator js\\\"><span>+</span></span><span>&nbsp;previousPreviousFibo</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;previousFibo</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>재귀 호출을 반복이나 Tail Recursion 방식으로 구현하려면 다음의 사항을 꼭 기억하자.\\n반복이나 꼬리 호출 단계별 계산 결과를 어딘가에 계속 저장한다.</p>\\n<p>반복 방식에서는 previousFibo 이 반복문 외부에서 선언되었고, Tail Recursion 방식에서는 previousFibo 이 함수의 파라미터로 사용된다는 점만 다를 뿐, 반복이나 꼬리 호출 단계별 계산 결과를 어딘가에 저장해둔다는 점은 똑같다.</p>\\n<p>인터프리터 / 컴파일러는 호출 스택에서 과거 함수 호출을 제거하여 재귀를 최적화합니다. 하지만 자바 스크립트에서 꼬리 재귀는 인식되지 않고 여전히 호출 스택에 배치가 되는 문제점을 가지고 있다.</p>\\n<h2>Trampoline</h2>\\n<p>일반적인 Tail Recursion 에서는 tail position 에서 함수 스스로를 계속 호출을 하고 그 결과를 바로 다시 자기 자신 함수의 결과로 넘겨서 호출하곤 했었다.\\n이때 컴파일러가 tail positon 호출을 위한 optimizations 이 안되어 있다면 스택은 계속 쌓여만 간다.</p>\\n<p>Tail Recursion 으로 짠 factorial</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>factorial</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;</span><span class=\\\"meta function js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"storage type function js\\\"><span>function</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>result</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>===</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>result&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;n</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n&nbsp;</span><span class=\\\"keyword operator js\\\"><span>-</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;So&nbsp;factorial(4)&nbsp;=&nbsp;recur(1,&nbsp;4)&nbsp;=&nbsp;recur(4&nbsp;*&nbsp;1,&nbsp;3)&nbsp;=&nbsp;recur(4&nbsp;*&nbsp;3,&nbsp;3)&nbsp;=&nbsp;recur(12&nbsp;*&nbsp;2,&nbsp;2)&nbsp;=&nbsp;recur(24&nbsp;*&nbsp;1,&nbsp;1)&nbsp;=&nbsp;24.</span></span></span></div></pre>\\n<p>위 코드에서 <code>factorial(100000000)</code> 실행시키면 Maximum call stack size exceeded 에러가 발생한다.</p>\\n<p>그래서 한가지 방법중에 하나가 trampoline 이라고 불리는 패턴이다.\\n만약 위에서 말한 계속 호출하는 방식이 아닌 호출할 함수를 리턴해준다면, 우리는 tramploine 을 사용해서 계속적으로 실행할 수 있다.</p>\\n<p>trampoline 자바스크립트에서 tail recursion 을 실행시켜주는 helper function 이다.\\n보통 다른 문서들에서 thunk 와 tramploining 이란 단어를 들어 봤을 것이다.\\n<code>thunk</code>는 아직 호출되지 않는 함수를 말한다. 즉, 다른 함수에 대한 호출을 래핑하는 함수이다. 간단하게는 currying 과 binding 에서 이런 기능을 볼 수 있다.\\n<code>trampoline function</code>에 thunk 를 전달을 하면 bound function 이 나오고, 해당 인자 값과 함께 while-loop 를 통해서 bound function 이 더 이상 함수가 아닐때 까지 그것의 recursive function 을 호출한다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>trampoline</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>fn</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>fn&nbsp;</span><span class=\\\"keyword operator logical js\\\"><span>&amp;&amp;</span></span><span>&nbsp;fn&nbsp;</span><span class=\\\"keyword operator instanceof js\\\"><span>instanceof</span></span><span>&nbsp;</span><span class=\\\"support class js\\\"><span>Function</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>continue&nbsp;if&nbsp;fn&nbsp;is&nbsp;not&nbsp;undefined/null&nbsp;and&nbsp;if&nbsp;it&nbsp;is&nbsp;still&nbsp;a</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;fn&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fn</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;recur.bind(null,1*4,3)&nbsp;을&nbsp;실행..&nbsp;이&nbsp;함수도&nbsp;thunk&nbsp;함수이다.&nbsp;함수&nbsp;호출&nbsp;이후에&nbsp;함수를&nbsp;리턴함으로</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>we&nbsp;call&nbsp;the&nbsp;function&nbsp;and&nbsp;assign&nbsp;the&nbsp;result&nbsp;of&nbsp;called&nbsp;previous&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>to&nbsp;new&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;fn</span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>when&nbsp;we&nbsp;are&nbsp;done&nbsp;return&nbsp;fn&nbsp;when&nbsp;fn&nbsp;is&nbsp;the&nbsp;result&nbsp;and&nbsp;no&nbsp;longer</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>factorial</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type var js\\\"><span>var</span></span><span>&nbsp;</span><span class=\\\"meta function js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"storage type function js\\\"><span>function</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>result</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter function js\\\"><span>n</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>n&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>===</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>recur</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"entity name function js\\\"><span>bind</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant language null js\\\"><span>null</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;result&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;n</span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n&nbsp;—&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>trampoline</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>recur</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;n</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation terminator statement js\\\"><span>;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>위 예에서 <code>factorical(4)</code> 를 호출한다고 가정을 해보고 호출을 따라가보자.\\n여기서 위에서 설명한 <code>thunk 함수</code>는 <code>recur 함수</code>이다.\\n<code>recur(1,n)</code> 을 trampoline 함수에 인자로 넘겼을 때, <code>recur(1,4)</code> 를 호출 후에 우리는 사실 <code>recur.bind(null,1*4,3)</code> 을 넘기게 됩니다.\\nwhile 반복문은 recur 가 undefined/null 이지 않고, 함수인지를 체크한다. 여기서 recur 이 bounded 되고 나서도 recur 함수는 Function object 의 인스턴스로 여전히 남아있게 된다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"entity name type object console js\\\"><span>console</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function console js\\\"><span>log</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>recur</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"entity name function js\\\"><span>bind</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"constant language null js\\\"><span>null</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>1</span></span><span>&nbsp;</span><span class=\\\"keyword operator js\\\"><span>*</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>4</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>3</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;[Function:&nbsp;bound&nbsp;recur]</span></span></span></div></pre>\\n<p>루프에 2 가지 상태를 확인한 후에 fn 을 호출한다. 그리곤 그것의 결과를 다시 fn 에 할당한다.\\n그러면 fn 은 <code>recur.bind(null,4*3,2)</code> 가 된다. 이 루프는 <code>recur.bind(null,12*2,1)</code> 이 될때까지 동작하게 된다. 그리곤 24 를 리턴한다. 여기서 24 값은 undefined/null 이 아니다, 그래서 while 루프 상태값에서 통과가 되지만 24 값은 function 이 아니기에 while 루프가 중지된다. trampoline 함수는 결국 24 인 fn 을 반환하게 된다.</p>\\n<p>이 과정에서 우리는 함수 호출을 쌓을 필요가 없습니다. 각 함수가 호출되어 바운드 함수를 반환 한 다음 호출 스택에서 제거됩니다. 그런 다음 trampoline 의 while 루프를 사용하여 바운드 함수를 호출하여 각 재귀 적 단계로 건너 뛰게 됩니다.</p>\\n<p>while 문을 돌면서 fn 이 함수가 아닌 값으로 떨어질때까지 호출하고 리턴하고를 반복한다. fn 을 만들때에는 해당 조건이 완성되지 않았을 때는 계속 함수를 리턴하도록 해준다.</p>\\n<p>결과적으로 같이 <code>factorial(100000000)</code>을 실행할 경우에 call stack 에러가 뜨지 않는다.</p>\\n<h2>예시</h2>\\n<p>트리 구조로 되어있는 것을 flat 하게 만들자.</p>\\n<p>예시</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>tree</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>root</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>subtree1</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child1</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child2</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child3</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>subtree2</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child1</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child4</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child5</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>&nbsp;name</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>child6</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div></pre>\\n<p>맨 처음에는 재귀 함수를 사용했었다.</p>\\n<p>재귀 함수가 퍼포먼스 측면에서 느린건 잘 모르겠으나 자바스크립트에서 stack 이 overflow 날 위험이 있다.\\n브라우저 쪽에서 tail call optimization 을 지원한다면 stack 이 과다하게 차지 않아도 될듯 싶은데 아직은 그런 기능이 없는거 같다.</p>\\n<p>&#x3C; 처음 짠 재귀 함수 ></p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>makeFlatTreeStructureData</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>treeData</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>result</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function js\\\"><span class=\\\"storage type function js\\\"><span>function</span></span><span>&nbsp;</span><span class=\\\"entity name function js\\\"><span>insertItem</span></span><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>root</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other object js\\\"><span>root</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function dom js\\\"><span>forEach</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"variable parameter function js\\\"><span>item</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>item</span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other object js\\\"><span>result</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>push</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>item</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>item</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span>&nbsp;</span><span class=\\\"keyword operator logical js\\\"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>item</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other object property js\\\"><span>child</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"support variable property js\\\"><span>length</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison js\\\"><span>&gt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal js\\\"><span>0</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>insertItem</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>item</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"meta method-call js\\\"><span class=\\\"meta arguments js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>insertItem</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>treeData</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<p>여기서 stack 이 overflow 나지 않게 트릭을 하나 쓸수 있는데 바로 trampoline 패턴이다.\\n근데 이 trampoline 패턴의 방식은 큰 약점이 있는데 그것은 느리다는 것이다.</p>\\n<p>각 재귀 마다 새로운 함수를 만들어내고 많은 재귀는 당연히 많은 함수를 만든다는 것이다.\\n그래서 이방식은 오류를 방지할 순 있지만 느리다는게 최대 단점이다.</p>\\n<p>참조: <a href=\\\"https://marmelab.com/blog/2018/02/12/understanding-recursion.html\\\">https://marmelab.com/blog/2018/02/12/understanding-recursion.html</a></p>\\n<p>참고로 아직 trampoline 방식으로 구현을 어떻게 해야할지 구현을 못해봤다. ( 5 월 16 일 )</p>\\n<p>구현을 따로 해봐야 할 꺼 같다.</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;trampoline&nbsp;방식</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;재귀&nbsp;함수를&nbsp;스택을&nbsp;늘리지&nbsp;않고&nbsp;호출&nbsp;할&nbsp;수&nbsp;있게끔&nbsp;하는&nbsp;helper&nbsp;함수.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>trampoline</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"variable parameter function js\\\"><span>fn</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>fn&nbsp;</span><span class=\\\"keyword operator logical js\\\"><span>&amp;&amp;</span></span><span>&nbsp;fn&nbsp;</span><span class=\\\"keyword operator instanceof js\\\"><span>instanceof</span></span><span>&nbsp;</span><span class=\\\"support class js\\\"><span>Function</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>continue&nbsp;if&nbsp;fn&nbsp;is&nbsp;not&nbsp;undefined/null&nbsp;and&nbsp;if&nbsp;it&nbsp;is&nbsp;still&nbsp;a</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;fn&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call js\\\"><span class=\\\"entity name function js\\\"><span>fn</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>we&nbsp;call&nbsp;the&nbsp;function&nbsp;and&nbsp;assign&nbsp;the&nbsp;result&nbsp;of&nbsp;called&nbsp;previous&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>to&nbsp;new&nbsp;fn</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;fn</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>when&nbsp;we&nbsp;are&nbsp;done&nbsp;return&nbsp;fn&nbsp;when&nbsp;fn&nbsp;is&nbsp;the&nbsp;result&nbsp;and&nbsp;no&nbsp;longer</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>function.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;구현..</span></span></span></div></pre>\\n<p>마지막으로 할 수 있는 방법은 이 재귀 적인 로직을 iteration 로직으로 바꾸는 방법이다.</p>\\n<p>우선 stack 에 처음 해당 데이터를 넣는다. shift 로 첫번째 요소를 제거하고 반환시킨다.\\n그럼 처음에는 root 가 나올것이다. root 를 result 결과에 넣어두고 child 가 존재하면 root 자리에 있었던 곳에 child 를 다 풀어서 stack 에 쌓아둔다. 그리고 다시 stack 에서 가장 첫번째껄 확인한다.</p>\\n<p>만약 아래와 같은 간단한 구조였다면</p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>data</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\tid</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>us</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\tchild</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>kor</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;child</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"meta brace square js\\\"><span>[</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>ab</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>cd</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t\\t</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>jp</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;\\t</span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;stack의&nbsp;움직임</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;1.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span>data</span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;data를&nbsp;result에&nbsp;넣어두고&nbsp;data있었던&nbsp;자리에&nbsp;child를&nbsp;풀어서&nbsp;다시&nbsp;스택에&nbsp;넣는다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>kor</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"keyword operator spread js\\\"><span>...</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>jp</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"keyword operator spread js\\\"><span>...</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;2.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;첫번째&nbsp;데이터(id:&#39;kor&#39;)를&nbsp;빼내어서&nbsp;다시&nbsp;result에&nbsp;넣어두고&nbsp;child가&nbsp;있기에&nbsp;다시&nbsp;풀어서&nbsp;stack에&nbsp;넣는다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>ab</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>cd</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>jp</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta delimiter method period js\\\"><span>.</span><span>.</span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;지금까지의&nbsp;result는</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>us</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta delimiter object comma js\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span><span>id</span><span class=\\\"keyword operator assignment js\\\"><span>:</span></span><span class=\\\"string quoted single js\\\"><span class=\\\"punctuation definition string begin js\\\"><span>&#39;</span></span><span>kor</span><span class=\\\"punctuation definition string end js\\\"><span>&#39;</span></span></span><span class=\\\"meta brace curly js\\\"><span>}</span></span><span class=\\\"meta brace square js\\\"><span>]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;이렇게&nbsp;해서&nbsp;순서대로&nbsp;flat하게&nbsp;만들&nbsp;수&nbsp;있다.</span></span></span></div></pre>\\n<p>&#x3C; iteration 로직 ></p>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;중첩된&nbsp;데이타를&nbsp;재귀를&nbsp;피하고&nbsp;iteration&nbsp;logic으로&nbsp;풀어서&nbsp;함.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>getFlatDataListFromNestedData</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"variable parameter function js\\\"><span>nestedData</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>stack</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span></span><span>nestedData</span><span class=\\\"meta brace square js\\\"><span>]</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;add&nbsp;the&nbsp;initial&nbsp;tree&nbsp;to&nbsp;the&nbsp;stack</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>result</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;initialize&nbsp;the&nbsp;result&nbsp;accumulator</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>stack</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"support variable property js\\\"><span>length</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>currentTree</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>stack</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>shift</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;첫번째&nbsp;요소&nbsp;제거&nbsp;후&nbsp;반환</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span>currentTree</span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>result</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>push</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>currentTree</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;첫번째&nbsp;요소가&nbsp;존재하면&nbsp;push</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round js\\\"><span>(</span></span><span class=\\\"variable other object js\\\"><span>currentTree</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span class=\\\"meta brace round js\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other object js\\\"><span>stack</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"support function js\\\"><span>unshift</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span class=\\\"keyword operator spread js\\\"><span>...</span></span><span class=\\\"variable other object js\\\"><span>currentTree</span></span><span class=\\\"meta delimiter property period js\\\"><span>.</span></span><span class=\\\"variable other property js\\\"><span>child</span></span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\\\"comment line double-slash js\\\"><span class=\\\"punctuation definition comment js\\\"><span>//</span></span><span>&nbsp;해당&nbsp;첫번째&nbsp;요소에&nbsp;child가&nbsp;존재하면&nbsp;그&nbsp;첫번째&nbsp;요소&nbsp;자리에&nbsp;child으로&nbsp;다시&nbsp;매꾼다.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta brace curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;result</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"storage type const js\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"constant other js\\\"><span>getFlatDataListFromNestedDataList</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function arrow js\\\"><span class=\\\"meta parameters js\\\"><span class=\\\"punctuation definition parameters begin bracket round js\\\"><span>(</span></span><span class=\\\"variable parameter function js\\\"><span>rootTreeDataList</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment js\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta brace square js\\\"><span>[</span><span>]</span></span><span class=\\\"punctuation definition parameters end bracket round js\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow js\\\"><span>=&gt;</span></span></span><span>&nbsp;</span><span class=\\\"punctuation definition function body begin bracket curly js\\\"><span>{</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control js\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other object js\\\"><span>rootTreeDataList</span></span><span class=\\\"meta method-call js\\\"><span class=\\\"meta delimiter method period js\\\"><span>.</span></span><span class=\\\"entity name function js\\\"><span>flatMap</span></span><span class=\\\"meta arguments js\\\"><span class=\\\"punctuation definition arguments begin bracket round js\\\"><span>(</span></span><span>getFlatDataListFromNestedData</span><span class=\\\"punctuation definition arguments end bracket round js\\\"><span>)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source js\\\"><span class=\\\"punctuation definition function body end bracket curly js\\\"><span>}</span></span></span></div></pre>\\n<h2>참고</h2>\\n<p><a href=\\\"https://medium.com/@cukejianya/functional-js-trampolines-tails-88723b4da320\\\">https://medium.com/@cukejianya/functional-js-trampolines-tails-88723b4da320</a>\\n<a href=\\\"https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/\\\">https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/</a>\\n<a href=\\\"https://www.datchley.name/recursion-tail-calls-and-trampolines/\\\">https://www.datchley.name/recursion-tail-calls-and-trampolines/</a>\\n<a href=\\\"https://marmelab.com/blog/2018/02/12/understanding-recursion.html\\\">https://marmelab.com/blog/2018/02/12/understanding-recursion.html</a></p>\",\"frontmatter\":{\"title\":\"꼬리 재귀\",\"date\":\"May 16, 2019\"}}},\"pathContext\":{\"slug\":\"/tail-recursion/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tail-recursion.json\n// module id = 519\n// module chunks = 246346007348531"],"sourceRoot":""}