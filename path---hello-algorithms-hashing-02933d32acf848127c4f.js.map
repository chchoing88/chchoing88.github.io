{"version":3,"sources":["webpack:///path---hello-algorithms-hashing-02933d32acf848127c4f.js","webpack:///./.cache/json/hello-algorithms-hashing.json"],"names":["webpackJsonp","495","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,cAAgDC,gBAAmBC,GAAA,oIAAAC,KAAA,sm7BAAks9BC,aAA2EL,MAAA,0BAAAM,KAAA,oBAA4DC,aAAgBC,KAAA","file":"path---hello-algorithms-hashing-02933d32acf848127c4f.js","sourcesContent":["webpackJsonp([147969846384348],{\n\n/***/ 495:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/hashing.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>해싱 개요</h2>\\n<ul>\\n<li>해싱은 데이터를 단시간에 삽입하거나 저장된 데이터를 가져올 때 주로 사용하는 기법이다.</li>\\n<li>해싱은 해시 테이블이라는 자료 구조를 이용한다.</li>\\n<li>해싱을 이용하면 데이터를 빠르게 삽입하고, 삭제하고, 가져올 수 있지만, 최솟값이나 최댓값 찾기 등 검색 동작은 효율이 떨어진다.</li>\\n<li>검색이 필요한 상황이라면 이진 탐색 트리 같은 자료구조를 사용하는 것이 좋다.</li>\\n<li>해시 테이블 자료구조는 배열을 이용한다.</li>\\n<li>키(key)라 불리는 데이터 요소로 배열에 저장된 데이터 요소를 참조할 수 있다.</li>\\n<li>해시 함수는 각 키를 자체 배열 요소로 저장한다. 되도록 키가 한 곳에 집중되지 않도록 저장하는 것이 좋다.</li>\\n<li>해시 함수에서는 두 키의 해시 결과(해시 함수 수행 결과)가 같은 값일 때도 있다. 이를 충돌(collision) 이라 한다.</li>\\n<li>해시 테이블에 사용할 배열의 크기는 소수(prime number) 여야 한다.</li>\\n</ul>\\n<h2>해시 테이블 클래스</h2>\\n<h3>심플 해싱</h3>\\n<ul>\\n<li>\\n<p>정수키를 가진 해시 테이블이라면 배열의 크기로 나눈 나머지를 반환(모듈로:modulo 연산)하는 해시 함수를 이용할 수 있다. 이때, 키가 모두 0으로 끝나며 배열의 크기가 10인 상황(320 % 10)에서는 이런 간단한 해시 함수를 사용할 수 없다. 따라서 배열의 길이는 소수로 만들어 주는 것이 유리하다.</p>\\n</li>\\n<li>\\n<p>해싱 결과 값이 항상 테이블 범위 안에 있게 하기 위해선 다음과 같이 모듈로 연산을 해야 한다. (n % table.length)</p>\\n</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"storage type class ts\\\"><span>class</span></span><span>&nbsp;</span><span class=\\\"entity name type class ts\\\"><span>HashTable</span></span><span>&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>table</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>string</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"storage type ts\\\"><span>constructor</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>table</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"new expr ts\\\"><span class=\\\"keyword operator new ts\\\"><span>new</span></span><span>&nbsp;</span><span class=\\\"entity name type ts\\\"><span>Array</span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>137</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>simpleHash</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>data</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>string</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;각&nbsp;문자의&nbsp;아스키&nbsp;값의&nbsp;합을&nbsp;얻어&nbsp;해시&nbsp;값을&nbsp;계산한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>data</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>split</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>reduce</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>acc</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>char</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>acc</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>char</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>charCodeAt</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Hash&nbsp;value:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>data</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>total</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;계산&nbsp;결과가&nbsp;항상&nbsp;해당&nbsp;테이블&nbsp;범위&nbsp;안에&nbsp;있게&nbsp;하기&nbsp;위해&nbsp;모듈러&nbsp;연산을&nbsp;사용한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>%</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>table</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;배열에&nbsp;실제로&nbsp;저장된&nbsp;이름을&nbsp;출력한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>showDistro</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>table</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>filter</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"variable parameter ts\\\"><span>data</span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"keyword operator logical ts\\\"><span>!</span><span>!</span></span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>data</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>index</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>index</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>data</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>put</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>data</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>string</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>pos</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>simpleHash</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>table</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>pos</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>get</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>호너의 메소드 해시 함수</h3>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;호너의&nbsp;메서드&nbsp;알고리즘을&nbsp;사용해서&nbsp;충돌이&nbsp;안나게끔&nbsp;해싱&nbsp;함수를&nbsp;만들자.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>betterHash</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>string</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other constant ts\\\"><span>H</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>37</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>data</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>split</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>reduce</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>acc</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>char</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other constant ts\\\"><span>H</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>*</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>acc</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>char</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>charCodeAt</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Hash&nbsp;value:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>data</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>total</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>hashKey</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>%</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>table</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>hashKey</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>정수 키 해싱</h3>\",\"frontmatter\":{\"title\":\"algorithm Hashing (ing)\",\"date\":\"March 30, 2020\"}}},\"pathContext\":{\"slug\":\"/hello-algorithms/hashing/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---hello-algorithms-hashing-02933d32acf848127c4f.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/hashing.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>해싱 개요</h2>\\n<ul>\\n<li>해싱은 데이터를 단시간에 삽입하거나 저장된 데이터를 가져올 때 주로 사용하는 기법이다.</li>\\n<li>해싱은 해시 테이블이라는 자료 구조를 이용한다.</li>\\n<li>해싱을 이용하면 데이터를 빠르게 삽입하고, 삭제하고, 가져올 수 있지만, 최솟값이나 최댓값 찾기 등 검색 동작은 효율이 떨어진다.</li>\\n<li>검색이 필요한 상황이라면 이진 탐색 트리 같은 자료구조를 사용하는 것이 좋다.</li>\\n<li>해시 테이블 자료구조는 배열을 이용한다.</li>\\n<li>키(key)라 불리는 데이터 요소로 배열에 저장된 데이터 요소를 참조할 수 있다.</li>\\n<li>해시 함수는 각 키를 자체 배열 요소로 저장한다. 되도록 키가 한 곳에 집중되지 않도록 저장하는 것이 좋다.</li>\\n<li>해시 함수에서는 두 키의 해시 결과(해시 함수 수행 결과)가 같은 값일 때도 있다. 이를 충돌(collision) 이라 한다.</li>\\n<li>해시 테이블에 사용할 배열의 크기는 소수(prime number) 여야 한다.</li>\\n</ul>\\n<h2>해시 테이블 클래스</h2>\\n<h3>심플 해싱</h3>\\n<ul>\\n<li>\\n<p>정수키를 가진 해시 테이블이라면 배열의 크기로 나눈 나머지를 반환(모듈로:modulo 연산)하는 해시 함수를 이용할 수 있다. 이때, 키가 모두 0으로 끝나며 배열의 크기가 10인 상황(320 % 10)에서는 이런 간단한 해시 함수를 사용할 수 없다. 따라서 배열의 길이는 소수로 만들어 주는 것이 유리하다.</p>\\n</li>\\n<li>\\n<p>해싱 결과 값이 항상 테이블 범위 안에 있게 하기 위해선 다음과 같이 모듈로 연산을 해야 한다. (n % table.length)</p>\\n</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"storage type class ts\\\"><span>class</span></span><span>&nbsp;</span><span class=\\\"entity name type class ts\\\"><span>HashTable</span></span><span>&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>table</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>string</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"storage type ts\\\"><span>constructor</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>table</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"new expr ts\\\"><span class=\\\"keyword operator new ts\\\"><span>new</span></span><span>&nbsp;</span><span class=\\\"entity name type ts\\\"><span>Array</span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>137</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>simpleHash</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>data</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>string</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;각&nbsp;문자의&nbsp;아스키&nbsp;값의&nbsp;합을&nbsp;얻어&nbsp;해시&nbsp;값을&nbsp;계산한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>data</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>split</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>reduce</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>acc</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>char</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>acc</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>char</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>charCodeAt</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Hash&nbsp;value:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>data</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>total</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;계산&nbsp;결과가&nbsp;항상&nbsp;해당&nbsp;테이블&nbsp;범위&nbsp;안에&nbsp;있게&nbsp;하기&nbsp;위해&nbsp;모듈러&nbsp;연산을&nbsp;사용한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>%</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>table</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;배열에&nbsp;실제로&nbsp;저장된&nbsp;이름을&nbsp;출력한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>showDistro</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>table</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>filter</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"variable parameter ts\\\"><span>data</span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"keyword operator logical ts\\\"><span>!</span><span>!</span></span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>data</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>index</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>index</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>data</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>put</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>data</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>string</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>pos</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>simpleHash</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>table</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>pos</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>get</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>호너의 메소드 해시 함수</h3>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;호너의&nbsp;메서드&nbsp;알고리즘을&nbsp;사용해서&nbsp;충돌이&nbsp;안나게끔&nbsp;해싱&nbsp;함수를&nbsp;만들자.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>betterHash</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>data</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>string</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other constant ts\\\"><span>H</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>37</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>data</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>split</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>reduce</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>acc</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>char</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other constant ts\\\"><span>H</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>*</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>acc</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>+</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>char</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>charCodeAt</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta var expr ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Hash&nbsp;value:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>data</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>total</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>hashKey</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>total</span></span><span>&nbsp;</span><span class=\\\"keyword operator arithmetic ts\\\"><span>%</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>table</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>hashKey</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>정수 키 해싱</h3>\",\"frontmatter\":{\"title\":\"algorithm Hashing (ing)\",\"date\":\"March 30, 2020\"}}},\"pathContext\":{\"slug\":\"/hello-algorithms/hashing/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/hello-algorithms-hashing.json\n// module id = 495\n// module chunks = 147969846384348"],"sourceRoot":""}