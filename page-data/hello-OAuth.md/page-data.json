{"componentChunkName":"component---src-templates-post-tsx","path":"/hello-OAuth.md/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기</h2>\n<p>OAuth 2.0의 절차를 글로 정리해 두자.\n다음 글은 생활코딩 에서 알려주신 OAuth 2.0 을 정리한 것입니다.</p>\n<h2 id=\"역할\" style=\"position:relative;\"><a href=\"#%EC%97%AD%ED%95%A0\" aria-label=\"역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>역할</h2>\n<ul>\n<li>Resource Owner : User 사용자 - 우리의 서비스를 이용하는 사용자 및 구글,페이스북 등의 서비스도 함께 이용하는 사용자.</li>\n<li>Client : 우리의 서비스</li>\n<li>Resource Server(Authorization Server) : 우리의 서비스가 제어하고자 하는 자원, 우리의 서비스가 연동하려는 User의 서비스들 (ex. google, facebook)</li>\n</ul>\n<h2 id=\"resource-server-등록\" style=\"position:relative;\"><a href=\"#resource-server-%EB%93%B1%EB%A1%9D\" aria-label=\"resource server 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource Server 등록</h2>\n<ul>\n<li>Client는 Resource Server에 우리 Client를 등록하게 됩니다. 이때 service 이름과 redirect<em>url을 입력 후 등록을 하면 Resource Server는 client</em>id, client<em>secret, redirect</em>url을 알려줍니다.</li>\n</ul>\n<h2 id=\"access-token의-발급\" style=\"position:relative;\"><a href=\"#access-token%EC%9D%98-%EB%B0%9C%EA%B8%89\" aria-label=\"access token의 발급 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access Token의 발급</h2>\n<ol>\n<li>Resource Owner 는 Client 인 우리 서비스에 접속합니다. (이때, 우리 서비스는 Resource Server를 연동하는 서비스입니다.)\n사용자가 나의 서비스에 와서 글을 남겼다. -> 구글 캘린더에 표시를 하던가 페이스북에 \"글을 썼다\" 또는 \"글을 보았다\" 등을 공유</li>\n<li>Client 는 \"Login with Facebook, Login with Google\" 등의 버튼을 보여줍니다. 이때, Resource Server의 B,C 기능을 이용하겠다고 가정합니다. 이 버튼의 링크는 다음과 같습니다.\n<code class=\"language-text\">https://resource.server/?client_id=1&amp;scope=B,C&amp;redirect_url=http://slient/callback</code> 여기서 redirect_url은 Client 에서 미리 구축해두고 있어야 합니다.</li>\n<li>위 버튼을 눌러 Resource Server에 접속이 되면 Resource Server은 Resource Owner에게 로그인 하라는 페이지를 보여주게 됩니다.</li>\n<li>Resource Owner가 로그인을 하게 됩니다.</li>\n<li>Resource Server는 이제 아까 url의 쿼리스트링과 Resource Server가 보유한 client<em>id와 redirect</em>url이 같은지 비교합니다.</li>\n<li>같다면 다시 Resource Server는 Resource Owner 에게 해당 Client 서비스에게 B,C 기능을 열어주겠냐는 페이지를 보여줍니다.</li>\n<li>Resource Owner가 허용을 하게 되면 Resource Server는 authorization code(3 이라 칩시다)를 만들어 Resource Owner의 브라우저에게 다음과 같은 주소로 redirection 합니다.\n<code class=\"language-text\">https://client/callback?code=3</code></li>\n<li>Client에서 <code class=\"language-text\">code=3</code> 이라는 정보를 받게 되면 authorization code = 3 을 생성하게 됩니다.</li>\n<li>Client에서는 다음과 같은 url로 Resource Server에 Access Token 을 요청 하게 됩니다.\n<code class=\"language-text\">https://resource.server/token?grant_type=authorization_code&amp;code=3&amp;redirect_url=https://client/callback&amp;client_id=1&amp;client_secret=2</code></li>\n<li>Resource Server는 임시 비밀번호인 authorization code 와 client<em>id, client</em>secret, redirect<em>url을 확인해서 accesss</em>token을 만들어서 Client에 발급시켜 줍니다.</li>\n</ol>\n<h2 id=\"refresh-token의-발급\" style=\"position:relative;\"><a href=\"#refresh-token%EC%9D%98-%EB%B0%9C%EA%B8%89\" aria-label=\"refresh token의 발급 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refresh Token의 발급</h2>\n<ul>\n<li>access<em>token 에게는 수명이 있습니다. 이때 손쉽게 access</em>token을 다시 발급 받을 수 있는 방법이 refresh_token 입니다.</li>\n<li>보통은 access<em>token을 발급할때, refresh</em>token을 발급해 줍니다.</li>\n<li>수명이 끝난 access_token으로 API를 호출하게 되면 invalid 한 응답을 주게 됩니다.</li>\n<li>access<em>token이 수명이 다하면 Authorization Server에 전달하면 access</em>token을 다시 발급해 주게 됩니다.</li>\n<li>예를 들어 구글의 경우에는 구글 API의 post 방식으로 <code class=\"language-text\">client_id</code>,<code class=\"language-text\">client_secret</code>,<code class=\"language-text\">refresh_token</code>,<code class=\"language-text\">grant_type=refresh_token</code> 정보를 넘겨주면 다시 access_token을 발급 해 주게 됩니다.</li>\n</ul>\n<h2 id=\"api-활용\" style=\"position:relative;\"><a href=\"#api-%ED%99%9C%EC%9A%A9\" aria-label=\"api 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 활용</h2>\n<ul>\n<li>쿼리 스트링 : &#x3C;API주소>/?access<em>token=&#x3C;access</em>token></li>\n<li>request header : Authorization: Bearer &#x3C;access_token></li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://www.youtube.com/playlist?list=PLuHgQVnccGMA4guyznDlykFJh28_R08Q-\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/playlist?list=PLuHgQVnccGMA4guyznDlykFJh28_R08Q-</a></p>","excerpt":"동기 OAuth 2.0의 절차를 글로 정리해 두자.\n다음 글은 생활코딩 에서 알려주신 OAuth 2.0 을 정리한 것입니다. 역할 Resource Owner : User…","tableOfContents":"<ul>\n<li><a href=\"/hello-OAuth.md/#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li><a href=\"/hello-OAuth.md/#%EC%97%AD%ED%95%A0\">역할</a></li>\n<li><a href=\"/hello-OAuth.md/#resource-server-%EB%93%B1%EB%A1%9D\">Resource Server 등록</a></li>\n<li><a href=\"/hello-OAuth.md/#access-token%EC%9D%98-%EB%B0%9C%EA%B8%89\">Access Token의 발급</a></li>\n<li><a href=\"/hello-OAuth.md/#refresh-token%EC%9D%98-%EB%B0%9C%EA%B8%89\">Refresh Token의 발급</a></li>\n<li><a href=\"/hello-OAuth.md/#api-%ED%99%9C%EC%9A%A9\">API 활용</a></li>\n<li><a href=\"/hello-OAuth.md/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/hello-OAuth.md/"},"frontmatter":{"title":"OAuth 2.0","date":"Mar 16, 2020","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/hello-OAuth.md/","series":[],"lastmod":"0001-01-01"}}}