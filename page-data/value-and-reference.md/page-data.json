{"componentChunkName":"component---src-templates-post-tsx","path":"/value-and-reference.md/","result":{"data":{"markdownRemark":{"html":"<p>자바스크립트는 메모리에 있는 데이터 구조의 전체 접근 권한을 주지 않는다.\n하지만 언어차원에서 reference types 는 존재한다.\nvalue 와 reference types 의 혼합은 원하지 않은 사이드 이펙트나 버그를 유발하기도 한다.\nvalue 와 reference types 를 이해는 강력한 프로그래밍을 작성하는데 중요한 역활을 한다.</p>\n<p>이 기사는 자바스크립트의 value 와 reference types 를 입문단계에서 소개한다.</p>\n<h3 id=\"value-and-reference-types\" style=\"position:relative;\"><a href=\"#value-and-reference-types\" aria-label=\"value and reference types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Value and Reference types</h3>\n<p>Numbers, booleans, strings, null and undefined 은 원시타입들이다. 모든 원시 타입들은 값에 의해 전달된다. Objects, arrays, and functions 들은 참조로 전달된다.</p>\n<p>Strings 은 자바스크립트에서 특별한 존재이다. 다른 많은 언어와 달리 string 은 character 의 배열처럼 정의 되지 않는다. 무엇보다 character 타입이 자바스크립트에는 존재하지 않는다. Strings 는 변화하지 않는 데이터 타입으로 문자 배열처럼 보이게 하는 인터페이스를 지니고 있다. 실제로 문자열을 수정하면 새로운 불변의 값이 생겨난다.</p>\n<p>다음 콘솔로그의 결과를 함께 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John Hill'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jack Chill'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">27</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getInitials</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Reusing the name argument makes little sense in general.</span>\n  <span class=\"token comment\">// We are making this assignment here for demonstrating</span>\n  <span class=\"token comment\">// the difference between value types and reference types.</span>\n  name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">increaseAge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">addPerson</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">people<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  people<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Part 1: getInitials</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInitials</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Part 2: increaseAge</span>\n<span class=\"token function\">increaseAge</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Part 3: addPerson</span>\n<span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">,</span> <span class=\"token string\">'Jim Gordon'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Question</strong>: 무엇이 콘솔에 기록이 될까?\n<strong>Answer</strong>:</p>\n<ul>\n<li>첫번째 파트에서 name 의 이니셜들은 <code class=\"language-text\">getInitials</code> 함수에 의해서 구성이 된다. 문자열 값은 함수에 복사 되서 전달됩니다. 이 복사된 값은 함수 안에서 접근되고 수정됩니다. 이 수정들은 원본 <code class=\"language-text\">people[0].name</code> 에 영향을 끼치지 않는다.</li>\n<li><code class=\"language-text\">increaseAge</code> 함수는 객체를 받는다. 이 객체들은 reference types 이기 때문에 <code class=\"language-text\">person</code>의 레퍼런스 값이 복사되어서 전달된다. 이 객체 레퍼런스의 멤버들을 수정할때, 이 변화들은 함수 실행 이후로도 유지된다. 이러한 변경 사항은 각 참조를 통해 액세스 할 수 있다.</li>\n<li>Arrays 들도 reference types 이다. array 에 element 를 추가하면 이 변화는 계속 지속이 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">JH</span>\n<span class=\"token constant\">JH</span>\nJohn Hill\n<span class=\"token number\">28</span>\n\n<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>  name  age\n<span class=\"token number\">0</span>  <span class=\"token string\">\"John Hill\"</span>  <span class=\"token number\">22</span>\n<span class=\"token number\">1</span>  <span class=\"token string\">\"Jack Chill\"</span>  <span class=\"token number\">28</span>\n<span class=\"token number\">2</span>  <span class=\"token string\">\"Jim Gordon\"</span>  <span class=\"token number\">32</span></code></pre></div>\n<p>정리:</p>\n<ul>\n<li><code class=\"language-text\">console.table</code>은 나이스한 로깅 유틸리티이다. 이것은 모던 브라우저에서 object 를 배열의 테이블 처럼 표시해준다.</li>\n</ul>\n<h3 id=\"실수-value-type-을-reference-type-으로-다루다\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98-value-type-%EC%9D%84-reference-type-%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EB%A3%A8%EB%8B%A4\" aria-label=\"실수 value type 을 reference type 으로 다루다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수: value type 을 reference type 으로 다루다.</h3>\n<p><code class=\"language-text\">increaseAge</code> 메서드를 잘못 사용하는 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">increaseAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  age <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Before:'</span><span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token function\">increaseAge</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'After:'</span><span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 <code class=\"language-text\">increaseAge</code>를 실행시켜도 나이는 22 로 유지된다. 원시 타입은 값으로 전달되기 때문이다. 복사된 값의 변화는 원본에 아무런 영향을 끼치지 않는다. 항상 변화되길 원한다면 array 나 object 로 원하는 필드를 감싸야 한다.</p>\n<p>다른 예는 person 을 다른 person 으로 변화시키려는 시도이다.\n<code class=\"language-text\">replacePerson</code> 함수는 3 가지의 매개변수를 받는다. person 을 새로운 name 과 age 를 가지고 변화시키는 로직이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replacePerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> age <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">replacePerson</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jack Newtown'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 함수는 person 매개변수에 새로운 값을 할당받았으므로 people 객체에 아무것도 하지 않는다. people 데이터 구조는 그대로 유지된다. 함수 안에 있는 person 은 완전히 새로운 객체를 할당받게 됩니다. 함수가 종료후 이 새로운 객체는 버려지게 됩니다.</p>\n<h3 id=\"실수-reference-type-을-value-type-으로-다루다\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98-reference-type-%EC%9D%84-value-type-%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EB%A3%A8%EB%8B%A4\" aria-label=\"실수 reference type 을 value type 으로 다루다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수: reference type 을 value type 으로 다루다.</h3>\n<p>고객이 슈퍼마켓에 들어가서 츄잉껌을 구입한다고 가정하자. 고객은 또한 빈병을 부지런히 수집했으며 1000 유로 바우처에 가치가 있는 4000 병을 현금으로 바꿔 왔다. 계산원이 지불금을 수락 할 수있는 충분한 자금이 있는지 확인하고 있다. 이 검사는 boolean 결과를 반환하는 canChange 함수에 의해 수행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> shopTransaction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Astro Mint Chewing Gum'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  price<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  amountPaid<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> cashier <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  units<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  quantity<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">canChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shopTransaction<span class=\"token punctuation\">,</span> cashier</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> amount <span class=\"token operator\">=</span> shopTransaction<span class=\"token punctuation\">.</span>amountPaid <span class=\"token operator\">-</span> shopTransaction<span class=\"token punctuation\">.</span>price\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cashier<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> unit <span class=\"token operator\">=</span> cashier<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">>=</span> unit <span class=\"token operator\">&amp;&amp;</span> cashier<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      amount <span class=\"token operator\">-=</span> unit\n      cashier<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> amount <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">canChange</span><span class=\"token punctuation\">(</span>shopTransaction<span class=\"token punctuation\">,</span> cashier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cashier<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 함수는 우리가 기대하는 값을 반환하지만 여전히 문제가 있다. <code class=\"language-text\">canChange</code> 함수를 실행하면 side effect 이 발생하여 모든 기록이 cashier 에서 사라졌다. 왜?</p>\n<p>문제는 <code class=\"language-text\">cashier</code>이 참조 유형이라는 것이다. cashier 내부의 필드에 대한 모든 변경 사항은 함수 종료 후에도 유지된다.</p>\n<p>가능한 해결책은 새로운 변수를 생성하고이를 <code class=\"language-text\">cashier.quantity[i]</code>와 동일시하는 것이다. 이것은 우리가 원시 타입을 다루고 있기 때문에 <code class=\"language-text\">cashier.quantity[i]</code>의 값을 메모리의 새로운 위치에 복사 할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">canChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shopTransaction<span class=\"token punctuation\">,</span> cashier</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> amount <span class=\"token operator\">=</span> shopTransaction<span class=\"token punctuation\">.</span>amountPaid <span class=\"token operator\">-</span> shopTransaction<span class=\"token punctuation\">.</span>price\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cashier<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> unit <span class=\"token operator\">=</span> cashier<span class=\"token punctuation\">.</span>units<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> currentQuantity <span class=\"token operator\">=</span> cashier<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">>=</span> unit <span class=\"token operator\">&amp;&amp;</span> currentQuantity <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      amount <span class=\"token operator\">-=</span> unit\n      currentQuantity <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> amount <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이론적으로, 값을 변경하기위해 지원하지 않는 함수에서 모든 참조 유형을 깊이 복제 할 수도 있다. 깊은 복제는 말은 쉽지만 그렇지 않다. 우리는 다음 기사에서 다양한 유형의 복제를 탐색 할 것이다.</p>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<p>기본 유형은 값으로 전달 된다. 배열, 객체 및 함수는 참조로 전달된다. 두 가지를 섞어 본 적이 있다면 위의 예를 살펴봐야 합니다. 예제에서 이야기 한 이야기를 함수가 가질 수있는 여러 유형의 인수와 연관 시켜야 한다. 실수를 피하기 위해 이러한 개념이 자연스럽게 나타날 때까지 계속 연습하자.</p>","excerpt":"자바스크립트는 메모리에 있는 데이터 구조의 전체 접근 권한을 주지 않는다.\n하지만 언어차원에서 reference types 는 존재한다.\nvalue 와 reference types…","tableOfContents":"<ul>\n<li><a href=\"/value-and-reference.md/#value-and-reference-types\">Value and Reference types</a></li>\n<li><a href=\"/value-and-reference.md/#%EC%8B%A4%EC%88%98-value-type-%EC%9D%84-reference-type-%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EB%A3%A8%EB%8B%A4\">실수: value type 을 reference type 으로 다루다.</a></li>\n<li><a href=\"/value-and-reference.md/#%EC%8B%A4%EC%88%98-reference-type-%EC%9D%84-value-type-%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EB%A3%A8%EB%8B%A4\">실수: reference type 을 value type 으로 다루다.</a></li>\n<li><a href=\"/value-and-reference.md/#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>","fields":{"slug":"/value-and-reference.md/"},"frontmatter":{"title":"Javascript의 Value와 Reference Types 이해","date":"Apr 07, 2019","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/value-and-reference.md/","series":[],"lastmod":"0001-01-01"}}}