{"componentChunkName":"component---src-templates-post-tsx","path":"/hello-iscroll.md/","result":{"data":{"markdownRemark":{"html":"<p>가로 스크롤 구현을 위해 react + typescript + iscroll 썼던 느낀점을 정리하고자 합니다.</p>\n<h2 id=\"1-iscroll--typescript\" style=\"position:relative;\"><a href=\"#1-iscroll--typescript\" aria-label=\"1 iscroll  typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. iscroll + typescript</h2>\n<p>첫번째로 맞닥뜨린 문제는 iscroll의 type의 정의가 제대로 안되어 있다는 점이 였습니다.\n<a href=\"https://www.npmjs.com/package/@types/iscroll\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/package/@types/iscroll</a> 과 같이 타입이 존재합니다.</p>\n<p>하지만 그 타입이 제대로 정의 되어 있지 않습니다.</p>\n<p>따라서 <code class=\"language-text\">import IScroll from &quot;iscroll&quot;;</code> 로 모듈을 <code class=\"language-text\">import</code> 할 시에 모듈이 아니라는 에러가 나게 됩니다.</p>\n<p>이는 <code class=\"language-text\">@types/iscroll</code> 에 <code class=\"language-text\">export</code> 구문이 보이지 않아서 모듈로 인식을 못하고 있는 것처럼 보였습니다.\n(추측이지만 모듈로써 사용하기 보단 script 태그 방식으로 사용하도록 타입이 설계 되어 있는 거 같습니다.)</p>\n<p>하여 폭풍 검색해보니 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18554\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18554</a> 이런 글을 만났었습니다.</p>\n<p>해서 <code class=\"language-text\">/src/types/iscroll.d.ts</code> 파일에 해당 문구를 넣어주었습니다. 참고로 typescript config시 <code class=\"language-text\">&quot;baseUrl&quot;: &quot;./src&quot;</code> 를 추가했었습니다.</p>\n<p>그리고 실행하면 에러가 사라집니다.</p>\n<h2 id=\"2-iscroll-위치-조정\" style=\"position:relative;\"><a href=\"#2-iscroll-%EC%9C%84%EC%B9%98-%EC%A1%B0%EC%A0%95\" aria-label=\"2 iscroll 위치 조정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. iscroll 위치 조정</h2>\n<p>새로 고침시 url에 따른 처음 스크롤 위치 조정 또는 탭(메뉴)를 클릭시 클릭한 메뉴가 가운데 오도록 하게 스크롤의 위치를 움직일 필요가 있었다.</p>\n<p>정리하면 다음과 같다.</p>\n<ol>\n<li>새로고침시 해당되는 메뉴가 가운데 오도록 해야한다.</li>\n<li>메뉴 클릭시 클릭당한 메뉴가 가운데 오도록 해야한다.</li>\n</ol>\n<p>1번의 경우에는 iscroll 인스턴스를 생성하기 전에 미리 위치를 계산해서 option 값으로 <code class=\"language-text\">startX</code> 값을 넣는 방식이 가장 좋아 보였습니다.</p>\n<p>2번의 경우에는 메뉴 클릭시 해당 위치 값을 계산해서 iscroll의 <code class=\"language-text\">scrollTo</code> 메서드를 사용하도록 했습니다.</p>\n<p>여기서 중요한것은 어느 상황에서나 미리 움직여야 할 위치 값을 구하는것이 중요했습니다.</p>\n<p>준비할 수 있는 값은 두가지 였습니다.</p>\n<ol>\n<li>가로 스크롤을 감싸고 있는 wrapper element</li>\n<li>타게팅이 되는 메뉴 리스트의 index 값</li>\n</ol>\n<p>힌트가 되는 값들을 가지고 내가 움직여야 할 위치를 구하는 코드는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scrollMoveTo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">wrapperElement<span class=\"token operator\">:</span> HTMLDivElement<span class=\"token punctuation\">,</span>\n  currentIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> startX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrapperWidth <span class=\"token operator\">=</span> wrapperElement<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> wrapperMidPos <span class=\"token operator\">=</span> wrapperWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> wrapperLeftOffset <span class=\"token operator\">=</span> wrapperElement<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> $elemCurrentMenu <span class=\"token operator\">=</span> wrapperElement<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>\n      currentIndex\n    <span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> HTMLLIElement<span class=\"token punctuation\">;</span> <span class=\"token comment\">// div > ul > li를 구하기 위해서...</span>\n    <span class=\"token comment\">// 여기에 if 분기를 추가하면 더 좋을 듯 싶습니다.</span>\n    <span class=\"token keyword\">const</span> $elemMenuWrapperWidth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>wrapperElement\n      <span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> HTMLUListElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currenttMidWidth <span class=\"token operator\">=</span> $elemCurrentMenu<span class=\"token punctuation\">.</span>offsetWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currentLeftOffset <span class=\"token operator\">=</span> $elemCurrentMenu<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> maxWidth <span class=\"token operator\">=</span> $elemMenuWrapperWidth <span class=\"token operator\">-</span> wrapperWidth<span class=\"token punctuation\">;</span>\n\n    startX <span class=\"token operator\">=</span>\n      wrapperLeftOffset <span class=\"token operator\">-</span> currentLeftOffset <span class=\"token operator\">+</span> wrapperMidPos <span class=\"token operator\">-</span> currenttMidWidth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startX <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      startX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startX <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>maxWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      startX <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>maxWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> startX<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드에서 계산하는 것은 다음과 같습니다.</p>\n<ol>\n<li>wrapper element의 가운데 위치를 구합니다.</li>\n<li>wrapper의 children에서 해당 index의 element를 구합니다. (target element)</li>\n<li>wrapper element 의 offset left 값과 target element 의 offset left 의 차이를 구합니다. (wrapper element에서 부터 target element가 얼마만큼 떨어져 있는지 알기 위해서)</li>\n<li>wrapper element의 중간 값에 target element left 값이 얼마만큼 다가가야 하는지 구합니다.</li>\n<li>targetl element의 width의 반값 만큼 다시 이동을 시켜줍니다.</li>\n</ol>\n<h2 id=\"커스텀-훅\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85\" aria-label=\"커스텀 훅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 훅</h2>\n<p>iscroll을 관리 하는 커스텀 훅을 만들어 보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> IScroll <span class=\"token keyword\">from</span> <span class=\"token string\">\"iscroll\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> scrollMoveTo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIScroll</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">ref<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  currentIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> iScroll <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span>IScroll <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> initIndex <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>currentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iScroll<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// wrapper width</span>\n      <span class=\"token comment\">// console.dir(ref.current);</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> wrapperElement <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> wrapperId <span class=\"token operator\">=</span> wrapperElement<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> startX <span class=\"token operator\">=</span> <span class=\"token function\">scrollMoveTo</span><span class=\"token punctuation\">(</span>wrapperElement<span class=\"token punctuation\">,</span> initIndex<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        iScroll<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IScroll</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wrapperId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          scrollX<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          startX<span class=\"token punctuation\">,</span>\n          scrollY<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          disablePointer<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          disableTouch<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          disableMouse<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          preventDefault<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iScroll<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        iScroll<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        iScroll<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> iScroll<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useIScroll<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서 주의 할 점은 <code class=\"language-text\">useEffect</code> 시에 <code class=\"language-text\">new IScroll</code> 가 마운트시에 한번만 호출 할 수 있도록 변하는 값 (여기서는 <code class=\"language-text\">currentIndex</code>) 을 useEffect의 디펜던시로 넣어 두면 안된다는 점이였습니다.</p>\n<p>그래서 <code class=\"language-text\">currentIndex</code> 값을 받아서 <code class=\"language-text\">useRef</code> 로 초반 값으로 넣어두고 변하지 않도록 처리 했습니다.</p>","excerpt":"가로 스크롤 구현을 위해 react + typescript + iscroll 썼던 느낀점을 정리하고자 합니다. 1. iscroll + typescript 첫번째로 맞닥뜨린 문제는 iscroll의 type…","tableOfContents":"<ul>\n<li><a href=\"/hello-iscroll.md/#1-iscroll--typescript\">1. iscroll + typescript</a></li>\n<li><a href=\"/hello-iscroll.md/#2-iscroll-%EC%9C%84%EC%B9%98-%EC%A1%B0%EC%A0%95\">2. iscroll 위치 조정</a></li>\n<li><a href=\"/hello-iscroll.md/#%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85\">커스텀 훅</a></li>\n</ul>","fields":{"slug":"/hello-iscroll.md/"},"frontmatter":{"title":"hello-iScroll","date":"Apr 04, 2020","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/hello-iscroll.md/","series":[],"lastmod":"0001-01-01"}}}