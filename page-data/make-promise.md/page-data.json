{"componentChunkName":"component---src-templates-post-tsx","path":"/make-promise.md/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기</h2>\n<p>javascript 비동기를 다루는데 쓰이는 Promise 라는 객체가 있다. Promise 를 다루는 방법은 많지만 실제로이 객체가 어떤 방식으로 움직이는지 그 구조를 파악하면서 Promise 를 좀더 자유자재로 다뤄보자.</p>\n<h2 id=\"틀-만들기\" style=\"position:relative;\"><a href=\"#%ED%8B%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"틀 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>틀 만들기</h2>\n<p>promise 를 실행해서 리턴을 해보면 [[PromiseStatus]] 와 [[PromiseValue]] 이렇게 값이 나오는걸 확인할 수 있다.\n이걸 바탕으로 실제 promise 는 아니지만 비슷하게 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDIGN</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span> <span class=\"token comment\">// Promise의 상태값</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 최종 결과값이 저장될 장소.</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    PromiseStatus<span class=\"token operator\">:</span> status<span class=\"token punctuation\">,</span>\n    PromiseValue<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"promise-기능함수-만들기\" style=\"position:relative;\"><a href=\"#promise-%EA%B8%B0%EB%8A%A5%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"promise 기능함수 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise 기능함수 만들기</h2>\n<p>promise 개념을 보다보면 resolve, fulfill, reject 라는 용어를 볼 수가 있다.\nresolve 라는 개념은 어떠한 결과값으로 귀결되었다인데 이는 성공했을수도 있고 실패했을수도 있다는 뜻이다. 즉, 어떤 결과든 결론을 지었다라고 생각하면 된다.\nfulfill 은 귀결된 결과값이 성공했다는 뜻이고 반대로 reject 는 실패했다는 뜻이다.</p>\n<p>Promise 인자로는 함수 하나를 받는데 그 함수의 인자로 resolve, reject 를 받겠끔 되어있다.\nfn 이라는 함수를 호출할때 resolve 와 reject 구실을 할 수있는 함수를 만들어 넣어줘야 한다.</p>\n<p>여기서 참고로 resolve 함수는 Promise 객체를 받을수도 있어야 한다.</p>\n<p>이런 기능들을 하는 함수들을 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDIGN</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span> <span class=\"token comment\">// Promise의 상태값</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 최종 결과값이 저장될 장소.</span>\n\n  <span class=\"token comment\">// 이부분부터..</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token comment\">// 상태값을 바꿔줌.</span>\n    value <span class=\"token operator\">=</span> result <span class=\"token comment\">// 결과값을 value 값에 넣어줌.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span> <span class=\"token comment\">// 상태값을 바꿔줌.</span>\n    value <span class=\"token operator\">=</span> error <span class=\"token comment\">// 실패한 에러를 value 값으로 넣어줌.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 여기서 result가 올수있는 값은 일반 plain 값이 올수 있고 다른 Promise가 올수있으므로 그 처리를 해두어야 한다.</span>\n  <span class=\"token comment\">// 프로미스는 오직 fulfilled/rejected 중 오직 딱 한번만 귀결이 될수 있다.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> then <span class=\"token operator\">=</span> <span class=\"token function\">getThen</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여기 then 함수가 있으면 Promise로 왔다고 간주. (getThen 은 헬퍼함수)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>then<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ( doResolve는 헬퍼함수 )</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 일반 값으로 왔을 경우 이행.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 실행</span>\n  <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    PromiseStatus<span class=\"token operator\">:</span> status<span class=\"token punctuation\">,</span>\n    PromiseValue<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"헬퍼함수-작성하기\" style=\"position:relative;\"><a href=\"#%ED%97%AC%ED%8D%BC%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"헬퍼함수 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헬퍼함수 작성하기</h2>\n<p>위에서 본 헬퍼함수는 두종류가 존재한다. <code class=\"language-text\">getThen</code> , <code class=\"language-text\">doResolve</code> 함수이다.\n<code class=\"language-text\">getThen</code> 의 경우에는 Promise 객체의 특징은 then 함수가 있는지 없는지 파악하여 있으면 then 함수를 리턴 없으면 null 을 리턴한다. 또한 잘못된 Promise 를 막아줌.\n여기서 특히 다시 <code class=\"language-text\">doResolve</code> 를 실행시킬때 <code class=\"language-text\">then.bind(result)</code> 구문을 유의깊게 보자.\nthen 을 호출하는데 이 then 의 경우에는 this 를 result 로 바꿔준다. 이는 곧 result(Promise 객체)에 들어있는 then 을 호출하겠다는 의미이다.</p>\n<p><code class=\"language-text\">doResolve</code> 는 <code class=\"language-text\">Promise</code> 로 들어온 함수 인자(<code class=\"language-text\">fn</code>)를 실행해서 <code class=\"language-text\">resolve</code> 시키도록 하는 함수이다. 이 <code class=\"language-text\">fn</code> 함수 인자의 파라미터로 <code class=\"language-text\">resolve</code>, <code class=\"language-text\">reject</code> 함수를 받게 되는데 이 함수들은 <code class=\"language-text\">doResolve</code> 함수가 가지고 있는 함수를 제공하는 것이다. done 이라는 변수는 <code class=\"language-text\">fulfill</code> 과 <code class=\"language-text\">reject</code> 를 한번만 호출할수 있도록 도와준다. 또한 <code class=\"language-text\">fn</code> 을 한번 호출한 뒤에는 다시 <code class=\"language-text\">resolve</code> 나 <code class=\"language-text\">reject</code> 를 사용자에서 호출을 해줘야 다음 절차를 이행해 간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getThen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> result\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> t <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> then <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>then\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> then\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 중복 호출 방지</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Promise 인자로 넘어왔던 함수 fn 호출</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// Promise 인자로 넘어왔던 함수 fn 인자로 넘겨줄 resolve</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Promise 인자로 넘어왔던 함수 fn 인자로 넘겨줄 reject</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Promise 에 들어온 함수 <code class=\"language-text\">fn</code> 인자에서 모든 수행이 끝나면 <code class=\"language-text\">resolve</code>를 실행시키는데 이것은 아래 함수를 실행시킨다.\n특히 <code class=\"language-text\">onFulfilled</code> 함수는 Promise 내장 <code class=\"language-text\">resolve</code> 함수를 실행시키는데 이 함수는 일반 plain 한 값 또는 Promise 객체를 받기 위한 분기 처리가 되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token comment\">// Promise 내장 resolve 함수.</span>\n  <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>반대로 <code class=\"language-text\">reject</code>를 실행시키면 아래 함수를 실행시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token comment\">// Promise 내장 reject 함수.</span>\n  <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제 Promise 에서도 resolve 함수를 여러번 호출했을 경우를 막아준다. ( 맨 처음에 호출한 resolve 로 귀결시킨다. )</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 비동기 처리 예제</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이아이는 실행되지 않는다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\"여기까지는 내가 함수를 하나 줄터이니 Promise 내부 상태값과 결과값을 반영 시킬 함수를 인자로 넣어서 실행 시켜라\" 같은 느낌이다.</p>\n<p>그러면 유저가 Promise에 넘길 함수 내용에 비동기 작업을 하고 Promise가 상태값과 결과값을 반영할 함수를 넣어줄거라 믿고 비동기 결과에 따라 적절한 메서드를 결과값과 함께 호출한다.</p>\n<h2 id=\"promise-실행\" style=\"position:relative;\"><a href=\"#promise-%EC%8B%A4%ED%96%89\" aria-label=\"promise 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise 실행</h2>\n<p>아랫쪽에 다시 <code class=\"language-text\">doResolve</code>를 사용함으로써 잘못 행동하는 <code class=\"language-text\">fn</code> 을 막아준다. 여기서 <code class=\"language-text\">fn</code> 은 <code class=\"language-text\">resolve</code>, <code class=\"language-text\">reject</code> 심지어 에러도 던질수 있기에 <code class=\"language-text\">resolved</code> 와 <code class=\"language-text\">rejected</code> 를 한번만 호출 될수 있도록 보장하고 또한 내부변수인 <code class=\"language-text\">state</code> 를 바뀌는걸 막아준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDIGN</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span> <span class=\"token comment\">// Promise의 상태값</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 최종 결과값이 저장될 장소.</span>\n\n  <span class=\"token comment\">// 이부분부터..</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token comment\">// 상태값을 바꿔줌.</span>\n    value <span class=\"token operator\">=</span> result <span class=\"token comment\">// 결과값을 value 값에 넣어줌.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span> <span class=\"token comment\">// 상태값을 바꿔줌.</span>\n    value <span class=\"token operator\">=</span> error <span class=\"token comment\">// 실패한 에러를 value 값으로 넣어줌.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 이 resolve 는 fulfill 또는 reject로 보낼수 있어야 한다.</span>\n  <span class=\"token comment\">// 여기서 result가 올수있는 값은 일반 plain 값이 올수 있고 다시 Promise가 올수있으므로 그 처리를 해두어야 한다.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> then <span class=\"token operator\">=</span> <span class=\"token function\">getThen</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여기 then 함수가 있으면 Promise로 왔다고 간주. (getThen 은 헬퍼함수)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>then<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ( doResolve는 헬퍼함수 )</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 일반 값으로 왔을 경우 이행.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 실행</span>\n  <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    PromiseStatus<span class=\"token operator\">:</span> status<span class=\"token punctuation\">,</span>\n    PromiseValue<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"done-메서드-작성\" style=\"position:relative;\"><a href=\"#done-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"done 메서드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>done 메서드 작성</h2>\n<p><code class=\"language-text\">done</code> 이라는 함수는 <code class=\"language-text\">resolver</code> 끝나고 실행되어야 할 함수를 등록하는 함수이다.\n<code class=\"language-text\">then</code> 이라는 함수를 작성하기 전에 <code class=\"language-text\">done</code> 이라는 함수를 작성해보자.\n<code class=\"language-text\">done</code> 메서드는 간단하면서도 <code class=\"language-text\">then</code> 메서드가 어떻게 실행이 되는지 생각해볼 수 있게 한다.\n<code class=\"language-text\">done</code> 메서드는 <code class=\"language-text\">promise</code> 가 끝나고 나서 해당의 행동을 정의하는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">promise<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span>onFulfilled<span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이렇게 실행이 되도록 할 것이다.</span></code></pre></div>\n<p><code class=\"language-text\">done</code> 함수의 몇가지 목표가 있다.</p>\n<ul>\n<li><code class=\"language-text\">done</code> 함수의 인자의 <code class=\"language-text\">onFulfilled</code> 와 <code class=\"language-text\">onRejected</code> 는 둘 중 하나만 호출이 된다.</li>\n<li>호출될 함수(<code class=\"language-text\">onFulfilled</code>, <code class=\"language-text\">onRejected</code>)는 한번만 호출이 된다.</li>\n<li>호출될 함수(<code class=\"language-text\">onFulfilled</code>, <code class=\"language-text\">onRejected</code>)는 <code class=\"language-text\">done</code> 메서드가 return 되기 전까지 호출되지 않는다.</li>\n<li><code class=\"language-text\">promise</code> 안에 <code class=\"language-text\">resolve</code> 함수(어떠한 결과에 도달함)는 <code class=\"language-text\">done</code> 호출 전에 되었는지 후에 되었는지 상관없이 호출되어진다.</li>\n</ul>\n<p>실제로 javascript <code class=\"language-text\">promise</code> 에는 <code class=\"language-text\">done</code> 이라는게 없고 <code class=\"language-text\">jqeury</code> 의 <code class=\"language-text\">Deferred</code> 에는 존재하긴 하다. 어떻게 움직이는지 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PENDIGN</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span> <span class=\"token comment\">// Promise의 상태값</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 최종 결과값이 저장될 장소.</span>\n\n  <span class=\"token keyword\">var</span> handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 성공과 실패 이후에 실행되어야 할 handler를 저장하는 공간.</span>\n\n  <span class=\"token comment\">// 이부분부터..</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token comment\">// 상태값을 바꿔줌.</span>\n    value <span class=\"token operator\">=</span> result <span class=\"token comment\">// 결과값을 value 값에 넣어줌.</span>\n\n    handlers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이행이 되고 난 다음에 후속 함수들을 실행한다.</span>\n    handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span> <span class=\"token comment\">// 상태값을 바꿔줌.</span>\n    value <span class=\"token operator\">=</span> error <span class=\"token comment\">// 실패한 에러를 value 값으로 넣어줌.</span>\n\n    handlers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span>\n    handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 이 resolve 는 fulfill 또는 reject로 보낼수 있어야 한다.</span>\n  <span class=\"token comment\">// 여기서 value가 올수있는 값은 일반 plain 값이 올수 있고 다시 Promise가 올수있으므로 그 처리를 해두어야 한다.</span>\n  <span class=\"token comment\">// Promise가 올 경우에는 then 함수에서 return 값으로 Promise를 넘길때이다.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> then <span class=\"token operator\">=</span> <span class=\"token function\">getThen</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여기 then 함수가 있으면 Promise로 왔다고 간주. (getThen 은 헬퍼함수)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>then<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ( doResolve는 헬퍼함수 )</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 일반 값으로 왔을 경우 이행.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handler 객체</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      handlers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> handler<span class=\"token punctuation\">.</span>onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        handler<span class=\"token punctuation\">.</span><span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> handler<span class=\"token punctuation\">.</span>onRejected <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        handler<span class=\"token punctuation\">.</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">done</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// done 호출 되기 전에 남아있는 함수들을 다 호출하고 handle 을 호출하기 위해</span>\n    <span class=\"token comment\">// 즉, 여기 있는 함수가 다 호출한 뒤에 호출을 할 목적을 가진 setTimeout 함수.</span>\n    <span class=\"token comment\">// setTimeout으로 감싼 함수는 webapis timer에 의해 관리되고</span>\n    <span class=\"token comment\">// 그이후에 나머지 코드를 스택에 쌓고 먼저 실행된다. 그 사이 타이머가 완료가 되고</span>\n    <span class=\"token comment\">// task queue에 콜백을 집어넣구 event loop는 스택이 비워져있으면 task queue에서 하나하나 꺼내어</span>\n    <span class=\"token comment\">// 실행시킨다.</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        onFulfilled<span class=\"token operator\">:</span> onFulfilled<span class=\"token punctuation\">,</span>\n        onRejected<span class=\"token operator\">:</span> onRejected<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 실행</span>\n  <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    PromiseStatus<span class=\"token operator\">:</span> status<span class=\"token punctuation\">,</span>\n    PromiseValue<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앞서 <code class=\"language-text\">Promise</code> 에 넘겨준 <code class=\"language-text\">fn</code> 이 모든 작업이 끝나면 <code class=\"language-text\">Promise</code>의 상태 값을 변경 하게 되고 변경된 상태 값에 따라서 <code class=\"language-text\">done</code>에 등록해둔 함수 (<code class=\"language-text\">onFulfilled</code>, <code class=\"language-text\">onRejected</code>) 를 호출 하게 된다.</p>\n<h2 id=\"done-함수의-분석\" style=\"position:relative;\"><a href=\"#done-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B6%84%EC%84%9D\" aria-label=\"done 함수의 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>done 함수의 분석</h2>\n<p>눈 여겨 볼 부분은 <code class=\"language-text\">handlers</code> 와 <code class=\"language-text\">done</code> 함수 그리고 <code class=\"language-text\">fulfill</code> , <code class=\"language-text\">reject</code> 에 있는 <code class=\"language-text\">forEach</code> 메서드 , <code class=\"language-text\">handle</code> 함수이다.</p>\n<p>만약 아래처럼 호출했다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>처음 Promise 인자로 받은 <code class=\"language-text\">fn</code> 은 <code class=\"language-text\">doResolve</code> 함수에 인자로 들어가서 호출당하게 된다. 이때 <code class=\"language-text\">fn</code> 에는 비동기인 <code class=\"language-text\">setTimeout</code> 함수가 호출되게 되고 이 안에 있는 <code class=\"language-text\">resolve(10)</code> 를 감싼 익명함수는 2 초 후에 task queue 에 쌓이게 된다.</p>\n<blockquote>\n<p>여기서 task queue 는 스택에 있는 실행문이 다 실행이 되고나서 실행된다. 그래서 정확히 2 초 후에 실행 된다는 보장이 없다.</p>\n</blockquote>\n<p>그리고 나서 <code class=\"language-text\">done</code> 함수를 호출하게 되면 여기서 <code class=\"language-text\">done</code> 호출도 비동기 함수인 setTimeout 함수가 실행이 되고 이는 0 초 후에 task queue 에 쌓이게 되어 타이머 차이로 위 <code class=\"language-text\">function(){ resolve(10) }</code> 보다 먼저 큐에 쌓이게 된다. 따라서 done 이 실행이 먼저 된다. handle 함수에서 status 를 파악하는데 <code class=\"language-text\">resolve()</code>가 실행하지 않은 상태이니 상태 값은 <code class=\"language-text\">pending</code> 이다. 따라서 <code class=\"language-text\">handlers=[]</code> 에 <code class=\"language-text\">handler 객체</code>를 push 하게 된다.</p>\n<p>그 이후에 <code class=\"language-text\">resolve(10)</code> 이 실행되면 <code class=\"language-text\">handlers</code>를 순회하면서 <code class=\"language-text\">handle 함수</code>를 실행한다.\n상태값이 <code class=\"language-text\">FULLFILLED</code> 가 되면서 <code class=\"language-text\">handler.onFuilfilled</code>를 결과값을 넣어서 실행 하게 된다.</p>\n<p>여기서는 <code class=\"language-text\">Promise</code> 의 <code class=\"language-text\">resolve</code> 함수가 <code class=\"language-text\">done</code> 함수 호출 이후에 호출이 되었다. <code class=\"language-text\">resolve</code> 함수가 아직 호출이 안되었기 때문에 상태는 <code class=\"language-text\">PENDING</code> 상태일 것이고 이때는 작업이 귀결(resolve)이 되고나서 실행되어야 할 <code class=\"language-text\">resolve</code>, <code class=\"language-text\">reject</code> 함수를 품은 객체를 <code class=\"language-text\">handlers</code> 라는 배열에 잠시 넣어두고 나중에 적절한 함수를 호출하도록 한다.</p>\n<p>만약 <code class=\"language-text\">resolve</code> 가 먼저 실행이 되었다면 <code class=\"language-text\">status</code> 가 <code class=\"language-text\">resolve</code> 된 귀결 상태(fulfill 이 되든 reject 가 되든)에 따라서 바로 <code class=\"language-text\">done</code> 에 넘겼던 함수를 호출하게 된다.</p>\n<h2 id=\"여기까지의-요약\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EA%B8%B0%EA%B9%8C%EC%A7%80%EC%9D%98-%EC%9A%94%EC%95%BD\" aria-label=\"여기까지의 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여기까지의 요약</h2>\n<p>여기까지의 <code class=\"language-text\">promise</code> 는 메인 객체 안에 넘겼던 함수가 최종적으로 결론이 났는지 (resolved 가 되었는지) 확인하는 상태값을 가지고 done 에 등록해둔 함수를 호출할지 말지를 결정한다.</p>\n<p><code class=\"language-text\">Promise</code> 에서 인자로 받는 <code class=\"language-text\">fn</code> 에는 <code class=\"language-text\">resolve</code>, <code class=\"language-text\">reject</code> 2 개의 인자가 넘어가는데 이 <code class=\"language-text\">resolve</code>, <code class=\"language-text\">reject</code> 의 경우에는 Promise 안에 있는 내장된 함수들이고 이 함수들을 인자로 넣어서 <code class=\"language-text\">fn</code> 을 실행하게 된다.</p>\n<p>원하는 작업이 완료 되었을때 <code class=\"language-text\">resolve</code> (or <code class=\"language-text\">reject</code>) 에 해당 작업의 결과값을 넣어 호출하는 것의 의미는 <code class=\"language-text\">Promise</code> 안에 있는 내장함수들을 수행 시키고 그 작업 이 완료 되었을 때 done 메서드의 인자로 받은 함수를 실행 시키는 것이다.</p>\n<h2 id=\"then-메서드-작성\" style=\"position:relative;\"><a href=\"#then-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"then 메서드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>then 메서드 작성</h2>\n<p><code class=\"language-text\">then</code> 메서드의 경우에는 <code class=\"language-text\">done</code> 과 비슷하지만 <code class=\"language-text\">Promise</code> 를 반환하면서 체이닝을 구성 할 수 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 비동기 처리 예제</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// then은 새로운 Promise를 반환합니다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token comment\">// 여기서 return 값은 then이 반환하는 promise 객체의 resolved 된 값이다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 11</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 처럼 실행이 되도록 할것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... 윗부분 생략</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">done</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// done 호출 되기 전에 남아있는 함수들을 다 호출하고 호출하기 위해</span>\n    <span class=\"token comment\">// 즉, 비동기를 보장하기 위한 setTimeout 함수.</span>\n    <span class=\"token comment\">// setTimeout으로 감싸면 스택에 쌓인것부터 무조건 우선순위를 갖는다. 호출 순서에 상관없이</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        onFulfilled<span class=\"token operator\">:</span> onFulfilled<span class=\"token punctuation\">,</span>\n        onRejected<span class=\"token operator\">:</span> onRejected<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이 then은 체이닝 될때 resolve 함수에서 then을 bind해서 넘긴다.</span>\n    <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n\n    <span class=\"token comment\">// self(기존 Promise) 의 귀결이 끝나고 실행해야 하는걸 보장하기 위해 => self.done() 메서드 호출</span>\n    <span class=\"token comment\">// self.done() 메서드로 self Promise가 끝나고 실행해야 하는 함수 등록.</span>\n    <span class=\"token comment\">// 등록된 함수에서는 then 에서 등록해 뒀던 onFulfiled 호출 => resolve(onFulfilled(result))</span>\n    <span class=\"token comment\">// onFulfiled 함수가 결과 값이 나왔을때 새로운 Promise의 then에 등록해 뒀던 함수 다시 호출 => resolve(onFulfilled(result))</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 체이닝을 하기 위해서 promise를 리턴하자.</span>\n      <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// 여기서 done 함수는 앞서 등록했던 promise가 resolve(귀결) 되었을시</span>\n        <span class=\"token comment\">// 그 status에 따라 호출될 함수들을 등록시킨다.</span>\n        <span class=\"token comment\">// 이 함수는 self promise가 resolve 했을 시 그 결과를 result에 넘겨주고</span>\n        <span class=\"token comment\">// 그 결과를 다시 then에서 넘어온 onFulfiled 함수의 인자로 넘긴다.</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// 리턴되는 값(then에서 인자로 줬던 함수가 실행되고 난 return 값: onFulfilled(result))을</span>\n              <span class=\"token comment\">// 다시 새로운 resolve에 넘겨주어야 그 다음 then에게 전달.</span>\n              <span class=\"token comment\">// 특히 이 onFulfilled(result) 의 리턴값이 Promise 객체라면</span>\n              <span class=\"token comment\">// 위 new Promise에서 해야할 resolve와 reject 함수를 onFulfilled(result) 의 리턴값인 Promise 객체가</span>\n              <span class=\"token comment\">// resolve 또는 reject 됬을시 실행하도록 만든다.</span>\n              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">onReject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 실행</span>\n  <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    PromiseStatus<span class=\"token operator\">:</span> status<span class=\"token punctuation\">,</span>\n    PromiseValue<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n    done<span class=\"token punctuation\">,</span>\n    then<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"then-함수-파헤치기\" style=\"position:relative;\"><a href=\"#then-%ED%95%A8%EC%88%98-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0\" aria-label=\"then 함수 파헤치기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>then 함수 파헤치기</h2>\n<p>앞서 <code class=\"language-text\">done</code> 함수의 경우 연속된 체이닝을 갖지 못하는 단점을 지니고 있었다.</p>\n<p><code class=\"language-text\">then</code> 함수의 경우에는 연속된 <code class=\"language-text\">then</code> 호출을 할수있도록 체이닝을 지니고 있으면서 <code class=\"language-text\">then</code> 에 등록된 함수에서 <code class=\"language-text\">return</code> 값이 자동으로 그 다음 호출되는 <code class=\"language-text\">then</code> 핸들러의 인자값으로 전달 될수 있도록 모양새를 갖추고있다.</p>\n<p>위에서 <code class=\"language-text\">then</code> 은 연속된 <code class=\"language-text\">then</code> 호출을 위해 <code class=\"language-text\">promise</code> 로 감싸서 리턴을 하고있다.\n<code class=\"language-text\">then</code> 함수에서 하는 일은 앞의 <code class=\"language-text\">promise</code> 가 <code class=\"language-text\">resolve</code> 또는 <code class=\"language-text\">reject</code> 시 그 결과를 받아 호출될 함수들을 등록할 <code class=\"language-text\">done</code> 함수를 호출 하는 일이다.</p>\n<p>이 작업 또한 <code class=\"language-text\">new Promise()</code>로 감싸서 새로운 <code class=\"language-text\">Promise</code>(약속)으로 만들어 준다.</p>\n<p><code class=\"language-text\">done</code> 함수에 앞서 <code class=\"language-text\">Promise</code> 가 귀결되면 호출될 함수를 등록하고 그 함수로 앞선 <code class=\"language-text\">Promise</code> 의 결과를 받게 되면 <code class=\"language-text\">then</code> 메서드에서 인자로 받았던 함수의 인자로 넘기게 되고 그 결과 값을 새로운 <code class=\"language-text\">Promise</code> 의 <code class=\"language-text\">resolve</code>에 인자로 귀결 값을 넘기게 된다.</p>\n<p>결국 맨 앞의 <code class=\"language-text\">Promise</code> 의 결과를 <code class=\"language-text\">then</code> 에 등록한 함수가 받는다. (이때 then 은 새로운 <code class=\"language-text\">Promise</code> 를 생성 및 리턴한다.)\n그 등록한 함수의 리턴 값은 새로운 <code class=\"language-text\">Promise</code> 의 <code class=\"language-text\">resolve()</code> 에 인자로 넘겨서 또 다시 <code class=\"language-text\">then</code> 에 등록한 함수가 받게끔 한다.</p>\n<p>기본적으로 <code class=\"language-text\">then</code> 에 등록한 함수에서 리턴된 값은 즉시 다음 <code class=\"language-text\">then</code> 에 등록된 함수로 전달이 된다. 만약 리턴된 값이 <code class=\"language-text\">promise</code> 라면 그 값이 귀결(resolve 또는 reject)될 때까지 기다린 후 귀결이 되면 <code class=\"language-text\">then</code> 에서 만들어뒀던 <code class=\"language-text\">Promise</code> 의 <code class=\"language-text\">resolve</code> 또는 <code class=\"language-text\">reject</code> 함수를 실행시켜 다음 <code class=\"language-text\">then</code> 호출로 이어지게 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 여기서 resolve는 내부적인 resolve 함수를 호출,</span>\n  <span class=\"token comment\">// 그 이후에 fulfilled 과 value 1 셋팅 그 이후에 등록해뒀던 핸들러 함수 실행 ( 아래 then으로 등록해둔 함수 )</span>\n  <span class=\"token comment\">// 사실 then 함수는 바로 등록하기 보다는 해당 함수를 실행할수 있는 함수를 등록함.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// (*)</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// (**)</span>\n\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"then-에서-promise-를-리턴했을-경우를-알아보자\" style=\"position:relative;\"><a href=\"#then-%EC%97%90%EC%84%9C-promise-%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%96%88%EC%9D%84-%EA%B2%BD%EC%9A%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\" aria-label=\"then 에서 promise 를 리턴했을 경우를 알아보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>then 에서 Promise 를 리턴했을 경우를 알아보자</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// (*)</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// (**)</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>처음 <code class=\"language-text\">Promise</code> 의 인자로 넣은 함수를 호출한뒤 <code class=\"language-text\">then</code> 함수들이(동기) 차례로 호출이 되면서 <code class=\"language-text\">Promise</code> 가 <code class=\"language-text\">resolve</code> 되었을때 호출될 콜백 함수들을 등록시킨다.</p>\n<p>1 초 뒤에 <code class=\"language-text\">resolve(1)</code> 이 호출되면 <code class=\"language-text\">Promise</code> 내부적으로 <code class=\"language-text\">status</code> 와 <code class=\"language-text\">value</code> 값을 업데이트 하고 그 다음 <code class=\"language-text\">then</code> 함수의 인자로 넘겼던 함수를 실행한다. 이로써 첫번째 <code class=\"language-text\">Promise</code>는 <code class=\"language-text\">then</code> 으로 등록해 두었던 함수를 호출하면서 끝이 난다.</p>\n<p>첫번째 <code class=\"language-text\">then</code> 을 실행시키면 아래 해당 함수가 <code class=\"language-text\">handler.onFulfilled</code> 로 등록이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// then 함수안에 self.done 함수의 첫번째 인자. fulfilled 될때 실행할 함수를 등록</span>\n<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기 onFulfilled는 then에서 등록했던 함수.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">resolve(1)</code> 이 실행 되면 등록되었던 위 함수가 실행이 된다.</p>\n<p>위 함수에 <code class=\"language-text\">onFulfilled(result)</code>이 실행되면서 <code class=\"language-text\">then</code>에 인자로 넘겼던 함수가 실행이 된다.\n그러면서 <code class=\"language-text\">alert(1)</code>이 실행이 되고, <code class=\"language-text\">return new Promise()</code> 가 실행이 되는데 다시 여기서는 <code class=\"language-text\">Promise</code> 의 인자 함수를 실행하고 <code class=\"language-text\">{PENDING, null}</code> 이런식으로 리턴이 된다.</p>\n<p>여기서 <code class=\"language-text\">resolve</code> 함수는 <code class=\"language-text\">Promise</code> 객체 내부에 있는 <code class=\"language-text\">resolve</code> 함수를 가리킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> then <span class=\"token operator\">=</span> <span class=\"token function\">getThen</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>then<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// result가 promise 객체이므로 result에 해당하는 then을 호출하자.</span>\n      <span class=\"token comment\">// then은 result의 done을 호출하면서 result결과에 따른 resolve, reject 함수를 등록한다.</span>\n      <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token comment\">// 리턴</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doResolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 중복 호출 방지</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수에서 <code class=\"language-text\">result</code> 가 <code class=\"language-text\">new Promise</code>의 리턴 값이므로 <code class=\"language-text\">fulfill(result)</code>를 호출하지 않고 (<code class=\"language-text\">then</code> 의 첫번째 인자로 들어왔던 함수가 다 끝났다고 보지 않고) 다시 <code class=\"language-text\">doResolve()</code> 를 실행하게 된다.\n여기서 첫 인자로는 <code class=\"language-text\">result</code> 로 들어왔던 리턴된 <code class=\"language-text\">Promise</code> 객체의 <code class=\"language-text\">then</code> 함수를 넘긴다.</p>\n<p>여기서 <code class=\"language-text\">then</code> 을 넘기는 이유!! 리턴 값이 <code class=\"language-text\">Promise</code> 객체 라는 것은 <code class=\"language-text\">then</code> 함수로 소비를 해줘야 그 값을 알 수 있는데 여기에선 단지 <code class=\"language-text\">return new Promise()</code> (첫번째 <code class=\"language-text\">then</code> 함수에 넘겼던 함수에서 리턴한 값) 로 그치기만 했다.</p>\n<p>그래서 리턴된 <code class=\"language-text\">Promise</code>를 귀결시키기 위해서 <code class=\"language-text\">doResolve</code> 함수에 <code class=\"language-text\">then</code> 함수와 함께 <code class=\"language-text\">resolve</code> 함수와 <code class=\"language-text\">reject</code> 함수를 인자로 넘기게 된다.</p>\n<p>첫번째 <code class=\"language-text\">then</code> 함수에 넘겼던 함수의 <code class=\"language-text\">fulfill</code> 된 사실을 미뤄두고(then 에서 return 하는 Promise) <code class=\"language-text\">result</code> 들어온 <code class=\"language-text\">promise</code> 의 객체의 <code class=\"language-text\">then</code> 함수를 실행시켜서 첫번째 <code class=\"language-text\">then</code> 함수에서 return 한 Promise의 <code class=\"language-text\">resolve</code> 함수를 다시 등록해둔다. 즉, 내부의 <code class=\"language-text\">promise</code> 부터 처리하고 처리가 완료되면 <code class=\"language-text\">then</code> 함수의 결과를 처리 하는 것이다.</p>\n<p>여기서 2 초 뒤에 <code class=\"language-text\">resolve(result * 2)</code> 이게 호출이 된다면 결과값으로 들어왔던 <code class=\"language-text\">Promise</code> 가 <code class=\"language-text\">resolve</code> 되고 아까 <code class=\"language-text\">doResolve(then.bind(result), resolve, reject)</code> 등록해뒀던 <code class=\"language-text\">resolve</code> 가 실행된다.</p>\n<p>doResolve 함수가 실행이 될때에는 다음과 같은 모습이 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Promise 인자로 넘어왔던 함수 fn 인자로 넘겨줄 resolve</span>\n  <span class=\"token comment\">// then 함수 내부에서 onFulfilled 함수가 됩니다.</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// resolve 함수</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Promise 인자로 넘어왔던 함수 fn 인자로 넘겨줄 reject</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span> <span class=\"token comment\">// reject 함수</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>아래 함수는 <code class=\"language-text\">then</code> 함수 내부 실행될 함수이고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수에서 <code class=\"language-text\">onFulfilled</code> 는 <code class=\"language-text\">doResolve</code> 에서 등록한 아래 함수이고 아래 함수에서 <code class=\"language-text\">onFulfilled</code> 함수가 <code class=\"language-text\">doResolve(then.bind(result), resolve, reject)</code> 에서 두번째 인자인 기존 <code class=\"language-text\">promise</code> 를 지연해왔던 <code class=\"language-text\">resolve</code> 함수가 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n      done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>그럼 결국엔 2 로 귀결 된 값이 호출이 되고 처음에 지연시켜놨던 <code class=\"language-text\">resolve</code> 가 다시 실행되고 이번엔 값이기 때문에 <code class=\"language-text\">fulfill(result);</code> 가 실행되서 <code class=\"language-text\">fulfill</code> 함수에 등록되었던 등록된 <code class=\"language-text\">handlers</code> 가 마저 실행된다.</p>\n<h2 id=\"promise-함수-전체-이해\" style=\"position:relative;\"><a href=\"#promise-%ED%95%A8%EC%88%98-%EC%A0%84%EC%B2%B4-%EC%9D%B4%ED%95%B4\" aria-label=\"promise 함수 전체 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise 함수 전체 이해</h2>\n<ul>\n<li><code class=\"language-text\">Promise</code> 란 어떠한 작업을 수행한 뒤 그 작업에 대해 성공을 했는지 아니면 실패를 했는지 결과를 객체(promise 인스턴스)로서 나에게 알려주는 녀석이다. 그 약속의 객체에 메서드를 실행하면서 기존의 비동기 콜백 헬에서 비동기 선형으로 읽기 좋은 코드를 만들기 위한 노력이다.</li>\n<li>콜백이란 어떠한 작업이 모두 끝났을때 수행하도록 만든 함수이다. 이런 콜백함수는 일종의 약속인 셈이다. 상상해보자. 직접적으로 비동기 작업을 할때 약속을 주입시키는 방법은 콜백 헬을 만들 가능성이 아주 높다. 하지만 <code class=\"language-text\">Promise</code> 라는것으로 한번 감싸 준다면 비동기 작업을 수행하긴 하지만 그 결과를 소비하는 주체 즉, 약속의 행동이 나타나기 전까지는 그 결과 값을 바로 내뱉지 않는다. (<code class=\"language-text\">then</code> 이라는 함수 호출을 통해 그 결과 값을 받아올수 있다.) 그러므로 바로 사용될수 없다. 이런 해당 결과값은 리턴된 객체 안에 보관 시켜둔다. 그래서 약속을 계속 주입하기 보단 순차적인 약속을 만들어 콜백 헬을 막을 수 있다.</li>\n<li>then 이라는 체이닝을 제외하고 <code class=\"language-text\">Promise</code> 의 대략적인 구현 방식은 인자로 받은 첫번째 함수가 결과값을 내고 그 다음 실행하고 싶은 함수 즉, 약속하고 싶은 코드(함수)를 done 함수를 통해서 등록한다. 비동기가 끝난 뒤 resolve 를 실행 하게 되면 등록 되었던 함수가 동작하게 된다. 이것은 <code class=\"language-text\">resolve</code> 라는 함수는 해당 <code class=\"language-text\">Promise</code> 에서 인자로 받았던 함수가 모든 수행을 다 했다는걸 알리기 위한 함수이고 내부적으로 등록해뒀던 <code class=\"language-text\">handlers</code> 들을 <code class=\"language-text\">forEach</code> 하면서 실행하게 된다.</li>\n<li>\n<p>체이닝의 경우 처음 동기화 부분이 다 진행된 뒤에 ( 비동기는 나중에 실행될 부분이므로 ) <code class=\"language-text\">then</code> 함수가 진행이 된다. <code class=\"language-text\">then</code> 함수는 기본적으로 <code class=\"language-text\">Promise</code> 를 리턴하므로 체이닝으로 <code class=\"language-text\">then</code> 함수를 또 불러올수 있고 <code class=\"language-text\">Promise</code> 인자인 함수를 바로 호출하게 된다.\n여기서 <code class=\"language-text\">done</code> 함수를 이용해서 처음에 <code class=\"language-text\">Promise</code> 로 넘겼던 함수(fn) 비동기 완료 후 (<code class=\"language-text\">resolve</code> 후) 불러올 <code class=\"language-text\">handler</code> 를 등록을 해둔다. 그 이후로도 마지막 <code class=\"language-text\">then</code> 까지 실행이 되며 (사실 이 중간에 각 <code class=\"language-text\">Promise</code> 에 <code class=\"language-text\">resolve</code> 가 호출 되었을수도 아닐수도 있다.) 이 <code class=\"language-text\">then</code> 메서드들은 각기 다른 <code class=\"language-text\">Promise</code> 객체(다른 <code class=\"language-text\">context</code> 를 지님, <code class=\"language-text\">then</code> 호출시 <code class=\"language-text\">new Promise</code>를 하기 때문)의 핸들러(<code class=\"language-text\">Promise</code> 안에 <code class=\"language-text\">handler</code> 배열 )에 <code class=\"language-text\">fulfill</code> 과 <code class=\"language-text\">reject</code> 함수를 등록시킨다.\n이후 비동기 값이 귀결값이 정해지면 <code class=\"language-text\">done</code> 에서 등록해두었던 <code class=\"language-text\">handler</code> 함수가 실행 될것이고 <code class=\"language-text\">hendler</code> 안에는 <code class=\"language-text\">then</code> 에서 등록해두었던 <code class=\"language-text\">onFulfilled</code> 함수를 실행한다. 여기서 나온 리턴값을 가지고 다시 <code class=\"language-text\">resolve</code> 를 시켜주게 되면 계속적으로 등록해두었던 함수를 호출하게 된다.</p>\n<p>즉, <code class=\"language-text\">then</code> 함수는 새로운 약속만드는 함수이다. <code class=\"language-text\">then</code> 에 인자로 넘긴 함수(<code class=\"language-text\">onFulfilled</code>, <code class=\"language-text\">onRejected</code>)에서의 일련의 작업들이 완료되는 경우(<code class=\"language-text\">resolved</code>: 귀결), 그 다음 체이닝 <code class=\"language-text\">then</code> 으로 등록했던 함수에 인자로 그 결과를 다시 또 알려주겠다는 약속인 셈이다.\n여기서 특히 인자로 넘기는 함수 안에서 다시 <code class=\"language-text\">Promise</code> 객체를 리턴하는 로직을 만난다면 그 <code class=\"language-text\">promise</code> 가 <code class=\"language-text\">resolve</code> 되었을때 수행하는 작업(여기선 또다른 <code class=\"language-text\">then</code> 일 것이다. <code class=\"language-text\">then</code> 을 호출해야 결과 값을 가져올 수 있기 때문이다.) <code class=\"language-text\">then</code> 을 자동으로 등록 해주어 그 결과 값이 <code class=\"language-text\">then</code> 의 <code class=\"language-text\">promise</code> 로 전달 될 수 있도록 한다.</p>\n</li>\n<li><code class=\"language-text\">Promise</code> 의 인자 함수에 비동기 코드가 아닌 일반 코드가 들어갔을 경우 (ex. <code class=\"language-text\">resolve(1)</code>만 들어가있을 경우 ) 여기서 동기적인 <code class=\"language-text\">resolve(1)</code> 호출은 <code class=\"language-text\">Promise</code> 의 <code class=\"language-text\">resolve</code> 함수는 상태값과 귀결값(1) 만 셋팅해주고 나머지 done 이나 then 에서 등록된 함수를 내 상태(<code class=\"language-text\">Promise</code> 에 등록해두었던 함수, 즉 <code class=\"language-text\">Promise</code> 의 인자로 넘겼던 함수)가 귀결되었으므로 그 결과를 등록함수 인자로 넘겨서 실행시킨다.</li>\n<li>then 체이닝에서 첫번째 <code class=\"language-text\">then</code> 에 등록한 함수가 리턴 값이 <code class=\"language-text\">Promise</code> 값이라면 (<code class=\"language-text\">return new Promise()</code>)\nthen 에서 리턴할 <code class=\"language-text\">Promise</code> 의 resolve 함수에서 <code class=\"language-text\">Promise</code> 객체를 인자로 받고 <code class=\"language-text\">resolve(Promise객체)</code> 그 객체(<code class=\"language-text\">Promise</code>)가 다시 <code class=\"language-text\">resolve</code> 될때까지 지연시킨다. (결과에 <code class=\"language-text\">then</code> 함수가 있다면 그 <code class=\"language-text\">Promise</code> 결과 객체(<code class=\"language-text\">{status:&#39;&#39;, value:&#39;&#39;...}</code>)에 있는 then 을 수행하게 된다. <code class=\"language-text\">then</code> 을 수행할때 바로 앞서 실행하고 있는 <code class=\"language-text\">resolve</code> 를 등록해줌으로써 <code class=\"language-text\">Promise</code> 결과 객체의 <code class=\"language-text\">value</code> 값을 추출해 올수 있다. )</li>\n<li>resolve 함수에서 <code class=\"language-text\">getThen</code> 함수는 <code class=\"language-text\">result</code> 값이 <code class=\"language-text\">Promise</code> 객체일 경우 처리해주는 함수이다.</li>\n<li><code class=\"language-text\">doResolve</code> 해당 헬퍼 함수는 <code class=\"language-text\">Promise</code> 에 등록되는 <code class=\"language-text\">fn</code> 을 실행시켜줄 뿐 아니라 <code class=\"language-text\">resolve</code> 또는 <code class=\"language-text\">reject</code> 를 한번만 실행시킬수 있도록 <code class=\"language-text\">done</code> 이라는 변수로 보장해주는 함수이다. 여기서 <code class=\"language-text\">resolve</code> 는 <code class=\"language-text\">Promise</code> 안의 내장되어있는 <code class=\"language-text\">resolve</code> 함수로 일반 값 또는 또다른 <code class=\"language-text\">Promise</code> 의 리턴 값을 받을 수 있도록 분기 처리 해주는 함수이다.</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>고차함수의 특성(함수를 인자로 받을수 있고 리턴 할 수 있다.)을 이용해서 <code class=\"language-text\">Promise</code> 를 구현하고 있다.</li>\n<li><code class=\"language-text\">then</code> 으로 등록하는 함수 안에서 또다른 비동기를 구현한다면 <code class=\"language-text\">Promise</code> 로 감싸 주어야 한다. 그래야 비동기 결과를 가지고 그 다음 <code class=\"language-text\">then</code> 으로 등록된 함수에 인자로 넣어줄 수 있다.</li>\n<li><code class=\"language-text\">then</code> 을 수행시 마다 새로운 스코프 환경이 생긴다. <code class=\"language-text\">then</code> 을 수행한다는 것은 자신의 스코프에 등록되어 있는 함수를 수행 완료 즉, 결과값을 받아내고 나서 다음으로 그 결과 값을 가지고 호출되어야 하는 함수를 등록해줄 뿐만 아니라, 그 등록된 함수가 수행이 완료되고 또 다른 결과를 가지고 또 다른 함수 호출을 보장하기 <code class=\"language-text\">then</code> 의 실행 구문(후속 처리를 해야하는 함수를 등록하는 <code class=\"language-text\">done</code> 함수)을 <code class=\"language-text\">Promise</code> 로 감싸주고 리턴해준다. 그렇게 되면 두번째 <code class=\"language-text\">then</code> 함수에 등록되었던 함수가 해당 결과 값을 가지고 실행할 수 있다.</li>\n</ul>\n<p>아주 간단하게 말해서는 A 라는 함수는 A 라는 함수 동작 이후에 호출될 B 라는 함수를 호출 할 수 있는 함수 B-1(일종의 호출버튼: resolve 함수)를 매개변수로 받을 거라는 Promise 객체의 약속을 받고 유저는 A 함수를 작성 하고 Promise에 넘기게 된다. <code class=\"language-text\">A함수(B-1함수)</code></p>\n<p>이때, A 라는 함수 동작 이후에 B 라는 함수를 호출하게 만들어 주기 위해서 제 3자인 Promise 객체가 A 라는 함수와 B 라는 함수를 가지면서 A 라는 함수가 약속의 함수를 적절할때 호출(위에서 말했던 B-1 함수)해주면 Promise는 가지고 있던 B 라는 함수를 호출해 준다.</p>\n<p>다시 B 라는 함수가 끝났을 때 다시 C 라는 함수를 호출 할 수 있게 하기 위해서는</p>\n<p>위에서 언급했던 B 라는 함수를 호출할 수 있는 함수 B-1을 다시 새로운 C 함수를 호출 할 수 있는 함수(C-1)를 가진 Promise 에 등록을 해서 B가 호출이 되서 리턴이 되면 C 라는 함수를 호출 할 수 있는 함수 C-1을 호출하게끔 만든다. <code class=\"language-text\">C-1(B())</code></p>\n<p>즉, A가 호출이 되고 -> B 라는 함수를 호출할 수 있는 함수 B-1 호출 -> B 호출 후 리턴 -> B 리턴 값 받아서(리턴 및 귀결될때까지) -> C 라는 함수를 호출할 수 있는 함수 C-1 호출 -> C 호출 순서가 된다.</p>\n<p>이때, B가 비동기 호출을 지닌 함수라면 기다렸다가 B가 귀결되어서 리턴되면 C 라는 함수를 호출할 수 있는 함수가 그때 호출된다.</p>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<p><a href=\"https://www.promisejs.org/implementing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.promisejs.org/implementing/</a></p>","excerpt":"동기 javascript 비동기를 다루는데 쓰이는 Promise 라는 객체가 있다. Promise 를 다루는 방법은 많지만 실제로이 객체가 어떤 방식으로 움직이는지 그 구조를 파악하면서 Promise…","tableOfContents":"<ul>\n<li><a href=\"/make-promise.md/#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li><a href=\"/make-promise.md/#%ED%8B%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\">틀 만들기</a></li>\n<li><a href=\"/make-promise.md/#promise-%EA%B8%B0%EB%8A%A5%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Promise 기능함수 만들기</a></li>\n<li><a href=\"/make-promise.md/#%ED%97%AC%ED%8D%BC%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">헬퍼함수 작성하기</a></li>\n<li><a href=\"/make-promise.md/#promise-%EC%8B%A4%ED%96%89\">Promise 실행</a></li>\n<li><a href=\"/make-promise.md/#done-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9E%91%EC%84%B1\">done 메서드 작성</a></li>\n<li><a href=\"/make-promise.md/#done-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B6%84%EC%84%9D\">done 함수의 분석</a></li>\n<li><a href=\"/make-promise.md/#%EC%97%AC%EA%B8%B0%EA%B9%8C%EC%A7%80%EC%9D%98-%EC%9A%94%EC%95%BD\">여기까지의 요약</a></li>\n<li><a href=\"/make-promise.md/#then-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9E%91%EC%84%B1\">then 메서드 작성</a></li>\n<li><a href=\"/make-promise.md/#then-%ED%95%A8%EC%88%98-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0\">then 함수 파헤치기</a></li>\n<li><a href=\"/make-promise.md/#then-%EC%97%90%EC%84%9C-promise-%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%96%88%EC%9D%84-%EA%B2%BD%EC%9A%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\">then 에서 Promise 를 리턴했을 경우를 알아보자</a></li>\n<li><a href=\"/make-promise.md/#promise-%ED%95%A8%EC%88%98-%EC%A0%84%EC%B2%B4-%EC%9D%B4%ED%95%B4\">Promise 함수 전체 이해</a></li>\n<li><a href=\"/make-promise.md/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n<li><a href=\"/make-promise.md/#%EC%B6%9C%EC%B2%98\">출처</a></li>\n</ul>","fields":{"slug":"/make-promise.md/"},"frontmatter":{"title":"make promise","date":"Jul 27, 2018","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/make-promise.md/","series":[],"lastmod":"0001-01-01"}}}