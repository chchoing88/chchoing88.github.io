{"componentChunkName":"component---src-templates-post-tsx","path":"/javascript-object.md/","result":{"data":{"markdownRemark":{"html":"<p>번역 : <a href=\"http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/</a></p>\n<p>자바스크립트가 OOP(객체 지향 언어인지 함수형 언어인지 많은 혼란들이 있다. 실제로 Javascript 는 이 두가지 모두 사용할 수 있다.</p>\n<p>그러나 사람들은 자바스크립트 모든것이 객체인지?, 함수는 무엇인지 질문하곤 한다.\n이 포스트가 이것들을 명확하게 할것이다.</p>\n<h2 id=\"시작해보자\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"시작해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작해보자.</h2>\n<p>자바스크립는 여섯가지 원시 데이터 타입이 있다.</p>\n<ul>\n<li>Booleans - <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code></li>\n<li><code class=\"language-text\">null</code></li>\n<li><code class=\"language-text\">undefined</code></li>\n<li><code class=\"language-text\">number</code> - double-precision 64-bit float. <strong>There are no integers in JavaScript</strong>.</li>\n<li><code class=\"language-text\">string</code></li>\n<li><code class=\"language-text\">symbol</code> (new in ES6)</li>\n</ul>\n<p>원시타입 외에도, ECMAScript 스탠다드는 <code class=\"language-text\">object</code> 타입을 정의합니다. 이것은 간단하게 키 벨류의 저장소 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단하게는, 원시타입이 아닌 어떤것들을 <code class=\"language-text\">Object</code> 이라한다. 그리고 이것은 함수와 배열을 포함하고 있다.</p>\n<p>모든 함수들은 객체들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Primitive types</span>\n<span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">null</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">'bar'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// Non-primitive types</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfoo <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"원시타입\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%ED%83%80%EC%9E%85\" aria-label=\"원시타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시타입</h2>\n<p>원시타입 들은 원시타입에 붙어있는 메서드를 가지지 않는다. 그래서 절대 <code class=\"language-text\">undefined.toString()</code> 이라는 문법을 볼 수 없을 것이다. 또한 이 원시타입들은 값을 을 변화시키는 메서드를 지니고 있지 않기 때문에 원시타입들은 불변함의 성격을 지니고 있다.</p>\n<p>사용자들은 원시타입을 변수에 재 할당할수 있다. 하지만 그것은 새로운 값이 될것이다. 예전의 것이 아니며 변할수도 없다. 즉, 변수에 원시타입을 대입하는 것은 새로운 값이 되는것이지 이전의 값이 변한것이 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\nanswer<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\nanswer<span class=\"token punctuation\">.</span>foo <span class=\"token comment\">// undefined</span></code></pre></div>\n<blockquote>\n<p>원시 타입들은 불변함을 지닌다.</p>\n</blockquote>\n<p>게다가 원시 타입들은 참조값을 저장하는 객체와는 다르게 값 자체로 저장이 된다. 이것은 같은 검사를 수행할때 여향을 미친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"dog\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">14</span> <span class=\"token operator\">===</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<blockquote>\n<p>원시 타입들은 값으로 저장이 되고, 객체는 참조값으로 저장이 된다.</p>\n</blockquote>\n<h2 id=\"함수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98\" aria-label=\"함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수</h2>\n<p>함수는 <code class=\"language-text\">constructor</code> , <code class=\"language-text\">call</code> 과 같은 몇몇 특별한 프로퍼티들을 가진 object 타입이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">baz</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"foo\"</span>\nfoo<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 1</span></code></pre></div>\n<p>그리고 평범한 객체와 같이 새로운 프로퍼티들을 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">foo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token comment\">// \"baz\"</span></code></pre></div>\n<h3 id=\"methods\" style=\"position:relative;\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h3>\n<p>메서드는 함수처럼 행동하는 객체의 프로퍼티이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"baz\"</span></code></pre></div>\n<h2 id=\"생성자-함수\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 함수</h2>\n<p>만약 당신이 몇몇 같은 수행을 공유하는 객체를 가지고 있다면, 생성자 함수 내부에 그 로직을 놓을 수 있다. 그리고 생성자 함수로 그 객체들을 만들수 있다.</p>\n<p>생성자 함수는 다른 함수들과 다르지 않다. 이 함수는 new 키워드 뒤에 사용될 때 생성자 함수로 사용된다.</p>\n<blockquote>\n<p>모든 함수라도 생성자 함수가 될수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbar <span class=\"token comment\">// {}</span>\nbar <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span> <span class=\"token comment\">// true</span>\nbar <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>생성자 함수는 객체를 리턴 할 것이다. 여기 이 함수안에 있는 <code class=\"language-text\">this</code>는 객체에 새로운 프로퍼티를 할당하는데 사용 될 수 있다.</p>\n<p>그래서 만약 우리가 초기에 <code class=\"language-text\">bar</code>라는 프로퍼티에 <code class=\"language-text\">baz</code> 값을 할당하고 싶은 많은 객체를 만들길 원한다면 해당 로직을 지닌 새로운 <code class=\"language-text\">Foo</code>라는 로새로운 생성자를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> qux <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nqux <span class=\"token comment\">// { bar: \"baz\" }</span>\nqux <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span> <span class=\"token comment\">// true</span>\nqux <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// true</span></code></pre></div>\n<blockquote>\n<p>당신은 생성자 함수를 새로운 객체를 만드는데 사용할 수 있다.</p>\n</blockquote>\n<p>생성자 함수가 단순히 new 가 없이 일반 함수 <code class=\"language-text\">Foo()</code> 처럼 동작한다면 해당 함수 안에 있는 이 <code class=\"language-text\">this</code> 는 실행 컨텍스트에 해당되게 됩니다. 그래서 모든 함수들 밖에서 <code class=\"language-text\">Foo()</code>를 호출하게 되면 사실 <code class=\"language-text\">window</code> 객체 가 수정되게 될것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nwindow<span class=\"token punctuation\">.</span>bar <span class=\"token comment\">// \"baz\"</span></code></pre></div>\n<p>반대로, 일반 함수를 생성자 처럼 실행하게 된다면 이전에 바왔던 새로운 빈 객체가 나오게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"래퍼-객체\" style=\"position:relative;\"><a href=\"#%EB%9E%98%ED%8D%BC-%EA%B0%9D%EC%B2%B4\" aria-label=\"래퍼 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>래퍼 객체</h2>\n<p><code class=\"language-text\">String</code>, <code class=\"language-text\">Number</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Function</code> 등등 이런 함수들은 혼란을 가져온다.\n이것들을 <code class=\"language-text\">new</code> 와 함께 호출한다면 원시타입 대한 <em>wrpper object</em>가 생성된다.</p>\n<p><code class=\"language-text\">String</code>은 주어진 매개변수를 원시 문자열을 만들수 있는 글로벌 함수이다. 그것은 매개변수를 문자열로 변환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">1337</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1337\"</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"true\"</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"null\"</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"undefined\"</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'dog'</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"string\"</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">String</code>함수를 생성자 함수처럼 사용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">typeof</span> pet <span class=\"token comment\">// \"object\"</span>\npet <span class=\"token operator\">===</span> <span class=\"token string\">'dog'</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>그리고 이것은 문자열 <code class=\"language-text\">&quot;dog&quot;</code>를 표현하는 새로운 객체를 만들어 낸다. 다음과 같은 프로퍼티들을 지닌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"자동-박싱\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EB%B0%95%EC%8B%B1\" aria-label=\"자동 박싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 박싱</h2>\n<p>흥미로운 점은 기본 문자열과 객체 모두의 생성자가 둘 다 String 함수라는 것이다.\n훨씬 더 흥미로운 사실은 기본 문자열에서 <code class=\"language-text\">.constructor</code>를 호출할 수 있다는 점이다. 우리가 원시타입은 메서드를 가질수 없다고 알고있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span>\npet<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String <span class=\"token comment\">// true</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String <span class=\"token comment\">// true</span></code></pre></div>\n<p>이런 절차가 발생되는것을 우리는 <em>autoboxing</em>이라 부른다. 우리가 원시 타입안에서 메서드나 프로퍼티를 호출할 때, 자바스크립트는 먼저 일시적으로 <em>wrapper object</em>로 변환시킨다. 그리고 그 프로퍼티와 메서드에 원래의 값에 영향없이 접근한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\nfoo<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span>\nfoo <span class=\"token operator\">===</span> <span class=\"token string\">'bar'</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>위 예제에서 <code class=\"language-text\">length</code>프로퍼티에 접근한다. 자바스크립트는 <code class=\"language-text\">foo</code>를 wapper object 로 autoboxed 를 시킨다. 그리곤 해당 객체의 length 에 접근한다. 그리곤 그 객체를 버립니다. 이것은 foo 에 영향 없이 진행됩니다.</p>\n<p>이것이 우리가 원시타입에 프로퍼티를 접근하려들려 할때 자바스크립트가 에러를 뱉지 않는 이유이다. 그 원시 타입 자신을 건들지 않고 임시 래퍼 객체에 할당했기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span> <span class=\"token comment\">// Assignment done on temporary wrapper object</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>만약 <code class=\"language-text\">undefined</code>나 <code class=\"language-text\">null</code>같이 래퍼객체가 없는 타입으로 이같은 시도를 했다면 에러가 났을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span> <span class=\"token comment\">// Uncaught TypeError: Cannot set property 'bar' of null</span></code></pre></div>\n<h2 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h2>\n<ol>\n<li>자바스크립트의 모든것이 객체가 아니다.</li>\n<li>자바스크립트에는 6 가지 원시 타입이 있다.</li>\n<li>원시타입 모두가 객체는 아니다.</li>\n<li>함수는 특별한 타입의 객체이다.</li>\n<li>함수는 새로운 객체를 만드는데 사용될 수 있다.</li>\n<li>String, booleans 그리고 numbers 는 원시타입으로 대표될 수 있지만 객체이기도 하다.</li>\n<li>확실한 원시타입( strings. numbers, booleans ) 는 마치 객체처럼 보여지기도 하다. 이는 자바스크립트의 autoboxin 이라고 불리오는 특징 때문이다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">일부 의역이 들어간 경우도 있으므로 해당 원문의 내용과 조금 다를 수 있습니다. &lt;br/&gt;\n문제가 될 소지가 있다거나 혹은 수정이 필요한 사항이 있다면 있다면 issues 보내주세요.</code></pre></div>","excerpt":"번역 : http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/ 자바스크립트가 OOP(객체 지향 언어인지 함수형 언어인지 많은 혼란들이 있다. 실제로 Javascript…","tableOfContents":"<ul>\n<li><a href=\"/javascript-object.md/#%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EC%9E%90\">시작해보자.</a></li>\n<li><a href=\"/javascript-object.md/#%EC%9B%90%EC%8B%9C%ED%83%80%EC%9E%85\">원시타입</a></li>\n<li>\n<p><a href=\"/javascript-object.md/#%ED%95%A8%EC%88%98\">함수</a></p>\n<ul>\n<li><a href=\"/javascript-object.md/#methods\">Methods</a></li>\n</ul>\n</li>\n<li><a href=\"/javascript-object.md/#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\">생성자 함수</a></li>\n<li><a href=\"/javascript-object.md/#%EB%9E%98%ED%8D%BC-%EA%B0%9D%EC%B2%B4\">래퍼 객체</a></li>\n<li><a href=\"/javascript-object.md/#%EC%9E%90%EB%8F%99-%EB%B0%95%EC%8B%B1\">자동 박싱</a></li>\n<li><a href=\"/javascript-object.md/#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>","fields":{"slug":"/javascript-object.md/"},"frontmatter":{"title":"Javascript 의 모든것은 Object 이다? 아니다?","date":"Apr 01, 2019","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/javascript-object.md/","series":[],"lastmod":"0001-01-01"}}}