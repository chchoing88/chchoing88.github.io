{"componentChunkName":"component---src-templates-post-tsx","path":"/moving-between-object/","result":{"data":{"markdownRemark":{"html":"<p>해당 글은 <code class=\"language-text\">리팩토링 (코드 품질을 개선하는 객체지향 사고법)</code> 에서 발췌 했습니다. 코드 예제는 javascript로 전환하였습니다.</p>\n<p><strong>기능을 어디에 넣을지 판단</strong> 하는것은 중요하다.\n기능을 넣을 적절한 위치를 찾는 문제는 메서드 이동과 필드 이동을 실시해서 기능을 옮기면 해결된다. 이때, 필드 이동 부터 실시한후 메서드 이동을 실시하는것이 좋다.</p>\n<p>클래스가 방대해지는 원인은 대개 기능이 너무 많기 때문이다. 이럴때 클래스 추출을 실시해서 이런 많은 기능을 일부 분리해야한다.</p>\n<p>이 밖에 다양한 기능들을 알아보자.</p>\n<h2 id=\"메서드-이동-move-method\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%8F%99-move-method\" aria-label=\"메서드 이동 move method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 이동 (Move Method)</h2>\n<p>메서드가 자신이 속한 클래스보다 다른 클래스 기능을 더 많이 이용할 땐 그 메서드가 제일 많이 이용하는 클래스 안에서 비슷한 내용의 새 메서드를 작성하자.\n기존 메서드는 간단한 대리 메서드로 전환하든이 아예 삭제하자.</p>\n<p>메서드를 옮길지 확신이 서지 않을 때는 다른 메서드를 살펴본다. 다른 메서드를 옮길지를 판단하는 것이 대체로 더 쉽게 마련이다.</p>\n<h2 id=\"필드-이동-move-field\" style=\"position:relative;\"><a href=\"#%ED%95%84%EB%93%9C-%EC%9D%B4%EB%8F%99-move-field\" aria-label=\"필드 이동 move field permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필드 이동 (Move Field)</h2>\n<p>어떤 필드가 자신이 속한 클래스보다 다른 클래스에서 더 많이 사용될 때는 대상 클래스 안에 새 필드를 선언하고 그 필드 참조 부분을 전부 새 필드 참조로 수정하자.</p>\n<p>어떤 필드가 자신이 속한 클래스보다 다른 클래스에 있는 메서드를 더 많이 참조해서 정보를 이용한다면 그 필드릴 옮기는 것을 생각해보자.\n인터페이스에 따라 메서드를 옮기는 방법을 사용할 수도 있다. 하지만 메서드의 현재 위치가 적절하다고 판단되면 필드를 옮긴다.</p>\n<h3 id=\"예제-필드-캡슐화\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%ED%95%84%EB%93%9C-%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"예제 필드 캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 필드 캡슐화</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type\n    <span class=\"token comment\">// 아래 필드를 AccountType 으로 옮기려 한다. </span>\n    <span class=\"token comment\">// this._interestRate </span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">interestForAmount_days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//return this._interestRate * 10</span>\n    <span class=\"token keyword\">return</span> _type<span class=\"token punctuation\">.</span><span class=\"token function\">getInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// _interest 필드를 AccountType 클래스로 옮기려 한다.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// private </span>\n    <span class=\"token comment\">// 캡슐화</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate <span class=\"token operator\">=</span> arg\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getIntersetRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"예제-필드-자체-캡슐화\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%ED%95%84%EB%93%9C-%EC%9E%90%EC%B2%B4-%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"예제 필드 자체 캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 필드 자체 캡슐화</h3>\n<p>많은 메서드가 interestRate 필드를 사용한다면 다음과 같이 필드 자체 캡슐화를 실시한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">interestForAmount_days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate <span class=\"token operator\">=</span> arg\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 바꾸고 난 뒤에 다시 아래 처럼 코드를 바꾼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_interestRate\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">interestForAmount_days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">getInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setInterestRate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">setInterestRate</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"클래스-추출-extract-class\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B6%94%EC%B6%9C-extract-class\" aria-label=\"클래스 추출 extract class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 추출 (Extract Class)</h2>\n<p>두 클래스가 처리해야 할 기능이 하나의 클래스에 들어 있을 땐 새 클래스를 만들고 기존 클래스의 관련 필드와 메서드를 새 클래스로 옮기자.\n주로 함께 변화하거나 서로 유난히 의존적인 데이터의 일부분도 클래스로 떼어내기 좋다.\n이것을 판단하는 좋은 방법은 데이터나 메서드를 하나 제거하면 어떻게 될지, 다른 필드와 메서드를 추가하는 건 합리적이지 않은지 자문해보는 것이다.</p>\n<h3 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<p>아래 <code class=\"language-text\">Person</code> 클래스에서 전화번호 기능을 하나의 클래스로 떼어 낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeAreaCode\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeNumber\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 전화번호 기능을 하나의 클래스로 떼어 낼 수 있다.</span>\n  <span class=\"token comment\">// getTelephoneNumber() {</span>\n  <span class=\"token comment\">//   return _officeAreaCode + _officeNumber</span>\n  <span class=\"token comment\">// }</span>\n\n  <span class=\"token comment\">// getOfficeAreaCode() {</span>\n  <span class=\"token comment\">//   return _officeAreaCode</span>\n  <span class=\"token comment\">// }</span>\n\n  <span class=\"token comment\">//....</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 <code class=\"language-text\">Person</code> 클래스에서 Telephone 관련한 부분들은 <code class=\"language-text\">TelephoneNumber</code> 객체로 떼어내자. 그 후 관련 메서드 들도 옮기자.\n그 후에 생각해야 할 것은 새로운 클래스를 클라이언트에 어느 정도 공개할지 결정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TelephoneNumber</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_areaCode\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_number\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_areaCode\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_areaCode <span class=\"token operator\">=</span> code\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getTelephoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_areaCode<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_number\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_number <span class=\"token operator\">=</span> number\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TelephoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _name\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">getTelephoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone<span class=\"token punctuation\">.</span><span class=\"token function\">getTelephoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getOfficeTelephone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 새로 만든 <code class=\"language-text\">TelephoneNumber</code> 클래스를 공개하는 방식을 사용할땐 왜곡의 위험을 고려해야한다. </p>\n<ul>\n<li>모든 객체가 <code class=\"language-text\">TelephoneNumber</code> 클래스의 어느 부분이든 변경할 수 있음을 받아들인다. <code class=\"language-text\">TelephoneNumber</code> 클래스를 참조로 전환해서 <code class=\"language-text\">Person</code> 클래스가\n<code class=\"language-text\">TelephoneNumber</code> 클래스의 접근 지점이 된다. </li>\n<li>어느 주체이든 <code class=\"language-text\">Person</code> 클래스를 거치지 않고 <code class=\"language-text\">TelephoneNumber</code> 클래스의 값을 변경하지 못하게 한다. <code class=\"language-text\">TelephoneNumber</code>를 변경불가로 만들어야 한다.</li>\n<li><code class=\"language-text\">TelephoneNumber</code> 클래스를 외부로 전달하기 전에 복사한 후 변경불가로 만든다. 하지만 이 방법은 코드를 보는 이들이 값을 변경할 수 있다는 착각을 불러 일으킨다. 게다가 전화번호가 여기저기로 무수히 전달될 경우 클라이언트 간에 왜곡 문제가 발생할 수도 있다. </li>\n</ul>\n<h2 id=\"클래스-내용-직접-삽입-inline-class\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%82%B4%EC%9A%A9-%EC%A7%81%EC%A0%91-%EC%82%BD%EC%9E%85-inline-class\" aria-label=\"클래스 내용 직접 삽입 inline class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 내용 직접 삽입 (Inline Class)</h2>\n<p>클래스에 기능이 너무 적을땐 그 클래시의 모든 기능을 다른 클래스로 합쳐 넣고 원래의 클래스는 삭제하자.</p>\n<p>주로 클래스의 기능 대부분을 다른 곳으로 옮기는 리팩토리응ㄹ 실시해서 남은 기능이 거의 없어졌을 때 나타난다. 이럴 때는 이 작은 클래스를 가장 많이 사용하는 다른 클래스를 하나 고른후, 이 클래스를 거기에 합쳐야 한다.</p>\n<p>위에서 <code class=\"language-text\">Person</code> 객체의 기능이 많이 줄었다면 <code class=\"language-text\">TelephoneNumber</code> 클래스의 클라이언트를 찾아서 <code class=\"language-text\">Person</code> 클래스의 인터페이스를 사용하도록 다음과 같이 수정하자.\n즉, <code class=\"language-text\">Person</code> 클래스에 <code class=\"language-text\">TelephoneNumber</code> 클래스를 합친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TelephoneNumber 클래스에 모든 외부 공개 메서드를 Person 클래스에 선언하자.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone<span class=\"token punctuation\">.</span><span class=\"token function\">getAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone<span class=\"token punctuation\">.</span><span class=\"token function\">setAreaCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone<span class=\"token punctuation\">.</span><span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_officeTelephone<span class=\"token punctuation\">.</span><span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TelephoneNumber 클래스의 클라이언트를 찾아서 Person 클래스의 인터페이스를 사용하도록하자.</span>\n<span class=\"token keyword\">const</span> martin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmartin<span class=\"token punctuation\">.</span>getOfficeTelephone<span class=\"token punctuation\">.</span><span class=\"token function\">setAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'181'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Todo</span>\n<span class=\"token keyword\">const</span> martin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmartin<span class=\"token punctuation\">.</span><span class=\"token function\">setAreaCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'181'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 이후에 TelephoneNumber 클래스의 메서드와 필드를 하나씩 전부 이동하자. 텅빈 TelephoneNumber 클래스는 삭제하자.</p>\n<h2 id=\"대리-객체-은폐-hide-delegate\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EB%A6%AC-%EA%B0%9D%EC%B2%B4-%EC%9D%80%ED%8F%90-hide-delegate\" aria-label=\"대리 객체 은폐 hide delegate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대리 객체 은폐 (Hide Delegate)</h2>\n<p>클라이언트가 객체의 대리 클래스를 호출할 땐 대리 클래스를 감추는 메서드를 서버에 작성하자.</p>\n<p>캡슐화란 객체가 시스템의 다른 부분에 대한 정보의 일부만 알 수 있게 은폐하는 것을 뜻한다. 객체를 캡슐화하면 무언가를 변경할 때 그 변화를 전달해야 할 객체가 줄어들므로 변경하기 쉬워진다.</p>\n<p>클라이언트가 서버 객체의 필드 중 하나에 정의된 메서드를 호출할 때 그 클라이언트는 이 대리 객체에 관해 알아야 한다. 대리 객체가 변경될 때 클라이언트도 변경해야할 가능성이 있기 때문이다. 이런 의존성을 없애려면, 대리 객체를 감추는 간단한 위임 메서드를 서버에 두면 된다.</p>\n<p>아래에서 서버에 해당하는 것은 <code class=\"language-text\">Person</code>객체이다. 대리 객체는 <code class=\"language-text\">Department</code> 이다.</p>\n<h3 id=\"예제-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-1\" aria-label=\"예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_department <span class=\"token comment\">// Department</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getDepartment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_department\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setDepartment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_department <span class=\"token operator\">=</span> arg\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Department</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">manager</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_chargeCode\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_manager <span class=\"token operator\">=</span> manager <span class=\"token comment\">// Person</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_manager\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 코드가 있다고 했을때 어떤 사람의 팀장이 누군지 알아내려면 먼저 부서를 알아내고 나서 알아내야 한다.\n<code class=\"language-text\">manager = john.getDepartment().getManager()</code>\n이런 의존성을 줄이려면 Department 클래스를 클라이언트가 알 수 없게 감춰야 한다. 그러려면 Person 클래스에 다음과 같이 간단히 위임 메서드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> _department<span class=\"token punctuation\">.</span><span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> manager <span class=\"token operator\">=</span> john<span class=\"token punctuation\">.</span><span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 했다면 <code class=\"language-text\">Person</code> 클래스에 들어있는 <code class=\"language-text\">getDepartment</code> 읽기 메서드를 삭제하자.</p>\n<h2 id=\"과잉-중개-메서드-제거-remove-middle-man\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%9E%89-%EC%A4%91%EA%B0%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%9C%EA%B1%B0-remove-middle-man\" aria-label=\"과잉 중개 메서드 제거 remove middle man permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과잉 중개 메서드 제거 (Remove Middle Man)</h2>\n<p>클래스에 자잘한 위임이 너무 많을 땐 대리 객체를 클라이언트가 직접 호출하게 하자.</p>\n<p>위의 대리 객체 은폐 기법은 장점을 얻는 대신 단점도 생긴다. 클라이언트가 대리 개체의 새 기능을 사용해야 할 때마다 서버에 즉, Person 객체에 간단한 위임 메서드를 추가해야 한다는 점이다.\n여기서 서버개체 Person 객체는 그저 중개자에 불과하므로, 이때는 클라이언트가 대리 객체를 직접 호출하게 해야한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 다시 부활.</span>\n  <span class=\"token function\">getDepartment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _department\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 클라이언트가 대리 객체를 먼저 거치게끔 다음과 같이 수정하자.</span>\nmanager <span class=\"token operator\">=</span> john<span class=\"token punctuation\">.</span><span class=\"token function\">getDepartment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>편의상 일부 위임 메서드는 그대로 둬야 할 때도 있다. 대리 객체를 일부 클라이언트에게만 감추고 나머지 클라이언트에겐 공개해야 할 때도 있다. 그럴 때는 간단한 위임 메서드 중 일부를 그대로 내버려 두면 된다. </p>\n<h2 id=\"외래-클래스에-메서드-추가-introduce-foreign-method\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%9E%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%94%EA%B0%80-introduce-foreign-method\" aria-label=\"외래 클래스에 메서드 추가 introduce foreign method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외래 클래스에 메서드 추가 (Introduce Foreign Method)</h2>\n<p>사용 중인 서버 클래스에 메서드를 추가해야 하는데 그 클래스를 수정할 수 없을 땐 클라이언트 클래스 안에 서버 클래스의 인스턴스를 첫번째 인자로 받는 메서드를 작성하자.</p>\n<p>원본 클래스가 수정 가능하다면 그 기능의 메서드를 추가하면 된다. 하지만 원본 클래스를 수정할 수 없다면 그 메서드를 클라이언트 클래스 안에 작성해야 한다.</p>\n<h3 id=\"예제-2\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-2\" aria-label=\"예제 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<p>대금 결제일을 연기하는 원본 코드는 다음과 같다. 여기서 <code class=\"language-text\">previousEnd</code>가 서버 클래스이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newStart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>previousEnd<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> previousEnd<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> previousEnd<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 우변 코드를 뺴내어 메서드로 만들자.</span>\n<span class=\"token keyword\">const</span> newStart <span class=\"token operator\">=</span> <span class=\"token function\">nextDay</span><span class=\"token punctuation\">(</span>previousEnd<span class=\"token punctuation\">)</span>\n<span class=\"token function\">nextDay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"국소적-상속확장-클래스-사용\" style=\"position:relative;\"><a href=\"#%EA%B5%AD%EC%86%8C%EC%A0%81-%EC%83%81%EC%86%8D%ED%99%95%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9\" aria-label=\"국소적 상속확장 클래스 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>국소적 상속확장 클래스 사용</h2>\n<p>사용 중인 서버 클래스에 여러 개의 메서드를 추가해야 하는데 클래스를 수정할 수 없을 땐 새 클래스를 작성하고 그 안에 필요한 여러 개의 메서드를 작성하자.\n이 상속확장 클래스를 원본 클래스의 하위 클래스나 래퍼 클래스로 만들자.</p>\n<p>클래스 제작자도 신이 아니므로 개발자에게 필요한 메서드가 전부 든 클래스를 만드는건 불가능에 가깝다. 원본 클래스를 수정하는 것이 불가능할 때가 대부분이다.\n필요한 메서드 수가 3개 이상이면 필요한 메서드들을 적당한 곳에 모아둬야 한다.</p>\n<h3 id=\"예제-하위-클래스-사용\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9\" aria-label=\"예제 하위 클래스 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 하위 클래스 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">nextDay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Date 객체를 받아서 이용하는 메서드</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 위의 Client에 메서드를 두지말고 Date를 상속받아서 내가 필요한 메서드를 옮겨두자.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MfDateSub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dateString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>dateString<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">nextDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 더이상 date 객체를 받지 않아도 사용가능하다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"예제-래퍼-클래스-사용\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EB%9E%98%ED%8D%BC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9\" aria-label=\"예제 래퍼 클래스 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 래퍼 클래스 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MfDateWrap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dateString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>dateString<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 원본 Date 클래스의 모든 메서드를 위임하는 지루한 작업</span>\n  <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_original<span class=\"token punctuation\">.</span><span class=\"token function\">getYears</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 원본 Date 클래스에도 있는 equals</span>\n  <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>arg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MfDateWrap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">const</span> other <span class=\"token operator\">=</span> arg\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_original<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>_original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">nextDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 더이상 date 객체를 받지 않아도 사용가능하다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>래퍼 클래스화 방식을 사용할 때는 원본 클래스를 인자로 받는 <code class=\"language-text\">after(Date arg)</code> 메서드들을 처리하는 방법이 문제가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">aWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>aDate<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 동작함</span>\naWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>anotherWrapper<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 동작함</span>\naDate<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>aWrapper<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 돌아가질 않음</span></code></pre></div>\n<p>이런식으로 같은 이름의 메서드를 정의(재정의)하는 이유는 래퍼 클래스 사용 사실을 원본 클래스 사용 부분이 모르게 하기 위해서다.\n래퍼 클래스 사용 부분은 래퍼 클래스에 전혀 관여해선 안되며 원본과 래퍼를 동등하게 다룰 수 있어야 하므로 이방식이 좋다.\n하지만 래퍼 클래스 사용 사실을 완벽히 감추진 못한다. 문제는 <code class=\"language-text\">equals</code> 같은 특정 시스템 메서드에 있다. </p>\n<p><code class=\"language-text\">equals</code> 메서드는 대칭적으로 돌아가는 반면 이 전제에 어긋나는 코딩을 하면 각종 이상한 버그가 생길 것이다.\n따라서 이런 상황에서는 어쩔 수 없이 래퍼 클래스 사용 사실을 공개할 수 밖에 없다. <code class=\"language-text\">equalsDate</code> 메서드를 새로 만든다.</p>\n<p>결론은 기능을 재정의 하지 않는 이상, 하위클래스화 방식을 사용할 땐 이런 문제가 없다. 그러나 기능을 재정의하면 메서드를 검색할때 애를 먹게 된다.\n그냥 상속확장 클래스를 사용할 땐 메서드를 재정의하지 않고 그냥 메서드를 추가하자.</p>","excerpt":"해당 글은  에서 발췌 했습니다. 코드 예제는 javascript…","tableOfContents":"<ul>\n<li><a href=\"/ho_blog/moving-between-object/#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%8F%99-move-method\">메서드 이동 (Move Method)</a></li>\n<li>\n<p><a href=\"/ho_blog/moving-between-object/#%ED%95%84%EB%93%9C-%EC%9D%B4%EB%8F%99-move-field\">필드 이동 (Move Field)</a></p>\n<ul>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C-%ED%95%84%EB%93%9C-%EC%BA%A1%EC%8A%90%ED%99%94\">예제: 필드 캡슐화</a></li>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C-%ED%95%84%EB%93%9C-%EC%9E%90%EC%B2%B4-%EC%BA%A1%EC%8A%90%ED%99%94\">예제: 필드 자체 캡슐화</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/moving-between-object/#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B6%94%EC%B6%9C-extract-class\">클래스 추출 (Extract Class)</a></p>\n<ul>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C\">예제</a></li>\n</ul>\n</li>\n<li><a href=\"/ho_blog/moving-between-object/#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%82%B4%EC%9A%A9-%EC%A7%81%EC%A0%91-%EC%82%BD%EC%9E%85-inline-class\">클래스 내용 직접 삽입 (Inline Class)</a></li>\n<li>\n<p><a href=\"/ho_blog/moving-between-object/#%EB%8C%80%EB%A6%AC-%EA%B0%9D%EC%B2%B4-%EC%9D%80%ED%8F%90-hide-delegate\">대리 객체 은폐 (Hide Delegate)</a></p>\n<ul>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C-1\">예제</a></li>\n</ul>\n</li>\n<li><a href=\"/ho_blog/moving-between-object/#%EA%B3%BC%EC%9E%89-%EC%A4%91%EA%B0%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%9C%EA%B1%B0-remove-middle-man\">과잉 중개 메서드 제거 (Remove Middle Man)</a></li>\n<li>\n<p><a href=\"/ho_blog/moving-between-object/#%EC%99%B8%EB%9E%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%94%EA%B0%80-introduce-foreign-method\">외래 클래스에 메서드 추가 (Introduce Foreign Method)</a></p>\n<ul>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C-2\">예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/moving-between-object/#%EA%B5%AD%EC%86%8C%EC%A0%81-%EC%83%81%EC%86%8D%ED%99%95%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9\">국소적 상속확장 클래스 사용</a></p>\n<ul>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9\">예제: 하위 클래스 사용</a></li>\n<li><a href=\"/ho_blog/moving-between-object/#%EC%98%88%EC%A0%9C-%EB%9E%98%ED%8D%BC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9\">예제: 래퍼 클래스 사용</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/moving-between-object/"},"frontmatter":{"title":"(리팩토링) 객체 간의 기능 이동","date":"Mar 25, 2019","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/moving-between-object/","series":[],"lastmod":"0001-01-01"}}}