{"componentChunkName":"component---src-templates-post-tsx","path":"/testing-library/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기</h2>\n<p>atomic 으로 디자인된 컴포넌트와 react testing library 를 사용하면서 느낀점을 정리합니다.\n느낀점을 정리한 것이라고 꼭 이렇게 해야한다는 것은 아닙니다.</p>\n<p>테스팅을 진행해야 할때 가져야할 생각을 정리 합니다.</p>\n<ul>\n<li>컴포넌트 내에서 상세한 구현의 방법은 잊어야 합니다. 유저는 본인이 원하는 기능의 대한 실제 구현 방법을 생각하지 않습니다. 유저는 행하는 행위에 대해서 원하는 결과 값 또는 결과 행위에 대해서만 바랄 뿐입니다.</li>\n<li>컴포넌트를 생각하지 않고 실제 화면에 그려지는 DOM 또는 컨텐츠, 텍스트를 생각합니다.</li>\n<li>기획서가 있다면 페이지 별로 상세 기능을 뽑아 보고 그 페이지를 다시 organisms 단위로 나눠서 테스트 케이스를 짜면 될 듯 싶습니다.</li>\n<li>atomic 특징 상 organisms 단위에서는 통합테스트를 생각하고 그 이하로 부모가 모를 만한 로직을 지니고 있다면 자식들에 한해서 unit test를 진행합니다.</li>\n<li>organisms 단위에서 개선된 children 컴포넌트로 바꿨다거나 class 컴포넌트에서 function 컴포넌트로 바뀌었다거나 했어도 테스트는 유지 가능해야 합니다.</li>\n</ul>\n<h2 id=\"경험\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%ED%97%98\" aria-label=\"경험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경험</h2>\n<p>organisms 단위에서 테스팅을 진행 했을 경우 실제 고민 했던 것을 적어 봅니다.</p>\n<h3 id=\"일반-컴포넌트-일-때-무엇을-테스팅-해야-하는가\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9D%BC-%EB%95%8C-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"일반 컴포넌트 일 때 무엇을 테스팅 해야 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 컴포넌트 일 때 무엇을 테스팅 해야 하는가?</h3>\n<p>props의 형태에 따라 달라 지는 렌더링을 테스트 합니다.</p>\n<p>렌더링 테스트를 진행 할 때는 텍스트가 있는지 없는지 위주로 테스트를 진행 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;TotalStatusInfo />\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'데이터 제공 기준일을 받으면 \"데이터 제공 기준일\" 타이틀과 함께 해당 날짜를 보여줍니다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mockModifyTime<span class=\"token operator\">:</span> ModifyTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      start_date<span class=\"token operator\">:</span> <span class=\"token string\">\"2020-04-12\"</span><span class=\"token punctuation\">,</span>\n      end_date<span class=\"token operator\">:</span> <span class=\"token string\">\"2020-05-12\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>TotalStatusInfo modifyTime<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mockModifyTime<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TotalStatusInfo<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(데이터 제공 기준일 : 2020-04-12 ~ 2020-05-12)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>어떤 특정한 함수가 props 로 넘어 온다면 해당 함수를 실행 시킬 액션이 있을 것입니다.\n이때 두 가지로 확인이 가능 합니다.</p>\n<p>해당 컴포넌트가 비지니스 로직을 구현해야 하는 컴포넌트 라면 액션을 fire 해서 UI 의 변화를 감지한다.\n이를 통해 비지니스 로직을 구현합니다.</p>\n<p>해당 컴포넌트가 비지니스 로직을 구현하는 컴포넌트가 아닌 적절한 자식 컴포넌트에 넘겨주는 역할을 담당한다면  해당 함수가 필요한 인자와 같이 호출 되는지도 확인을 합니다.\n이때는 mock 함수를 활용합니다. <code class=\"language-text\">jest.fn()</code>\n이를 통해 적절한 컴포넌트에 넘겨주는 지 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FilterSection의 onClick props를 버튼 들에게 넘겨 버튼 클릭시 버튼 ID를 인자로 넘기면서 호출합니다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onClick <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> sampleTitle<span class=\"token punctuation\">,</span>\n    filterButtonList<span class=\"token operator\">:</span> sampleFilterButtonList<span class=\"token punctuation\">,</span>\n    onClick<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> aidButton <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>aidButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"자식-컴포넌트에서-usecontext를-사용한-컴포넌트가-있으면-어떻게-테스팅을-진행-해야-하는가\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-usecontext%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EA%B0%80-%EC%9E%88%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8C%85%EC%9D%84-%EC%A7%84%ED%96%89-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"자식 컴포넌트에서 usecontext를 사용한 컴포넌트가 있으면 어떻게 테스팅을 진행 해야 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자식 컴포넌트에서 useContext를 사용한 컴포넌트가 있으면 어떻게 테스팅을 진행 해야 하는가?</h3>\n<p>organisms 컴포넌트의 자식 컴포넌트에서 useContext를 사용을 했다면 organisms 컴포넌트만 render시 에러가 나게 됩니다. </p>\n<p>그래서 해당 ContextProvider 컴포넌트를 감싸서 render를 진행해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 중복 설정을 피하기 위해서 setup 함수를 만들어서 각 test 마다 필요한 설정을 활용합니다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> UfoStatusWidgetGroupProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utils <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ModalContextProvider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>UfoStatusWidgetGroup <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>UfoStatusWidgetGroup<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalContextProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>utils<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UfoStatusWidgetGroup props에 statusGroupData 넣었을시 각각의 수치가 렌더링 된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    statusGroupData<span class=\"token punctuation\">,</span>\n    isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10,000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,203,405\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"32.89\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"rxjs-ajax-를-사용한-컴포넌트는-어떻게-테스팅을-진행-해야-하는가\" style=\"position:relative;\"><a href=\"#rxjs-ajax-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8C%85%EC%9D%84-%EC%A7%84%ED%96%89-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"rxjs ajax 를 사용한 컴포넌트는 어떻게 테스팅을 진행 해야 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rxjs ajax 를 사용한 컴포넌트는 어떻게 테스팅을 진행 해야 하는가?</h3>\n<p>가장 많이 고민을 했던 부분입니다.</p>\n<p>기존 axios 를 사용 했다면 node_modules를 mocking 하는 방법과 <code class=\"language-text\">axios-mock-adapter</code> 를 선택 할 수 있겠습니다만, 저는 rxjs 에 내장되어 있는 ajax 를 사용했기 때문에 rxjs 의 ajax를 mocking 하는 방법을 찾아 보기로 했습니다.</p>\n<p>그 결과 찾을 수 없었습니다. ( 혹시 아시는 분은 알려주시면 감사 하겠습니다. )\n가장 마지막까지 시도 했던 방법은 <code class=\"language-text\">jest.mock()</code> 함수로 ajax를 mocking 하는 방법 이였습니다.\n<code class=\"language-text\">jest.doMock()</code> 함수를 써봐도 잘 되진 않았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rxjs/ajax'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    __esModule<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    ajax<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드 <code class=\"language-text\">ajax: jest.fn(() =&gt; [])</code> 에서 사실 return 해야 하는 타입은 <code class=\"language-text\">Observable&lt;AjaxResponse&gt;</code> 가 되어야 했습니다. 타입이 안맞아서 에러가 떨어집니다.\n<code class=\"language-text\">dynamic import</code> 를 활용해서 다음과 같이 Observable 까진 생각해 볼 수 있었습니다만, <code class=\"language-text\">AjaxResponse</code> 타입의 Mock을 어떻게 구현을 해야 할지 몰랐습니다.\n<code class=\"language-text\">dynamic import</code> 를 활용하는 것은 <code class=\"language-text\">jest.mock</code>은 <code class=\"language-text\">babel-jest</code> 로 인해서 자동으로 import 문 위로 hoist 되기 때문에 활용 한 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rxjs/ajax'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// mock 할때 async 함수를 넣으면 안된다.</span>\n  <span class=\"token comment\">// const {of} = import('ajax')</span>\n  <span class=\"token comment\">// or</span>\n  <span class=\"token comment\">// const {AjaxResponse} = import('rxjs/ajax')</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    __esModule<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ajax: jest.fn(() => of([])) // Observble 타입까진 만들 수 있는데 AjaxResponse 타입은 ??</span>\n    ajax<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AjaxResponse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">??</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그래서 생각한 방법은 rxjs/ajax 를 mocking 하는 것이 아닌 xhr 을 mocking 하는 것입니다.</p>\n<p><code class=\"language-text\">import mock from &quot;xhr-mock&quot;;</code> 를 활용하는 방법 이였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;TagOccupancyCard />\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// replace the real XHR object with the mock XHR object before each test</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mock<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// put the real XHR object back and clear the mocks after each test</span>\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mock<span class=\"token punctuation\">.</span><span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> TagOccupancyCardProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> utils <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ModalContextProvider<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>TagOccupancyCard <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TagOccupancyCard<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalContextProvider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>utils<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mock<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/Test</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n      reason<span class=\"token operator\">:</span> <span class=\"token string\">\"Created\"</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> <span class=\"token string\">\"UFO\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n          tag_ratio<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n          partname<span class=\"token operator\">:</span> <span class=\"token string\">\"호잇\"</span><span class=\"token punctuation\">,</span>\n          fullname<span class=\"token operator\">:</span> <span class=\"token string\">\"호잇\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          parent<span class=\"token operator\">:</span> <span class=\"token string\">\"UFO\"</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token string\">\"P10\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token operator\">:</span> <span class=\"token number\">47.18</span><span class=\"token punctuation\">,</span>\n          tag_ratio<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n          partname<span class=\"token operator\">:</span> <span class=\"token string\">\"아잇\"</span><span class=\"token punctuation\">,</span>\n          fullname<span class=\"token operator\">:</span> <span class=\"token string\">\"아잇\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      currentFilterData<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"adid\"</span><span class=\"token punctuation\">,</span>\n        isDisable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        isNew<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">\"adid\"</span><span class=\"token punctuation\">,</span>\n        isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호잇\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아잇\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따로 rxjs/ajax 를 mocking 해주는 라이브러리는 못 찾았습니다.</p>\n<p>생각해 보면 좀 더 원시적인 xhr를 mocking 해서 rxjs를 쓰던 axios를 쓰던 관계 없이 테스트가 통과 했었어야 하지 않았나 싶습니다.</p>\n<h3 id=\"highchartjs-를-활용해서-차트를-그리는-컴포넌트-테스트-중에-highchartjs-error-26-이-오류로-나온다면\" style=\"position:relative;\"><a href=\"#highchartjs-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%B0%A8%ED%8A%B8%EB%A5%BC-%EA%B7%B8%EB%A6%AC%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A4%91%EC%97%90-highchartjs-error-26-%EC%9D%B4-%EC%98%A4%EB%A5%98%EB%A1%9C-%EB%82%98%EC%98%A8%EB%8B%A4%EB%A9%B4\" aria-label=\"highchartjs 를 활용해서 차트를 그리는 컴포넌트 테스트 중에 highchartjs error 26 이 오류로 나온다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>highchart.js 를 활용해서 차트를 그리는 컴포넌트 테스트 중에 highchart.js error 26 이 오류로 나온다면</h3>\n<p>highchart.js 26 번 에러를 찾아보면 이런 글이 나옵니다.</p>\n<p><a href=\"https://www.highcharts.com/errors/26/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.highcharts.com/errors/26/</a></p>\n<ul>\n<li>WebGL not supported, and no fallback module included</li>\n</ul>\n<p>이게 왜 뜨는지 다음과 같이 검색했지만 소득이 없었습니다.</p>\n<ul>\n<li>jest highchart error 26</li>\n<li>jsdom webgl</li>\n</ul>\n<p>등 여러 검색 결과에도 찾을 수 없었습니다. 결국 node_modules로 왜 26번 에러가 뜨는지 확인해 본 결과\nhightchart 의 boost 모듈에서 에러가 발생하는 것을 알 수 있었습니다.\n차트를 그릴 때, 다음과 같은 옵션을 썼다면</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">{</span>\n  boost<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    useGPUTranslations<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같은 에러를 찾아 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Debugger attached.\n  console.log\n    Highcharts error #26: www.highcharts.com/errors/26/\n\n      at defaultHandler (node_modules/highcharts/highcharts.src.js:469:21)</code></pre></div>\n<p>에러를 안뜨게 하는 방법은 못찾았지만 생각해보면 브라우저 환경에서 정확히 테스트를 하는 것이 아니기 때문에 무시하기로 했습니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>앞으로 계속 테스트를 작성해 나가면서 정리하고 몇 가지 규칙을 세워두면 TDD 문화를 정착 해 나갈 수 있지 않을까 생각합니다.\n계속 업데이트 됩니다.</p>","excerpt":"동기 atomic 으로 디자인된 컴포넌트와 react testing library…","tableOfContents":"<ul>\n<li><a href=\"/ho_blog/testing-library/#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li>\n<p><a href=\"/ho_blog/testing-library/#%EA%B2%BD%ED%97%98\">경험</a></p>\n<ul>\n<li><a href=\"/ho_blog/testing-library/#%EC%9D%BC%EB%B0%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9D%BC-%EB%95%8C-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\">일반 컴포넌트 일 때 무엇을 테스팅 해야 하는가?</a></li>\n<li><a href=\"/ho_blog/testing-library/#%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-usecontext%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EA%B0%80-%EC%9E%88%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8C%85%EC%9D%84-%EC%A7%84%ED%96%89-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\">자식 컴포넌트에서 useContext를 사용한 컴포넌트가 있으면 어떻게 테스팅을 진행 해야 하는가?</a></li>\n<li><a href=\"/ho_blog/testing-library/#rxjs-ajax-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8C%85%EC%9D%84-%EC%A7%84%ED%96%89-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\">rxjs ajax 를 사용한 컴포넌트는 어떻게 테스팅을 진행 해야 하는가?</a></li>\n<li><a href=\"/ho_blog/testing-library/#highchartjs-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%B0%A8%ED%8A%B8%EB%A5%BC-%EA%B7%B8%EB%A6%AC%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A4%91%EC%97%90-highchartjs-error-26-%EC%9D%B4-%EC%98%A4%EB%A5%98%EB%A1%9C-%EB%82%98%EC%98%A8%EB%8B%A4%EB%A9%B4\">highchart.js 를 활용해서 차트를 그리는 컴포넌트 테스트 중에 highchart.js error 26 이 오류로 나온다면</a></li>\n</ul>\n</li>\n<li><a href=\"/ho_blog/testing-library/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","fields":{"slug":"/testing-library/"},"frontmatter":{"title":"React testing library 사용기 (ing)","date":"May 23, 2020","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/testing-library/","series":[],"lastmod":"0001-01-01"}}}