{"componentChunkName":"component---src-templates-post-tsx","path":"/react-rxjs.md/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기</h2>\n<ul>\n<li>react와 rxjs를 함께 사용할 때 어떻게 사용 할 수 있을까?</li>\n</ul>\n<h2 id=\"react-컴포넌트를-update-할-수-있는-트리거들\" style=\"position:relative;\"><a href=\"#react-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-update-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%8A%B8%EB%A6%AC%EA%B1%B0%EB%93%A4\" aria-label=\"react 컴포넌트를 update 할 수 있는 트리거들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 컴포넌트를 update 할 수 있는 트리거들</h2>\n<ul>\n<li>function Component 의 hooks (useState, useEffect, useReducer 등등..)</li>\n<li>class Component 의 setState 메서드</li>\n<li>forceUpdate() 메서드</li>\n</ul>\n<h2 id=\"react-hooks-역할\" style=\"position:relative;\"><a href=\"#react-hooks-%EC%97%AD%ED%95%A0\" aria-label=\"react hooks 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React hooks 역할</h2>\n<ul>\n<li>상태값의 저장</li>\n<li>component의 lifecycle에 대한 반응</li>\n<li>상태 변화에 따른 재 렌더링 유발</li>\n</ul>\n<h2 id=\"rxjs의-subject\" style=\"position:relative;\"><a href=\"#rxjs%EC%9D%98-subject\" aria-label=\"rxjs의 subject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RxJS의 Subject</h2>\n<ul>\n<li><code class=\"language-text\">Subject</code> 는 <code class=\"language-text\">EventEmitter</code> 와 같다.</li>\n<li>여러 관찰자에게 멀티 캐스팅 하는 유일한 방법.</li>\n<li><code class=\"language-text\">Subject</code> 는 <code class=\"language-text\">observable</code> 이고 <code class=\"language-text\">observer</code> 다.</li>\n<li><code class=\"language-text\">Subject</code> 는 <code class=\"language-text\">observable</code> 과 많은 <code class=\"language-text\">observer</code> 들 사이에서 bridge/proxy 형태로 행동할수 있다.</li>\n<li>이 행동은 다수의 <code class=\"language-text\">observer</code> 들에게 같은 <code class=\"language-text\">observable</code> 실행을 공유 할수가 있다.</li>\n<li>뒤 늦게 <code class=\"language-text\">subscribe</code> 를 하면 가장 최근 방출된 값을 가져올 수 있다.</li>\n</ul>\n<h2 id=\"store를-외부로-따로-관리할-경우\" style=\"position:relative;\"><a href=\"#store%EB%A5%BC-%EC%99%B8%EB%B6%80%EB%A1%9C-%EB%94%B0%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"store를 외부로 따로 관리할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>store를 외부로 따로 관리할 경우</h2>\n<h3 id=\"data의-흐름\" style=\"position:relative;\"><a href=\"#data%EC%9D%98-%ED%9D%90%EB%A6%84\" aria-label=\"data의 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>data의 흐름</h3>\n<ul>\n<li>전역에서 필요한 <code class=\"language-text\">state</code>는 외부에서 관리한다.</li>\n<li>이 <code class=\"language-text\">state</code>가 변하는걸 알리기 위해 <code class=\"language-text\">Observable</code>로 만들어 준다. (<code class=\"language-text\">BehaviorSubject</code>)</li>\n<li>관찰이 필요한 react function Component에서는 <code class=\"language-text\">BehaviorSubject</code>(이때는 <code class=\"language-text\">Observable</code> 역할) 값을 구독하고 해당 값을 <code class=\"language-text\">useState</code>로 관리한다. ( 이를 도와줄 custom Hooks를 만든다. : <code class=\"language-text\">useObservable</code> )</li>\n<li><code class=\"language-text\">state</code>가 새롭게 바뀌었을 때 <code class=\"language-text\">setState</code> 로 <code class=\"language-text\">useState</code>의 <code class=\"language-text\">state</code> 변경함으로써 react function Component 에서 업데이트가 발생 되게 된다. </li>\n<li>전역 <code class=\"language-text\">state</code> 값을 바꾸기 위해서는 <code class=\"language-text\">BehaviorSubject</code>(이때는 <code class=\"language-text\">Observer</code> 역할) 값을 가지고 <code class=\"language-text\">next(value)</code> 메서드를 호출한다.</li>\n</ul>\n<h3 id=\"예시-코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C\" aria-label=\"예시 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// hooks (useObservable)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Rx <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> useObservable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>observable<span class=\"token operator\">:</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sub <span class=\"token operator\">=</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>setState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sub<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>observable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 종료 시점, pipe,</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useObservable<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ITodoItem<span class=\"token punctuation\">,</span> ITodoStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BehaviorSubject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoItem</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ITodoItem</span> <span class=\"token punctuation\">{</span>\n  todo<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  isActive<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> isActive<span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo <span class=\"token operator\">=</span> todo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> isActive<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoStore</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ITodoStore</span> <span class=\"token punctuation\">{</span>\n  todoList$<span class=\"token operator\">:</span> BehaviorSubject<span class=\"token operator\">&lt;</span>ITodoItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoList<span class=\"token operator\">:</span> ITodoItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoList$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// action</span>\n  <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todo<span class=\"token punctuation\">,</span> isActive <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ITodoItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newTodo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodoItem</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> isActive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newTodoList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>todoList$<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoList$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>newTodoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TODO_LIST</span><span class=\"token operator\">:</span> ITodoItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> todo<span class=\"token operator\">:</span> <span class=\"token string\">\"typescript 학습하기\"</span><span class=\"token punctuation\">,</span> isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todoStore<span class=\"token operator\">:</span> ITodoStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodoStore</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TODO_LIST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> todoStore<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// react function component</span>\n<span class=\"token comment\">// Todo</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TodoList <span class=\"token keyword\">from</span> <span class=\"token string\">\"./TodoList\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useObservable <span class=\"token keyword\">from</span> <span class=\"token string\">\"../hooks/useObservable\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> todoStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store/TodoStore\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ITodoItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todoList <span class=\"token operator\">=</span> useObservable<span class=\"token operator\">&lt;</span>ITodoItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>todoStore<span class=\"token punctuation\">.</span>todoList$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>TodoList todoList<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoList<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TodoList<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Todo<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TodoList</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TodoItem <span class=\"token keyword\">from</span> <span class=\"token string\">\"./TodoItem\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ITodoItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../types\"</span><span class=\"token punctuation\">;</span>\n\ntype TodoListProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  todoList<span class=\"token operator\">:</span> ITodoItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todoList <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> TodoListProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>todoList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItem<span class=\"token operator\">:</span> ITodoItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>TodoItem key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">}</span> todoItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TodoItem<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nTodoList<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  todoList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoList<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TodoItem</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ITodoItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../types\"</span><span class=\"token punctuation\">;</span>\n\ntype TodoItemProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  todoItem<span class=\"token operator\">:</span> ITodoItem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todoItem <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> TodoItemProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoItem<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"store를-외부로-따로-두지-않고-hooks로-관리-할-경우\" style=\"position:relative;\"><a href=\"#store%EB%A5%BC-%EC%99%B8%EB%B6%80%EB%A1%9C-%EB%94%B0%EB%A1%9C-%EB%91%90%EC%A7%80-%EC%95%8A%EA%B3%A0-hooks%EB%A1%9C-%EA%B4%80%EB%A6%AC-%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"store를 외부로 따로 두지 않고 hooks로 관리 할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>store를 외부로 따로 두지 않고 hooks로 관리 할 경우</h2>\n<h3 id=\"react-hooks-규칙\" style=\"position:relative;\"><a href=\"#react-hooks-%EA%B7%9C%EC%B9%99\" aria-label=\"react hooks 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React hooks 규칙</h3>\n<p>상태를 저장하는 custom hooks 을 만들 경우 내부에는 rxjs 코드가 없도록 유지합니다. 이유는 이런 hooks들은 rxjs의 디펜던시를 두지 않고 재 사용성을 특징으로 만들기 위함입니다.</p>\n<p>대신 rxjs를 다뤄야 하는 custom hooks는 따로 만듭니다.</p>\n<h3 id=\"rxjs-역할\" style=\"position:relative;\"><a href=\"#rxjs-%EC%97%AD%ED%95%A0\" aria-label=\"rxjs 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rxjs 역할</h3>\n<ul>\n<li>hooks에 저장된 상태에 따른 비동기 처리와 같은 side effect(부수효과) 처리 로직\nex) API 호출, location 허용</li>\n</ul>\n<h3 id=\"side-effect를-rxjs로-다룰때의-장점\" style=\"position:relative;\"><a href=\"#side-effect%EB%A5%BC-rxjs%EB%A1%9C-%EB%8B%A4%EB%A3%B0%EB%95%8C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"side effect를 rxjs로 다룰때의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>side effect를 rxjs로 다룰때의 장점</h3>\n<ul>\n<li>언제 발생될지 모르는 데이터 또는 연속된 데이터 스트림을 다루기에 용이\nex) 연속된 같은 API 호출에서 가장 최신 호출의 데이터를 가져와서 view에 반영</li>\n<li>여러 side effect를 모아서 일괄 처리에 용이\nex) 여러 API 호출의 응답이 다 모였을 때 view 반영 및 에러처리</li>\n</ul>\n<h3 id=\"예시-코드-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C-1\" aria-label=\"예시 코드 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// useTab.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ITabItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setActiveByID <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> useTab<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>tabDataList<span class=\"token operator\">:</span> ITabItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tabList<span class=\"token punctuation\">,</span> setTabList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>ITabItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>tabDataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Computed 한 값</span>\n  <span class=\"token comment\">// 현재 탭 객체</span>\n  <span class=\"token keyword\">const</span> currentTabData <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> activeIndex <span class=\"token operator\">=</span> tabList<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabData</span> <span class=\"token operator\">=></span> tabData<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> tabList<span class=\"token punctuation\">[</span>activeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tabList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 탭 눌렀을때</span>\n  <span class=\"token keyword\">const</span> onHandleTabClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>tabId<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTabData<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> tabId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTabList</span><span class=\"token punctuation\">(</span>setActiveByID<span class=\"token operator\">&lt;</span>ITabItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>tabId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>currentTabData<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    currentTabData<span class=\"token punctuation\">,</span>\n    tabList<span class=\"token punctuation\">,</span>\n    onHandleTabClick\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useTab<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// useApiObservable.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable<span class=\"token punctuation\">,</span> Subject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> switchMap<span class=\"token punctuation\">,</span> tap<span class=\"token punctuation\">,</span> filter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs/operators\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> IAPIResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> useApiObservable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">api$</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Observable<span class=\"token operator\">&lt;</span>IAPIResponse<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>IAPIResponse<span class=\"token punctuation\">,</span> Subject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>IAPIResponse<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    success<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> current<span class=\"token operator\">:</span> subject$ <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sub <span class=\"token operator\">=</span> subject$\n      <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">triggerData</span> <span class=\"token operator\">=></span> triggerData <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">beforeState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            success<span class=\"token operator\">:</span> beforeState<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">,</span>\n            error<span class=\"token operator\">:</span> beforeState<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span>\n            isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">api$</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>setState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sub<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>subject$<span class=\"token punctuation\">,</span> api$<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// return { ...state, subject$ };</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> subject$<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useApiObservable<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 사용</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tabList<span class=\"token punctuation\">,</span> onHandleTabClick<span class=\"token punctuation\">,</span> currentTabData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTab</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">TAB_OCCUPANCY_LIST</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>occupancyState<span class=\"token punctuation\">,</span> subject$<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useApiObservable<span class=\"token operator\">&lt;</span>\n    IOccupancyApiFetchParameter\n  <span class=\"token operator\">></span><span class=\"token punctuation\">(</span>occupancyApi<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// currentTabData가 변경 되었을 때 api 스트림에 값 방출</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    subject$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> currentTabData<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>subject$<span class=\"token punctuation\">,</span> currentTabData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"추가적으로-고려해야-할-점\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%A0%90\" aria-label=\"추가적으로 고려해야 할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가적으로 고려해야 할 점</h2>\n<ul>\n<li>다양한 종류의 rxjs 의 operation 조합을 pipe로 따로 관리하자.</li>\n<li>어느 때고 필요하다면 구독을 취소 시킬 수 있어야 한다.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.bitovi.com/blog/rxjs-with-react-pt-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.bitovi.com/blog/rxjs-with-react-pt-1</a></li>\n</ul>\n<h2 id=\"전체-코드-store-외부에-두었을-때만\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C-store-%EC%99%B8%EB%B6%80%EC%97%90-%EB%91%90%EC%97%88%EC%9D%84-%EB%95%8C%EB%A7%8C\" aria-label=\"전체 코드 store 외부에 두었을 때만 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드 (store 외부에 두었을 때만)</h2>\n<ul>\n<li><a href=\"https://github.com/chchoing88/ts-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/chchoing88/ts-react</a></li>\n</ul>","excerpt":"동기 react와 rxjs를 함께 사용할 때 어떻게 사용 할 수 있을까? React 컴포넌트를 update 할 수 있는 트리거들 function Component 의 hooks (useState, useEffect, useReducer…","tableOfContents":"<ul>\n<li><a href=\"/react-rxjs.md/#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li><a href=\"/react-rxjs.md/#react-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-update-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%8A%B8%EB%A6%AC%EA%B1%B0%EB%93%A4\">React 컴포넌트를 update 할 수 있는 트리거들</a></li>\n<li><a href=\"/react-rxjs.md/#react-hooks-%EC%97%AD%ED%95%A0\">React hooks 역할</a></li>\n<li><a href=\"/react-rxjs.md/#rxjs%EC%9D%98-subject\">RxJS의 Subject</a></li>\n<li>\n<p><a href=\"/react-rxjs.md/#store%EB%A5%BC-%EC%99%B8%EB%B6%80%EB%A1%9C-%EB%94%B0%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%A0-%EA%B2%BD%EC%9A%B0\">store를 외부로 따로 관리할 경우</a></p>\n<ul>\n<li><a href=\"/react-rxjs.md/#data%EC%9D%98-%ED%9D%90%EB%A6%84\">data의 흐름</a></li>\n<li><a href=\"/react-rxjs.md/#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C\">예시 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react-rxjs.md/#store%EB%A5%BC-%EC%99%B8%EB%B6%80%EB%A1%9C-%EB%94%B0%EB%A1%9C-%EB%91%90%EC%A7%80-%EC%95%8A%EA%B3%A0-hooks%EB%A1%9C-%EA%B4%80%EB%A6%AC-%ED%95%A0-%EA%B2%BD%EC%9A%B0\">store를 외부로 따로 두지 않고 hooks로 관리 할 경우</a></p>\n<ul>\n<li><a href=\"/react-rxjs.md/#react-hooks-%EA%B7%9C%EC%B9%99\">React hooks 규칙</a></li>\n<li><a href=\"/react-rxjs.md/#rxjs-%EC%97%AD%ED%95%A0\">rxjs 역할</a></li>\n<li><a href=\"/react-rxjs.md/#side-effect%EB%A5%BC-rxjs%EB%A1%9C-%EB%8B%A4%EB%A3%B0%EB%95%8C%EC%9D%98-%EC%9E%A5%EC%A0%90\">side effect를 rxjs로 다룰때의 장점</a></li>\n<li><a href=\"/react-rxjs.md/#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C-1\">예시 코드</a></li>\n</ul>\n</li>\n<li><a href=\"/react-rxjs.md/#%EC%B6%94%EA%B0%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%A0%90\">추가적으로 고려해야 할 점</a></li>\n<li><a href=\"/react-rxjs.md/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n<li><a href=\"/react-rxjs.md/#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C-store-%EC%99%B8%EB%B6%80%EC%97%90-%EB%91%90%EC%97%88%EC%9D%84-%EB%95%8C%EB%A7%8C\">전체 코드 (store 외부에 두었을 때만)</a></li>\n</ul>","fields":{"slug":"/react-rxjs.md/"},"frontmatter":{"title":"React with RxJS","date":"Jan 14, 2020","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/react-rxjs.md/","series":[],"lastmod":"0001-01-01"}}}