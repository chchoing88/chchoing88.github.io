{"componentChunkName":"component---src-templates-post-tsx","path":"/typescript-react.md/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h2>\n<p>creact react app 로 typescript로 만들어진 템플릿을 설치해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  npx create-react-app my-app --template typescript</code></pre></div>\n<h2 id=\"함수-선언식-component\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EC%8B%9D-component\" aria-label=\"함수 선언식 component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언식 Component</h2>\n<p>함수형 component를 만드는데는 대게 화살표 함수형으로 만들곤 했었습니다.</p>\n<p>이때 사용할 수 있는 타입은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> CustomComponentProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> CustomComponent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>CustomComponentProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React.FC 타입을 사용하게 되면 장 단점이 있습니다.</p>\n<p>장점으로는 children이나 static 컴포넌트 프로퍼티들 ( defaultProps, propTypes, contextTypes, displayName ) 이 자동 완성이 지원된다는 점입니다.</p>\n<p>하지만 단점으로는 다음과 같습니다.</p>\n<ol>\n<li>defaultProps 설정이 유효하지 않다는 점입니다. defaultProps 설정을 해도 컴포넌트를 사용할 시에 해당 props를 전달하지 않으면 컴파일 에러가 뜹니다.</li>\n<li>children 이 \"?:(optional)\" 으로 들어가 있기 때문에 명시적으로 children이 들어가야 하는지 아니면 안들어가도 되는지를 알 수 가 없습니다.</li>\n</ol>\n<p>하여 함수형 컴포넌트를 만들 때는 다음과 같이 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> CustomComponentProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CustomComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> CustomComponentProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CustomComponent</code></pre></div>\n<h2 id=\"component-props-type\" style=\"position:relative;\"><a href=\"#component-props-type\" aria-label=\"component props type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component props type</h2>\n<p>component의 props의 타입을 지정해 두면 component를 사용할 시에 코드 어시스트의 혜택을 얻을 수 있습니다. </p>\n<p>또한 유지보수시 잘못된 props를 넣거나 다른 타입의 props를 할당하는 것을 방지 할 수 있습니다. </p>\n<p>이때 interface 또는 type alias 방법을 사용할 수 있습니다. </p>\n<h3 id=\"type-alias-와-interface-차이점\" style=\"position:relative;\"><a href=\"#type-alias-%EC%99%80-interface-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"type alias 와 interface 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>type alias 와 interface 차이점</h3>\n<ol>\n<li>class에 implement 문을 작성할 시 type alias 도 가능하지만 \"union\" 문이 들어간 type alias는 허용하지 않습니다. </li>\n<li>interface에 extends 문을 작성할 시 type alias 도 가능하지만 \"union\" 문이 들어간 type alias는 허용하지 않습니다.</li>\n<li>type alias 는 declaration merging 이 되지 않습니다. </li>\n</ol>\n<p>대게 React와 props와 state를 type alias로 타입 설정 하길 권장합니다. 하여 여기서 기본적으로는 type alias 방법을 사용합니다. 이유는 다음과 같습니다 .</p>\n<ol>\n<li>더 적은 타이핑</li>\n<li>일관성 있는 문법 제공 ( interface와 type alias로 된 모든 것들을 intersection으로 묶을 수 있습니다. )</li>\n<li>React 컴포넌트를 사용자들이 재 선언을 해서 사용(몽키패칭)할 필요가 없습니다. 따라서 interface의 declaration merging 기능이 필요가 없습니다. ( 대게 컨벤션으로 interface는 라이브러리를 제작할때 공공 API를 위해 사용하거나 서드파티를 위해 엠비언트 타입을 정의할때 사용합니다. )</li>\n</ol>\n<p>type alias 를 사용했을 시에 예시는 다음과 같습니다.</p>\n<ol>\n<li>\n<p>defaultProps를 지정시에 해당 타입을 typeof로 합칠 수 있습니다.</p>\n<ul>\n<li>다음과 같이 하면 CustomComponent 를 사용할 시 name props은 optional props로 나타나게 되어 더 명시적으로 디폴트 값이 있다는 것을 알려줄 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> CustomComponentProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">typeof</span> defaultProps\n\n<span class=\"token keyword\">const</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'merlin'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">CustomComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\nCustomComponent<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> defaultProps</code></pre></div>\n<ul>\n<li>rebass 의 컴포넌트 Props는 interface로 되어 있지만 type의 intersection 으로 컴포넌트의 props를 extends 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box<span class=\"token punctuation\">,</span> BoxProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rebass\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> iconCollection <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Icon.styled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> IconType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> IconProps <span class=\"token operator\">=</span> BoxProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  icon<span class=\"token operator\">:</span> IconType<span class=\"token punctuation\">;</span>\n  children<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> icon<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> IconProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Box sx<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>iconCollection<span class=\"token punctuation\">[</span>icon<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Icon<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<h2 id=\"자주-사용-한-typescript-문법\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9-%ED%95%9C-typescript-%EB%AC%B8%EB%B2%95\" aria-label=\"자주 사용 한 typescript 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자주 사용 한 typescript 문법</h2>\n<ul>\n<li>keyof</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CustomObject</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'merlin'</span>\n  address<span class=\"token operator\">:</span> <span class=\"token string\">'address'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// CustomObjecyKeyType = 'name' | 'address'</span>\n<span class=\"token keyword\">type</span> CustomObjectKeyType <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> CustomObject \n\n<span class=\"token comment\">// CustomObjectValueType = 'merlin' | 'address'</span>\n<span class=\"token keyword\">type</span> CustomObjectValueType <span class=\"token operator\">=</span> CustomObject<span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> CustomObject<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>Exclude</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> CustomObjectValueType <span class=\"token operator\">=</span> <span class=\"token string\">'merlin'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'address'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'age'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'info'</span>\n\n\n<span class=\"token comment\">// FilterCustomObjectValueType = 'merlin' | 'address'</span>\n<span class=\"token keyword\">type</span> FilterCustomObjectValueType <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span>CustomObjectValueType<span class=\"token punctuation\">,</span> <span class=\"token string\">'info'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'age'</span><span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>Pick</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CustomObject</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'merlin'</span>\n  address<span class=\"token operator\">:</span> <span class=\"token string\">'address'</span>\n  age<span class=\"token operator\">:</span> <span class=\"token string\">'age'</span>\n  info<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* {\n  name: 'merlin'\n  address: 'address'\n} */</span>\n<span class=\"token keyword\">type</span> PickCustomObjectType <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>CustomObject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"address\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"typescript--react-장점\" style=\"position:relative;\"><a href=\"#typescript--react-%EC%9E%A5%EC%A0%90\" aria-label=\"typescript  react 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typescript + react 장점</h2>\n<ol>\n<li>component 에 props로 무엇이 있는지 그 props 값으로는 무엇이 들어가야 하는지 빼먹진 않았는지 알 수 있습니다. </li>\n<li>복잡한 API 응답 타입도 미리 지정해 두면 코드 어시스트가 작동되어 API 응답 값에 무엇이 있었는지 쉽게 알 수 있습니다. </li>\n<li>hooks 을 destructure 시에 어떤 타입이 나오는지 쉽게 알 수 있습니다. </li>\n</ol>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680#78b9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680#78b9</a></p>\n<p><a href=\"https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c</a></p>","excerpt":"설치 creact react app 로 typescript로 만들어진 템플릿을 설치해줍니다. 함수 선언식 Component 함수형 component…","tableOfContents":"<ul>\n<li><a href=\"/typescript-react.md/#%EC%84%A4%EC%B9%98\">설치</a></li>\n<li><a href=\"/typescript-react.md/#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EC%8B%9D-component\">함수 선언식 Component</a></li>\n<li>\n<p><a href=\"/typescript-react.md/#component-props-type\">Component props type</a></p>\n<ul>\n<li><a href=\"/typescript-react.md/#type-alias-%EC%99%80-interface-%EC%B0%A8%EC%9D%B4%EC%A0%90\">type alias 와 interface 차이점</a></li>\n</ul>\n</li>\n<li><a href=\"/typescript-react.md/#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9-%ED%95%9C-typescript-%EB%AC%B8%EB%B2%95\">자주 사용 한 typescript 문법</a></li>\n<li><a href=\"/typescript-react.md/#typescript--react-%EC%9E%A5%EC%A0%90\">typescript + react 장점</a></li>\n<li><a href=\"/typescript-react.md/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/typescript-react.md/"},"frontmatter":{"title":"typescript + react 사용기","date":"Mar 08, 2020","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/typescript-react.md/","series":[],"lastmod":"0001-01-01"}}}