{"componentChunkName":"component---src-templates-post-tsx","path":"/javascript-basic1.md/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"패턴-연습을-위한-기본-다지기\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-%EC%97%B0%EC%8A%B5%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B8%B0%EB%B3%B8-%EB%8B%A4%EC%A7%80%EA%B8%B0\" aria-label=\"패턴 연습을 위한 기본 다지기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 연습을 위한 기본 다지기</h1>\n<h2 id=\"일급-객체인-함수를-잘-다루자\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9D%B8-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%98-%EB%8B%A4%EB%A3%A8%EC%9E%90\" aria-label=\"일급 객체인 함수를 잘 다루자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일급 객체인 함수를 잘 다루자</h2>\n<ul>\n<li>함수를 인자로 받거나 함수를 리턴한다. 이것은 즉, 함수가 high order function 임을 인지한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// d3.js example</span>\n\n<span class=\"token keyword\">var</span> svg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nsvg<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">line</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getX</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getY</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">interpolate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token comment\">// private 함수.</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">segment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> data\n    <span class=\"token comment\">// getX 와 getY 로 필요한 데이터를 추출해서 사용.</span>\n    <span class=\"token comment\">// call 로 함수를 호출 하는 까닭은~?</span>\n    <span class=\"token function\">getX</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">getY</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 추출 후 segment() 함수 사용.</span>\n  <span class=\"token punctuation\">}</span>\n\n  line<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>argument<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> getX\n    getX <span class=\"token operator\">=</span> fn\n    <span class=\"token keyword\">return</span> line\n  <span class=\"token punctuation\">}</span>\n  line<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>argument<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> getY\n    getY <span class=\"token operator\">=</span> fn\n    <span class=\"token keyword\">return</span> line\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> line <span class=\"token comment\">// 함수를 리턴한다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">var</span> lineGenerator <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">lineGenerator</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 데이터가 달라질때 데이터 추출을 위한 함수 변경이 필요하다.</span>\n<span class=\"token keyword\">var</span> lineGenerator <span class=\"token operator\">=</span> svg\n  <span class=\"token punctuation\">.</span><span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 내가 만든 객체에서 값을 얻게끔 라인 생성기를 확장.</span>\n<span class=\"token keyword\">var</span> merlin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  lineGenerator<span class=\"token operator\">:</span> svg\n    <span class=\"token punctuation\">.</span><span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> merlin<span class=\"token punctuation\">.</span><span class=\"token function\">lineGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>위의 getX 와 getY 를 그냥 getX() / getY() 처럼 호출 했다면 위 코드는 getValue 는 정의되어있지 않은 method 라고 에러가 날것이다.\n하지만 getX.call(this) / getY.call(this) 여기서 이 this 는 함수를 호출한 객체를 참조한다.</li>\n</ul>\n<h2 id=\"덕-타이핑\" style=\"position:relative;\"><a href=\"#%EB%8D%95-%ED%83%80%EC%9D%B4%ED%95%91\" aria-label=\"덕 타이핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>덕 타이핑</h2>\n<ul>\n<li>오리처럼 생겨서 오리처럼 걷고 오리처럼 꽥꽥 소리를 낸다면 그건 오리다.</li>\n</ul>\n<blockquote>\n<p>그게 오리인지 검사하지 말고, 당신이 오리의 무슨 행동이 필요한지에 따라서 오리처럼 우는지, 오리처럼 걷는지 등등 적절한 행동을 오리처럼 하는지 검사하세요</p>\n</blockquote>\n<ul>\n<li>즉, 사람이라도 오리처럼 울고 오리처럼 뒤뚱거리면 그건 사람이 아니라 오리이다.</li>\n<li>덕 타이핑이란 형태를 판별하는 대신, 원하는 동작을 수행할수 있는지에 대한 여부만 가지고 검사를 한다. 이때문에 오류들이 잠재할 수 있는 소지들을 안고있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// 오리라면 먹이를 주자. 이런 주제가 있다고 하면</span>\n <span class=\"token comment\">// 오리</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">Duck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function-variable function\">duckSound</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// 어떤새.</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function-variable function\">duckSound</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">Merlin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function-variable function\">feed</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// if( obj instanceof Duck ) // 이것은 Duck로 객체를 생성했을 시.</span>\n             <span class=\"token comment\">// if('duckSound' in obj)</span>\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'duckSound'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 이부분 오리인지 아닌지 확인하는 부분</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n             <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">var</span> bird1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> bird2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> merlin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Merlin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> merlin<span class=\"token punctuation\">.</span><span class=\"token function\">feed</span><span class=\"token punctuation\">(</span>bird1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n <span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> merlin<span class=\"token punctuation\">.</span><span class=\"token function\">feed</span><span class=\"token punctuation\">(</span>bird2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n <span class=\"token comment\">// 판별 방법</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> something <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Merlin</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// or</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'x'</span> <span class=\"token keyword\">in</span> something<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// or</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"함수-오버로딩\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\" aria-label=\"함수 오버로딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 오버로딩</h2>\n<ul>\n<li>자바스크립트에서 함수 오버로딩을 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ex 1) 인자 갯수에 따른 다른 처리 방법</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 인자가 하나도 없을 시 처리하는 로직</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 그외..</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ex 2) 콜백함수</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> data\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    i<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// a에 넘기는 콜백함수는 기본 인자를 2개 받기에 사용자가 선택적으로 사용해도 된다.</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// data 만 써두 되고..</span>\n  <span class=\"token comment\">// 주는 index를 같이 써두 되고..</span>\n  <span class=\"token comment\">// 사용자에게 선택의 폭을 넓혀준다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"스코프는-중첩-함수로-다스린다\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84%EB%8A%94-%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%8B%A4%EC%8A%A4%EB%A6%B0%EB%8B%A4\" aria-label=\"스코프는 중첩 함수로 다스린다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프는 중첩 함수로 다스린다.</h2>\n<ul>\n<li>함수를 중첩하여 코드를 계층화할 수 있다.</li>\n<li>덕분에 개발자가 원하는 것을 찾는 데 도움이 된다.</li>\n<li>프로그램에서 변수/함수의 스코프를 최소화할 수 있다.</li>\n<li>스코프를 최소화?</li>\n</ul>\n<blockquote>\n<p>즉, 자바스크립트 스코프는 함수 선언시에 결정되기 때문에 함수를 중첩화 해서 실행시키면 그 안에서만의 스코프가 생겨난다. 다른 스코프에 영향이 가지 않기에 범위를 최소화 시킨다고 한다.</p>\n</blockquote>\n<ul>\n<li>위 line 함수에서 멤버함수 line.x 는 line 의 멤버임에도 segments 같은 line 의 지역 변수는 볼 수 없지만, 에워싼 함수 안에서 line 과 getX 변수를 바라볼 수 있다. 이런 식으로 클로저를 교묘하게 잘 섞어 쓰면 대규모 자바스크립틑 시스템에 꼭 필요한 강력한 도구가 된다.</li>\n</ul>\n<h2 id=\"solid-원칙\" style=\"position:relative;\"><a href=\"#solid-%EC%9B%90%EC%B9%99\" aria-label=\"solid 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SOLID 원칙</h2>\n<ul>\n<li>단일 책임 원칙</li>\n<li>개방/폐쇄 원칙</li>\n<li>리스코프 치환 원칙</li>\n<li>인터페이스 분리 원칙</li>\n<li>의존성 역전 원칙</li>\n</ul>\n<h2 id=\"단일-책임-원칙-srp\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99-srp\" aria-label=\"단일 책임 원칙 srp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙 (SRP)</h2>\n<ul>\n<li>책임은 곧 변경하려는 이유로 정의하고 모든 클래스 및 함수를 변경하려면 반드시 한가지 변경 사유만 있어야 한다. 즉, 보고서를 편집하고 출력하는 모듈(클래스)이 있다고 생각해보자, 이 모듈을 두가지 사유로 변경될수가 있는데 첫번째는 보고서의 내용이 변경되면 모듈이 변경될 수 있고 두번째는 보고서의 형식이 변경되면 같은 모듈이 변경될 수 있다. 단일 책임 원칙에 의하면 이 문제는 실제로 분리된 책임이라고 보고 분리된 클래스나 모듈로 나눠야 한다. 다른 시기에 다른 이유로 변경되어야 하는 두가지를 묶는 것은 나쁜 설게일 수 있다.</li>\n<li>유일한 관심사만 확인하고, 어떻게 이행할지는 외부에서 제공하게끔 하면 도움이 된다.</li>\n</ul>\n<h2 id=\"개방폐쇄-원칙\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%A9%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99\" aria-label=\"개방폐쇄 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개방/폐쇄 원칙</h2>\n<ul>\n<li>확장 가능성은 열어 두되 수정 가능성은 닫아야 한다.</li>\n<li>실행 코드를 변경하지말고 어떻게든 재사용하고 확장하라는 뜻.</li>\n<li>변경되지 않을 것과 변경 가능성이 있는 것을 내다보는 힘을 길러야 한다.</li>\n</ul>\n<h2 id=\"리스코프-치환-원칙\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98-%EC%9B%90%EC%B9%99\" aria-label=\"리스코프 치환 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스코프 치환 원칙</h2>\n<ul>\n<li>한 객체를 다른 객체에서 파생하더라도 그 기본 로직이 변경되어서는 안된다.</li>\n<li>내가 작성중인 함수가 기반 클래스로 하는 일과 서브 클래스로 하는일이 다르다면 이 원칙을 어긴 셈이다.</li>\n<li>자바스크립트에서는 어떤 함수의 인자가 숫자일 때, 문자열일 때, 아예 인자가 없는 undefined 탕입일 때를 각각 분기 처리하는 것이 대개 좋은 습관이다.</li>\n</ul>\n<h2 id=\"인터페이스-분리-원칙\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99\" aria-label=\"인터페이스 분리 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스 분리 원칙</h2>\n<ul>\n<li>함수가 기대하는 인자가 무엇인지 명확히 하고 그 기대치를 최소화 해야한다.</li>\n<li>특정 타입의 인자를 바라기보다는 이 타입에서 실제로 필요한 프로퍼티가 더러 있을 거라 기대하는 것이다.</li>\n</ul>\n<h2 id=\"의존성-연전-원칙\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%97%B0%EC%A0%84-%EC%9B%90%EC%B9%99\" aria-label=\"의존성 연전 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 연전 원칙</h2>\n<ul>\n<li>인터페이스 기반 언어에서는 대개 의존성 주입이라는 연관된 개념으로 표현한다.</li>\n<li>상위 수준 모듈은 하위 수준 모듈에 의존해서는 안 되며 이 둘은 추상화에 의존해야 한다.</li>\n<li>클래스 A 가 클래스 B 를 필요로 할때 A 에서 B 를 생성하는게 아닌 A 생성자 안에 B 를 서술하는 인터페이스를 만들어 놓고 A 가 생성이 되면 구체화한 B 를 넘겨받는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bad!!</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// b 에 의존.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//..</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'merlin'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good!!</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 인터페이스</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setB</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      b <span class=\"token operator\">=</span> obj\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">setB</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>위 처럼 해야 B 의 파생형 버전을 제공할수 있는 이점이 있고 B 를 고쳐야 할 경우 하위 버전 호환성을 유지하려면 어떤 로직을 계속 갖고 있어야 하는지 일목요연하게 서술한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 어떠한 데이터로 라인을 그린다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baseFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span>\n\nsvg<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">line</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">svg_line</span><span class=\"token punctuation\">(</span>baseFn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">svg_line</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">projection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">segment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 이 함수를 호출해서 여러가지 일을 한다...</span>\n      <span class=\"token function\">projection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> line\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> lineGenerator <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">lineGenerator</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이렇게 하면 데이터 그대로 라인을 그린다.</span>\n\n<span class=\"token comment\">// 허나 난 이 데이터를 기반으로 다른 모양으로 그리겠다.</span>\n<span class=\"token comment\">// 데이터를 어떻게 조작할지만 생각한다. 즉, baseFn 만 바꿔주면된다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">additionFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> data <span class=\"token operator\">*</span> <span class=\"token number\">0.3</span>\n<span class=\"token punctuation\">}</span>\nsvg<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addition</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">svg_line</span><span class=\"token punctuation\">(</span>additionFn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 의존성 주입.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> lineGenerator <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">addition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">lineGenerator</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"dry-원칙\" style=\"position:relative;\"><a href=\"#dry-%EC%9B%90%EC%B9%99\" aria-label=\"dry 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DRY 원칙</h2>\n<ul>\n<li>반복하지 마라!!</li>\n<li>재사용할 수 있어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  points<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token function\">getX</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token function\">getY</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">var</span> d\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  d <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  points<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token function\">getX</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token function\">getY</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"의존성-주입\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85\" aria-label=\"의존성 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입</h2>\n<h3 id=\"의존성-주입이란\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4%EB%9E%80\" aria-label=\"의존성 주입이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입이란?</h3>\n<ul>\n<li>의존성을 품은, 하드 코딩한 모듈은 단위테스트를 진행하기 어렵다.</li>\n<li>의존성 품은 모듈의 한 메서드에서 의존성 모듈의 함수들을 호출한다 했을때, 해당 의존성을 품은 모듈은 단위테스트 하기가 까다로워 지고, 폭넓은 경우를 파악하기 힘들다.</li>\n<li>반면 의존성을 주입하게 되면 fake(모의체)를 주입해서 좀 더 넓은 범위의 가능성에 대해서 테스트를 진행해볼수 있다.</li>\n</ul>\n<h3 id=\"의존성-주입하여-믿음직한-코드-만들기\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%ED%95%98%EC%97%AC-%EB%AF%BF%EC%9D%8C%EC%A7%81%ED%95%9C-%EC%BD%94%EB%93%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"의존성 주입하여 믿음직한 코드 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입하여 믿음직한 코드 만들기</h3>\n<ul>\n<li>의존성 주입 코드는 재사용을 적극적으로 유도한다.</li>\n<li>하드 코딩한 모듈은 재사용하기가 어렵다.</li>\n<li>의존성 주입 코드로 바꾼 다음에는 주입 당한 코드에서 사용하는 주입된 인스턴스 메서드만 있다면 어떤 인스턴스라도 사용할수 있다는 장점이 있다.</li>\n</ul>\n<h3 id=\"의존성-주입의-모든것\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%98-%EB%AA%A8%EB%93%A0%EA%B2%83\" aria-label=\"의존성 주입의 모든것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입의 모든것</h3>\n<ul>\n<li>객체 또는 의존성 중 어느 하나라도 DB, 설정파일, HTTP, 기타 인프라등의 외부 자원에 의존하는가/</li>\n<li>객체 내부에서 발생할지 모를 에러를 테스트에서 고려해야 하나?</li>\n<li>특정한 방향으로 객체를 작동시켜야 할 테스트가 있는가?</li>\n<li>이 서드파티 제공 객체가 아니라 온전히 내가 소유한 객체인가?</li>\n</ul>\n<h2 id=\"애스팩트-지향-프로그래밍aop\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EC%8A%A4%ED%8C%A9%ED%8A%B8-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Daop\" aria-label=\"애스팩트 지향 프로그래밍aop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애스팩트 지향 프로그래밍(AOP)</h2>\n<ul>\n<li>애스팩트 지향 프로그래밍은 (단일한 책임 범위 내에 있지 않은) 하나 이상의 객체에 유용한 코드를 한데 묶어 눈에 띄지 않게 객체에 배포하는 기법이다.\nAOP 용어로, 배포할 코드 조각을 어드바이스(advice), 어드바이스가 처리할 문제를 애스팩트(aspect) 또는 횡단 관심사라고 한다.</li>\n</ul>\n<h3 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기</h3>\n<p>콘퍼런스 웹페이지에서 로그인한 참자가자 원하는 지역 공항의 항공권 할인 운임을 조회하는 웹 서비스를 호출 해야 한다.\n바로바로 알림창이 뜨면 좋겠지만, 웹 서비스 호출은 아무래도 시간이 걸리기 마련이다. 따라서 참가자 본인이 공항을 바꾸지 않는 한 해당 항공권 정보를 캐시하기로 한다. 여기서 캐싱은 횡단 관심사 이자 애스팩트 지향 프로그래밍의 유력한 후보자 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">TravelService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rawWebService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> conferenceAirport <span class=\"token operator\">=</span> <span class=\"token string\">'BOS'</span>\n  <span class=\"token keyword\">var</span> maxArrival <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> minDeparture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 간단한 캐싱: 인덱스는 공항이고 객체는 티켓이다.</span>\n  <span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getSuggestedTicket</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">homeAirport</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> ticket\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>homeAirport<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>homeAirport<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n\n      ticket <span class=\"token operator\">=</span> rawWebService<span class=\"token punctuation\">.</span><span class=\"token function\">getCheapesRoundTrip</span><span class=\"token punctuation\">(</span>\n        homeAirport<span class=\"token punctuation\">,</span>\n        conferenceAirport<span class=\"token punctuation\">,</span>\n        maxArrival<span class=\"token punctuation\">,</span>\n        minDeparture\n      <span class=\"token punctuation\">)</span>\n\n      cache<span class=\"token punctuation\">[</span>homeAirport<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ticket\n\n      <span class=\"token keyword\">return</span> ticket\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>작동은 잘 되지만 핵심 기능과 전혀 무관한 코드가 많이 보인다.\ngetSuggestedTicket 을 그대로 둔 상태에서 기능만 추가할 수 있으면 좋을거 같다. 만약 10 분 후 캐시한 결과를 만료시키는 식으로 캐싱 전략을 나중에 바꿔달라고 하면? 추가기능( 사용자가 원하는 옵션을 쿠키에 저장)이 방해 받지 않는 방향으로 연결할 수 있으면 좋을 것이다.</p>\n<p>바로 이런 일들을 애스팩트 지향 프로그래밍으로 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Aop<span class=\"token punctuation\">.</span><span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getSuggestedTicket'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cacheAspectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>cacheAspectFactory() 는 모든 호출을 가로챌 수 있는, 완전히 재사용 가능한 캐싱 함수를 반환하며 똑같은 인자가 들어오면 똑같은 결과를 반환한다.</p>\n<h3 id=\"aop-code\" style=\"position:relative;\"><a href=\"#aop-code\" aria-label=\"aop code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP code</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Aop <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">around</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnName<span class=\"token punctuation\">,</span> advice<span class=\"token punctuation\">,</span> fnObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> originalFn <span class=\"token operator\">=</span> fnObj<span class=\"token punctuation\">[</span>fnName<span class=\"token punctuation\">]</span>\n    fnObj<span class=\"token punctuation\">[</span>fnName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">advice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fn<span class=\"token operator\">:</span> originalFn<span class=\"token punctuation\">,</span> args<span class=\"token operator\">:</span> arguments <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">targetInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> targetInfo<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetInfo<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nAop<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">before</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnName<span class=\"token punctuation\">,</span> advice<span class=\"token punctuation\">,</span> fnObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Aop<span class=\"token punctuation\">.</span><span class=\"token function\">around</span><span class=\"token punctuation\">(</span>\n    fnName<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">targetInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">advice</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetInfo<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Aop<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>targetInfo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    fnObj\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nAop<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">after</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnName<span class=\"token punctuation\">,</span> advice<span class=\"token punctuation\">,</span> fnObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Aop<span class=\"token punctuation\">.</span><span class=\"token function\">around</span><span class=\"token punctuation\">(</span>\n    fnName<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">targetInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> Aop<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>targetInfo<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">advice</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> targetInfo<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    fnObj\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>관심사를 분리하는 일에 집중하고 단일 책임 원칙이나 의존성 주입같은 소프트웨어 공학 원칙을 잘 써먹는게 중요하다.</li>\n</ul>","excerpt":"패턴 연습을 위한 기본 다지기 일급 객체인 함수를 잘 다루자 함수를 인자로 받거나 함수를 리턴한다. 이것은 즉, 함수가 high order function 임을 인지한다. 위의 getX 와 getY 를 그냥 getX() / getY…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/javascript-basic1.md/#%ED%8C%A8%ED%84%B4-%EC%97%B0%EC%8A%B5%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B8%B0%EB%B3%B8-%EB%8B%A4%EC%A7%80%EA%B8%B0\">패턴 연습을 위한 기본 다지기</a></p>\n<ul>\n<li><a href=\"/javascript-basic1.md/#%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9D%B8-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%98-%EB%8B%A4%EB%A3%A8%EC%9E%90\">일급 객체인 함수를 잘 다루자</a></li>\n<li><a href=\"/javascript-basic1.md/#%EB%8D%95-%ED%83%80%EC%9D%B4%ED%95%91\">덕 타이핑</a></li>\n<li><a href=\"/javascript-basic1.md/#%ED%95%A8%EC%88%98-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\">함수 오버로딩</a></li>\n<li><a href=\"/javascript-basic1.md/#%EC%8A%A4%EC%BD%94%ED%94%84%EB%8A%94-%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%8B%A4%EC%8A%A4%EB%A6%B0%EB%8B%A4\">스코프는 중첩 함수로 다스린다.</a></li>\n<li><a href=\"/javascript-basic1.md/#solid-%EC%9B%90%EC%B9%99\">SOLID 원칙</a></li>\n<li><a href=\"/javascript-basic1.md/#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99-srp\">단일 책임 원칙 (SRP)</a></li>\n<li><a href=\"/javascript-basic1.md/#%EA%B0%9C%EB%B0%A9%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99\">개방/폐쇄 원칙</a></li>\n<li><a href=\"/javascript-basic1.md/#%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98-%EC%9B%90%EC%B9%99\">리스코프 치환 원칙</a></li>\n<li><a href=\"/javascript-basic1.md/#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99\">인터페이스 분리 원칙</a></li>\n<li><a href=\"/javascript-basic1.md/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%97%B0%EC%A0%84-%EC%9B%90%EC%B9%99\">의존성 연전 원칙</a></li>\n<li><a href=\"/javascript-basic1.md/#dry-%EC%9B%90%EC%B9%99\">DRY 원칙</a></li>\n<li>\n<p><a href=\"/javascript-basic1.md/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85\">의존성 주입</a></p>\n<ul>\n<li><a href=\"/javascript-basic1.md/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4%EB%9E%80\">의존성 주입이란?</a></li>\n<li><a href=\"/javascript-basic1.md/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%ED%95%98%EC%97%AC-%EB%AF%BF%EC%9D%8C%EC%A7%81%ED%95%9C-%EC%BD%94%EB%93%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">의존성 주입하여 믿음직한 코드 만들기</a></li>\n<li><a href=\"/javascript-basic1.md/#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%98-%EB%AA%A8%EB%93%A0%EA%B2%83\">의존성 주입의 모든것</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/javascript-basic1.md/#%EC%95%A0%EC%8A%A4%ED%8C%A9%ED%8A%B8-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Daop\">애스팩트 지향 프로그래밍(AOP)</a></p>\n<ul>\n<li><a href=\"/javascript-basic1.md/#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li><a href=\"/javascript-basic1.md/#aop-code\">AOP code</a></li>\n</ul>\n</li>\n<li><a href=\"/javascript-basic1.md/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/javascript-basic1.md/"},"frontmatter":{"title":"Javascript-Basic1","date":"Apr 05, 2018","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/javascript-basic1.md/","series":[],"lastmod":"0001-01-01"}}}