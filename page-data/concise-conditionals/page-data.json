{"componentChunkName":"component---src-templates-post-tsx","path":"/concise-conditionals/","result":{"data":{"markdownRemark":{"html":"<p>해당 글은 <code class=\"language-text\">리팩토링 (코드 품질을 개선하는 객체지향 사고법)</code> 에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다.</p>\n<h2 id=\"조건문-쪼개기-decompose-conditional\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8-%EC%AA%BC%EA%B0%9C%EA%B8%B0-decompose-conditional\" aria-label=\"조건문 쪼개기 decompose conditional permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문 쪼개기 (Decompose Conditional)</h2>\n<p>복잡한 조건문(if-then-else)이 있을땐 if, then, eles 부분을 각각 메서드로 빼내자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SUMMER_START</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SUMMER_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  charge <span class=\"token operator\">=</span> quantity <span class=\"token operator\">*</span> _winterRate <span class=\"token operator\">+</span> _winterServiceCharge\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  charge <span class=\"token operator\">=</span> quantity <span class=\"token operator\">*</span> _summerRate\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">notSummer</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  charge <span class=\"token operator\">=</span> <span class=\"token function\">winterCharge</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  charge <span class=\"token operator\">=</span> <span class=\"token function\">summerCharge</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>큰 덩어리의 코드를 잘게 쪼개고 각 코드 조각을 용도에 맞는 이름의 메서드 호출로 바꾸면 코드의 용도가 분명히 드러난다.\n이 과정을 조건문의 if 절, then 절, else 절 각각에 대해 수행하면 더 큰장점을 얻을 수 있다.</p>\n<h2 id=\"중복-조건식-통합-consolidate-conditional-expression\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EB%B3%B5-%EC%A1%B0%EA%B1%B4%EC%8B%9D-%ED%86%B5%ED%95%A9-consolidate-conditional-expression\" aria-label=\"중복 조건식 통합 consolidate conditional expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중복 조건식 통합 (Consolidate Conditional Expression)</h2>\n<p>여러 조건 검사식의 결과가 같을 땐 하나의 조건문으로 합친 후 메서드로 빼내자.</p>\n<p>서로 다른 여러 개의 조건 검사식이 있는데 조건에 따른 결과가 모두 같을 때가 간혹 있다. 이럴 때는 논리 연산자 AND 와 OR 을 사용해서 여러 조건 검사를 하나로 합쳐야 한다.\n조건문을 합쳐야 하는 이유는 두가지 이다.\n첫째, 조건식을 합치면 여러 검사를 OR 연산자로 연결해서 실제 하나의 검사 수행을 표현해서 무엇을 검사하는지 더 확실히 이해할 수 있다.\n둘째, 이러한 조건식 통합 리팩토링 기법을 실시하면 메서드 추출을 적용할 수 있는 기반이 마련된다.</p>\n<p>조건 검사식이 독립적이고 하나의 검사로 인식되지 말아야 할 땐 이방법을 사용하지 말자.</p>\n<h3 id=\"예제-논리합or-연산자\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EB%85%BC%EB%A6%AC%ED%95%A9or-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"예제 논리합or 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 논리합(OR) 연산자</h3>\n<p>다음과 같은 상태의 코드가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">disabilityAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_seniority <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_monthsDisabled <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isPartTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 장애인 공제액 산출</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이럴때 조건문이 여러 개 있고 모두 같은 값 0 을 반환한다. 조건문이 이렇게 순차적일 땐 다음과 같이 논리합 연산자인 ||로 연결한 하나의 조건문으로 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">disabilityAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_seniority <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_monthsDisabled <span class=\"token operator\">></span> <span class=\"token number\">12</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isPartTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 장애인 공제액 산출</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 조건문을 보면 이 조건이 무엇을 찾으려는 것인지 한눈에 알 수 있게 메서드 추출을 적용하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">disabilityAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEligibleForDisability</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// 장애인 공제액 산출</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">isNotEligibleForDisability</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_seniority <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_monthsDisabled <span class=\"token operator\">></span> <span class=\"token number\">12</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isPartTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"예제-논리곱and-연산자\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EB%85%BC%EB%A6%AC%EA%B3%B1and-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"예제 논리곱and 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 논리곱(AND) 연산자</h3>\n<p>연산자 &#x26;&#x26; 으로도 마찬가지로 여러 조건문을 하나로 연결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">onVacation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">lengthOfService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">0.5</span></code></pre></div>\n<p>이 코드에서 겹친 조건문을 논리곱 연산자로 다음과 같이 연결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">onVacation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">lengthOfService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.5</span></code></pre></div>\n<p>조건식 안의 루틴이 단순히 조건을 검사해서 값을 반환할 땐 다음과 같이 삼항연산자를 사용해서 그 루틴을 한줄의 return 문으로 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token function\">onVacation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">lengthOfService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span></code></pre></div>\n<h2 id=\"조건문의-공통-실행-코드-빼내기-consolidate-duplicate-conditional-fragments\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%98-%EA%B3%B5%ED%86%B5-%EC%8B%A4%ED%96%89-%EC%BD%94%EB%93%9C-%EB%B9%BC%EB%82%B4%EA%B8%B0-consolidate-duplicate-conditional-fragments\" aria-label=\"조건문의 공통 실행 코드 빼내기 consolidate duplicate conditional fragments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문의 공통 실행 코드 빼내기 (Consolidate Duplicate Conditional Fragments)</h2>\n<p>조건문의 모든 절에 같은 실행 코드가 있을 땐 같은 부분을 조건문 밖으로 빼자.</p>\n<h3 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSpecialDeal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.95</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.98</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSpecialDeal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.95</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.98</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"제어-플래그-제거-remove-control-flag\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%96%B4-%ED%94%8C%EB%9E%98%EA%B7%B8-%EC%A0%9C%EA%B1%B0-remove-control-flag\" aria-label=\"제어 플래그 제거 remove control flag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어 플래그 제거 (Remove Control Flag)</h2>\n<p>여러 조건문이 사용된 코드에는 조건문을 빠져나갈 시점을 결정하는 제어 플래그가 흔히 사용된다.\n논리 연산식의 제어 플래그 연할을 하는 변수가 있을땐 그 변수를 break 문이나 return 문으로 바꾸자.</p>\n<p>break 문이나 continue 문이 있는 언어에서도 메서드 추출 후 return 문으로 바꾸는 방법을 선호한다.\n대체로 return 문을 사용할 수 있는 코드가 있으면 무슨 수를 써서라도 그 부분을 메서드로 추출해야 한다.</p>\n<h3 id=\"예제-간단한-제어-플래그를-break-문으로-교체\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%A0%9C%EC%96%B4-%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC-break-%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EA%B5%90%EC%B2%B4\" aria-label=\"예제 간단한 제어 플래그를 break 문으로 교체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 간단한 제어 플래그를 break 문으로 교체</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">checkSecurity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">people</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> found <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>found<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Don'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          found <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 제어 플래그</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          found <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 제어 플래그는 found 변수에 true 값을 대입하는 부분이 제어 플래그다. 그 부분들을 한번에 한 부분씩 break 문으로 바꾸자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">checkSecurity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">people</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Don'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"예제-제어-플래그를-return-문으로-교체\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%A0%9C%EC%96%B4-%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC-return-%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EA%B5%90%EC%B2%B4\" aria-label=\"예제 제어 플래그를 return 문으로 교체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 제어 플래그를 return 문으로 교체</h3>\n<p>제어 플래그를 결괏값으로 사용하게 변형한 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">checkSecurity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">people</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> found <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>found<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Don'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          found <span class=\"token operator\">=</span> <span class=\"token string\">'Don'</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          found <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">someLaterCode</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">found</code> 는 결과를 나타내기도 하고 제어 플래그 역할도 한다. 이럴땐 <code class=\"language-text\">found</code> 변수를 알아내는 코드를 메서드로 빼내자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">checkSecurity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">people</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> found <span class=\"token operator\">=</span> <span class=\"token function\">foundMiscreant</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">someLaterCode</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">checkSecurity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">people</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Don'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 상태 변경 관련 코드</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Don'</span> <span class=\"token comment\">// 값 반환 코드</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">sendAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'John'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 메서드의 기능엔 아직 부작용이 있다. 그래서 <code class=\"language-text\">상태 변경 메서드와 값 반환 메서드를 분리</code> 기법을 실시해야 한다.</p>\n<h2 id=\"여러-겹의-조건문을-감시-절로-전환-replace-nested-conditional-with-guard-clauses\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B2%B9%EC%9D%98-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EA%B0%90%EC%8B%9C-%EC%A0%88%EB%A1%9C-%EC%A0%84%ED%99%98-replace-nested-conditional-with-guard-clauses\" aria-label=\"여러 겹의 조건문을 감시 절로 전환 replace nested conditional with guard clauses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 겹의 조건문을 감시 절로 전환 (Replace Nested Conditional with Guard Clauses)</h2>\n<p>메서드에 조건문이 있어서 정상적인 실행 경로를 파악하기 힘들 땐 모든 특수한 경우에 감시 절을 사용하자.</p>\n<p>조건식은 주로 두 가지 형태를 띤다. 첫째는 어느 한 경로가 정상적인 동작의 일부인지 검사하는 형태이고, 둘째는 조건식 판별의 한 결과만 정상적인 동작을 나타내고 나머지는 비정상적인 동작을 나타내는 형태다.</p>\n<p><em>만약 둘다 정상 동작의 일부분이라면 if 절과 else 절로 구성된 조건문을 사용하고, 조건문이 특이한 조건이라면 그 조건을 검사해서 조건이 true 일 경우 반환하자. 이런 식의 검사를 감시 절이라고 한다.</em></p>\n<p>여러 겹의 조건문을 감시 절로 전환기법의 핵심은 강조 부분이다. if-then-else 문을 사용하면 if 절과 else 절의 비중이 동등하다.\n따라서 코드를 보는 사람은 if 절과 else 절의 비중이 같다고 판단하게 된다.\n그와 달리, 감시 절은 \"이것은 드문 경우이니 이 경우가 발생하면 작업을 수행한 후 빠져나와라\" 하고 명령한다.</p>\n<p>유일한 진입점은 현대의 프로그래밍 언어에 표준처럼 굳어졌지만, 유일한 이탈점 규칙은 별로 바람직하지 않다.\n메서드의 이탈점을 하나만 사용해서 더 명확해진다면 그렇게 해야겠지만, 그렇지 않을 때는 굳이 한 개의 이탈점을 고집하지 말자.</p>\n<h3 id=\"예제-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-1\" aria-label=\"예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<p>사망직원, 해고직원, 은퇴직원의 경우 특수 규칙이 적용되는 급여 정산 시스템을 실행한다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getPayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDead<span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token function\">deadAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isSeparated<span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token function\">separatedAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isRetired<span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token function\">retiredAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span> result <span class=\"token operator\">=</span> <span class=\"token function\">normalPayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>조건문으로 인해 정상적인 실행 경로를 알기가 쉽지 않다. 이럴 땐 감시 절을 사용하면 코드를 이해하기 쉬워진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getPayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isDead<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">deadAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isSeparated<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">separatedAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isRetired<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">retiredAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">normalPayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메서드에 더 이상 중요한 작업이 남아 있지 않다면, 그 메서드를 빠져나오게 해서 관심이 없음을 나타낸다.</p>\n<h3 id=\"예제-조건문을-역순으로-만들기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"예제 조건문을 역순으로 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 조건문을 역순으로 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getAdjustedCapital</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_capital <span class=\"token operator\">></span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_intRate <span class=\"token operator\">></span> <span class=\"token number\">0.0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_duration <span class=\"token operator\">></span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_income <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">ADJ_FACTOR</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 변형한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getAdjustedCapital</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_capital <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intRate <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.0</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_duration <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_income <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">ADJ_FACTOR</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"조건문을-재정의로-전환-replace-conditional-with-polymorphism\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%9E%AC%EC%A0%95%EC%9D%98%EB%A1%9C-%EC%A0%84%ED%99%98-replace-conditional-with-polymorphism\" aria-label=\"조건문을 재정의로 전환 replace conditional with polymorphism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문을 재정의로 전환 (Replace Conditional with Polymorphism)</h2>\n<p>객체 타입에 따라 다른 기능을 실행하는 조건문이 있을 땐 조건문의 각 절을 하위클래스의 재정의 메서드 안으로 옮기고, 원본 메서드는 abstract 타입으로 수정하자.</p>\n<p>객체 관련 전문용어 중 가장 웅대한 표현은 다형성이다. 재정의의 본질은 타입에 따라 기능이 달라지는 여러 객체가 있을 때 일일이 조건문을 작성하지 않아도 다형적으로 호출되게 할 수 있다는 것이다.\n그래서 분류 부호에 따라 다른 코드를 실행하는 switch 문이나 문자열에 따라 다른 코드를 실행하는 it-then-else 문은 객체지향 프로그램에서 별로 사용하지 않는다.</p>\n<p>이런 조건문 덩어리가 프로그램의 여러 곳에 있을 때 가장 큰 효과를 볼 수 있다. 새 타입을 추가하려면 모든 조건문을 찾아서 수정해야 한다. 그러나 하위클래스를 사용하면 새 하위클래스를 작성하고 적당한 메서드만 넣으면 된다. 클래스 사용 부분은 그 하위클래스를 알 필요가 없어서 시스템 내부의 의존성이 줄어들고 수정이 쉬워진다.</p>\n<p>이것을 적용할 조건문은 switch-case 문이나 if 문이다.</p>\n<h3 id=\"예제-2\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-2\" aria-label=\"예제 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<p>사원 월급 예제를 보자. <code class=\"language-text\">분류 부호를 상태/전략 패턴으로 전환</code> 예제를 참고하자.\nEmployee 클래스의 <code class=\"language-text\">payAmount 메서드</code>의 switch 문을 리펙토링 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 여기에 정의 내렸던 분류 부호 정의를 삭제</span>\n  <span class=\"token comment\">// EmployeeType 클래스 참조를 넣자.</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이제 _type은 EmployeeType의 인스턴스다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type <span class=\"token operator\">=</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token function\">newType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 이제 payAmount 메서드에 `조건문을 재정의로 전환 기법`을 적용할 수 있다.</span>\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token constant\">ENGINEER</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_monthlySalary\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token constant\">SALESMAN</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_monthlySalary <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_commission\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token constant\">MANAGER</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_monthlySalary <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_bonus\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">payAmount</code> 메서드를 <code class=\"language-text\">EmployeeType</code> 클래스로 옮기고 <code class=\"language-text\">Employee 클래스의 데이터</code>가 필요하므로 Employee 클래스를 인자로 전달해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이제 _type은 EmployeeType의 인스턴스다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type <span class=\"token operator\">=</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token function\">newType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">ENGINEER</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">SALESMAN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">MANAGER</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// emp는 Employee 인스턴스</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">ENGINEER</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthlySalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">SALESMAN</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthlySalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getCommission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">MANAGER</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthlySalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getBonus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">payAmount</code>메서드를 정리해보자.\n하나씩 case 문의 ENGINEER 절 코드를 <code class=\"language-text\">Engineer</code> 클래스로 코드를 복사하자.\n그리고 <code class=\"language-text\">EmployeeType</code> 클래스(상위클래스)에 payAmount 메서드는 추상 메서드로 선언하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이제 _type은 EmployeeType의 인스턴스다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_type <span class=\"token operator\">=</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token function\">newType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">ENGINEER</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">SALESMAN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">MANAGER</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// abstract 추상메서드로 남겨두자.</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">newType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">ENGINEER</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engineer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">SALESMAN</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Salesman</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">MANAGER</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Manager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Engineer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EmployeeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token constant\">ENGINEER</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// emp는 Employee 인스턴스</span>\n    <span class=\"token keyword\">return</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthlySalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Salesman</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EmployeeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token constant\">ENGINEER</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// emp는 Employee 인스턴스</span>\n    <span class=\"token keyword\">return</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthlySalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getCommission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EmployeeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getTypeCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> EmployeeType<span class=\"token punctuation\">.</span><span class=\"token constant\">ENGINEER</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">payAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// emp는 Employee 인스턴스</span>\n    <span class=\"token keyword\">return</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthlySalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getBonus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"null-검사를-널-객체에-위임-introduce-null-object\" style=\"position:relative;\"><a href=\"#null-%EA%B2%80%EC%82%AC%EB%A5%BC-%EB%84%90-%EA%B0%9D%EC%B2%B4%EC%97%90-%EC%9C%84%EC%9E%84-introduce-null-object\" aria-label=\"null 검사를 널 객체에 위임 introduce null object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null 검사를 널 객체에 위임 (Introduce Null Object)</h2>\n<p>null 값을 검사하는 코드가 계속 나올 땐 null 값을 널 객체로 만들자.</p>\n<h3 id=\"예제-3\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-3\" aria-label=\"예제 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<p>공공설비 업체는 공공 설비 서비스를 이용하는 주택가와 아파트 단지 등의 지역을 파악하고 있다. 한 지역에 있는 고객은 반드시 하나다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Site</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_customer\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_customer\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// return</span>\n  <span class=\"token function\">getPlan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// return BillingPlan 객체</span>\n  <span class=\"token function\">getHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// return PaymentHistory 객체</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymenHistory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getWeeksDelinquentInLastYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 위와 같은 코드가 있을때 클라이언트는 다음과 같은 데이터에 접근가능하다.</span>\n<span class=\"token comment\">// 하지만 고객이 없는 지역도 있기에 Customer 클래스를 사용하는 코드에 다음과 같은 null 처리를 해야한다.</span>\n\n<span class=\"token keyword\">const</span> customer <span class=\"token operator\">=</span> site<span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> plan\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> plan <span class=\"token operator\">=</span> BillingPlan<span class=\"token punctuation\">.</span><span class=\"token function\">basic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> plan <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getPlan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">let</span> customerName\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> customerName <span class=\"token operator\">=</span> <span class=\"token string\">'occupant'</span>\n<span class=\"token keyword\">else</span> customerName <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">let</span> weeksDelinquent\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> weeksDelinquent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">else</span> weeksDelinquent <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWeeksDelinquentInLastYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이때 모든 부분에서 null 검사해서 null 을 발견할 때마다 같은 작업을 수행해야 할 수도 있다. 따라서 널 객체가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NullCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 팩토리 메서드</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">newNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이때부터 null이 예상될 때마다 새 널 객체를 반환하고 foo === null 형태의 null 검사 코드를</span>\n<span class=\"token comment\">// foo.isNull() 형태의 코드로 수정하자.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Site</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_customer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> Cusomer<span class=\"token punctuation\">.</span><span class=\"token function\">newNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_customer\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 클라이언트는 아래와 같이 코드를 작성한다.</span>\n<span class=\"token keyword\">const</span> customer <span class=\"token operator\">=</span> site<span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> plan\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> plan <span class=\"token operator\">=</span> BillingPlan<span class=\"token punctuation\">.</span><span class=\"token function\">basic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> plan <span class=\"token operator\">=</span> cusomter<span class=\"token punctuation\">.</span><span class=\"token function\">getPlan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">let</span> customerName\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> customerName <span class=\"token operator\">=</span> <span class=\"token string\">'occupant'</span>\n<span class=\"token keyword\">else</span> customerName <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">let</span> weeksDelinquent\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> weeksDelinquent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">else</span> weeksDelinquent <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWeeksDelinquentInLastYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>아직 장점이 와 닿지 않는다. 그 장점은 <code class=\"language-text\">NullCustomer</code>로 기능을 옮기고 조건문을 삭제해야 느낄 수 있다. 이 과정은 한번에 하나씩 실시하면 된다.\n<code class=\"language-text\">NullCustomer</code> 클래스에 적합한 name 읽기 메서드를 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NullCustomer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'occupant'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setPlan</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> PaymentHistory<span class=\"token punctuation\">.</span><span class=\"token function\">newNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여기서 아래 NullPaymentHistory 객체를 반환.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 이렇게 작성하면 클라이언트 코드에서 다음과 같이 바뀔 수 있다.</span>\n<span class=\"token comment\">// 조건문 코드는 삭제해도 된다. 한줄로만 작성이 가능하다.</span>\ncustomerName <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 변경 메서드들도 다음과 같이 처리할 수 있다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>customer<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  customer<span class=\"token punctuation\">.</span><span class=\"token function\">setPlan</span><span class=\"token punctuation\">(</span>BillingPlan<span class=\"token punctuation\">.</span><span class=\"token function\">special</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 위와 같은 코드는 아래처럼 바꿀 수 있다.</span>\ncustomer<span class=\"token punctuation\">.</span><span class=\"token function\">setPlan</span><span class=\"token punctuation\">(</span>BillingPlan<span class=\"token punctuation\">.</span><span class=\"token function\">special</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 아래와 같은 코드는 어떻게 하면 처리 할 수 있을까?</span>\n<span class=\"token keyword\">let</span> weeksDelinquent\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> weeksDelinquent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">else</span> weeksDelinquent <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWeeksDelinquentInLastYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// NullPaymentHistory 라는 클래스를 만든다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NullPaymentHistory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PaymentHistory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getWeeksDelinquentInLastYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 위 처럼 작성해놓으면 조건문을 삭제할 수 있다.</span>\n<span class=\"token comment\">// 널 객체가 다른 널 객체를 반환하는 일은 자주 있다.</span>\n<span class=\"token keyword\">let</span> weeksDelinquent <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">getHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWeeksDelinquentInLastYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 리팩토링 기법을 실시할 때 null 이 여러 종류일 수도 있따. customer 가 없는 것은 입주하지 않은 새 건물과 같고 미지의 customer 가 있는 것은 누군가 살지만 그게 누구인지 모르는 것과 같다.\n이렇게 다른 두 null 상황에 대한 클래스를 각각 작성하면 된다.</p>\n<h2 id=\"어설션-넣기-introduce-assertion\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EC%84%A4%EC%85%98-%EB%84%A3%EA%B8%B0-introduce-assertion\" aria-label=\"어설션 넣기 introduce assertion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어설션 넣기 (Introduce Assertion)</h2>\n<p>일부 코드가 프로그램의 어떤 상태를 전제할 땐 어설션을 넣어서 그 전제를 확실하게 코드로 작성하자.</p>\n<p>특정 조건이 참일 때만 코드의 일부분이 실행되는 경우가 많다. 객체를 사용할 때 적어도 하나의 필드엔 값이 들어있다고 가정할 수 있다.\n그런 전제는 대개 코드로 작성되어 있지 않고 알고리즘을 두루 살펴야 알 수 있고, 가끔은 주석으로 처리되어 있을 때도 있다. 이런 전제는 어설션을 넣어 명확히 드러나게 하는 것이 좋다.</p>\n<p>어설션이란 항상 참으로 전제되는 조건문을 뜻한다. 어설션이 실패하면 그건 프로그래머가 오류를 범한 것이다. 그래서 어셜션이 실패할 경우 반드시 예외를 통지하게 해야 한다.\n어셜션은 대개 제품화 단계에서 삭제한다.</p>\n<p>어설션은 의사소통과 디버깅에 도움을 준다.</p>\n<h3 id=\"예제-4\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-4\" aria-label=\"예제 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<p>간단한 개발 비용 한도 코드는 다음과 같다. 직원에게는 개인별 경비 한도를 부여할 수 있다.\n직원이 주요 프로젝트를 맡게 된다면 해당 주요 프로젝트에 대한 경비 한도를 사용할 수 있다.\n직원에게 경비 한도와 주요 프로젝트가 모두 주어질 필요는 없지만, 둘 중 하나는 반드시 주어져야 한다.\n경기 한도를 사용하는 코드에서는 이 전제가 당연하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">NULL_EXPENSE</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">=</span> <span class=\"token constant\">NULL_EXPENSE</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_primaryProject\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">!==</span> <span class=\"token constant\">NULL_EXPENSE</span>\n      <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit\n      <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_primaryProject<span class=\"token punctuation\">.</span><span class=\"token function\">getMemeberExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">withinLimit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expenseAmount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> expenseAmount <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 직원에게 프로젝트나 개인 경비 한도 중 하나가 주어져 있따는 명시적 가정이 들어있다. 이런 어설션은 다음과 같이 코드로 확실히 나타내야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Assert<span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">!==</span> <span class=\"token constant\">NULL_EXPENSE</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_primaryProject <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">!==</span> <span class=\"token constant\">NULL_EXPENSE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_primaryProject<span class=\"token punctuation\">.</span><span class=\"token function\">getMemeberExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Assert 메서드의 매개변수로 전달하는 모든 표현식이 그대로 실행되는 문제가 있기에 그 표현식을 실행하지 않기 위해선 다음과 같은 코드를 작성한다.</span>\n<span class=\"token comment\">// Assert.ON 상수가 false일 경우 뒤 표현식은 실행되지 않는다.</span>\n<span class=\"token function\">getExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Assert<span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>Assert<span class=\"token punctuation\">.</span><span class=\"token constant\">ON</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">!==</span> <span class=\"token constant\">NULL_EXPENSE</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_primaryProject <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">!==</span> <span class=\"token constant\">NULL_EXPENSE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_expenseLimit <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_primaryProject<span class=\"token punctuation\">.</span><span class=\"token function\">getMemeberExpenseLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assert 클래스엔 용도를 알기 쉬운 이름으로 된 각종 메서드가 들어 있어야 한다. isTrue 메서드 외에도 equals 메서드나 shouldNeverReachHere 메서드를 넣을 수도 있다.</p>","excerpt":"해당 글은  에서 발췌 했습니다. 코드 예제는 javascript 로 전환하였습니다. 조건문 쪼개기 (Decompose Conditional) 복잡한 조건문(if-then-else)이 있을땐 if, then, eles…","tableOfContents":"<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%A1%B0%EA%B1%B4%EB%AC%B8-%EC%AA%BC%EA%B0%9C%EA%B8%B0-decompose-conditional\">조건문 쪼개기 (Decompose Conditional)</a></li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#%EC%A4%91%EB%B3%B5-%EC%A1%B0%EA%B1%B4%EC%8B%9D-%ED%86%B5%ED%95%A9-consolidate-conditional-expression\">중복 조건식 통합 (Consolidate Conditional Expression)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-%EB%85%BC%EB%A6%AC%ED%95%A9or-%EC%97%B0%EC%82%B0%EC%9E%90\">예제: 논리합(OR) 연산자</a></li>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-%EB%85%BC%EB%A6%AC%EA%B3%B1and-%EC%97%B0%EC%82%B0%EC%9E%90\">예제: 논리곱(AND) 연산자</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%98-%EA%B3%B5%ED%86%B5-%EC%8B%A4%ED%96%89-%EC%BD%94%EB%93%9C-%EB%B9%BC%EB%82%B4%EA%B8%B0-consolidate-duplicate-conditional-fragments\">조건문의 공통 실행 코드 빼내기 (Consolidate Duplicate Conditional Fragments)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C\">예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#%EC%A0%9C%EC%96%B4-%ED%94%8C%EB%9E%98%EA%B7%B8-%EC%A0%9C%EA%B1%B0-remove-control-flag\">제어 플래그 제거 (Remove Control Flag)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%A0%9C%EC%96%B4-%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC-break-%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EA%B5%90%EC%B2%B4\">예제: 간단한 제어 플래그를 break 문으로 교체</a></li>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-%EC%A0%9C%EC%96%B4-%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC-return-%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EA%B5%90%EC%B2%B4\">예제: 제어 플래그를 return 문으로 교체</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#%EC%97%AC%EB%9F%AC-%EA%B2%B9%EC%9D%98-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EA%B0%90%EC%8B%9C-%EC%A0%88%EB%A1%9C-%EC%A0%84%ED%99%98-replace-nested-conditional-with-guard-clauses\">여러 겹의 조건문을 감시 절로 전환 (Replace Nested Conditional with Guard Clauses)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-1\">예제</a></li>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">예제: 조건문을 역순으로 만들기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%9E%AC%EC%A0%95%EC%9D%98%EB%A1%9C-%EC%A0%84%ED%99%98-replace-conditional-with-polymorphism\">조건문을 재정의로 전환 (Replace Conditional with Polymorphism)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-2\">예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#null-%EA%B2%80%EC%82%AC%EB%A5%BC-%EB%84%90-%EA%B0%9D%EC%B2%B4%EC%97%90-%EC%9C%84%EC%9E%84-introduce-null-object\">Null 검사를 널 객체에 위임 (Introduce Null Object)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-3\">예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/concise-conditionals/#%EC%96%B4%EC%84%A4%EC%85%98-%EB%84%A3%EA%B8%B0-introduce-assertion\">어설션 넣기 (Introduce Assertion)</a></p>\n<ul>\n<li><a href=\"/ho_blog/concise-conditionals/#%EC%98%88%EC%A0%9C-4\">예제</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/concise-conditionals/"},"frontmatter":{"title":"(리팩토링) 조건문 간결화","date":"Apr 03, 2019","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/concise-conditionals/","series":[],"lastmod":"0001-01-01"}}}