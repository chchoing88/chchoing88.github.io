{"componentChunkName":"component---src-templates-post-tsx","path":"/context-hooks.md/","result":{"data":{"markdownRemark":{"html":"<p>React 16 버젼으로 올라오면서 Context 와 Hooks를 이용해서 store를 대체 할 수 있다는데 Atomic 구조와 어떻게 쓰면 성능을 신경쓰면서 사용 할 수 있을지에 대한 고민 글입니다.\nReact Context 와 Hooks를 사용하면 zero configuration 의 장점이 있습니다.</p>\n<p>컴포넌트는 함수형 컴포넌트로 만듭니다.</p>\n<p>Atomic 구조 : <code class=\"language-text\">atoms &gt; molecules &gt; organisms &gt; template + pages</code></p>\n<h2 id=\"hooks-와-context의-역할\" style=\"position:relative;\"><a href=\"#hooks-%EC%99%80-context%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"hooks 와 context의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks 와 Context의 역할</h2>\n<p>Hooks의 가장 큰 장점 중 하나는 <strong>상태와 관련된 로직을 재사용</strong> 할 수 있다는 것입니다. 따라서 <strong>컴포넌트와 무관하게 관련된 상태와 로직</strong>을 Hooks로 구현을 하도록 합니다. 특히 <code class=\"language-text\">custom Hooks</code> 를 만들어 재 활용 할 수 있다는 장점이 있습니다. </p>\n<p>Hooks의 단점을 꼽자면 Hooks을 가지고 있는 컴포넌트 하위로는 props로 데이터나 메서드를 내려 보낼 순 있지만 자식 컴포넌트가 부모 컴포넌트에게 영향을 미치기란 어렵다. 즉, 공유하기가 어려움.</p>\n<p>Context는 <strong>일정한 범위에 속한 컴포넌트 트리 간 데이터 공유</strong> 를 쉽게 할 수 있도록 고안 된 API입니다. 필요한 컴포넌트에 일일이 props로 전달하지 않아도 Context 가 가지고 있는 값을 공유 받을 수 있다는게 가장 큰 장점입니다.</p>\n<h2 id=\"atomic-과-hooks-context가-만났을때-사용-정의\" style=\"position:relative;\"><a href=\"#atomic-%EA%B3%BC-hooks-context%EA%B0%80-%EB%A7%8C%EB%82%AC%EC%9D%84%EB%95%8C-%EC%82%AC%EC%9A%A9-%EC%A0%95%EC%9D%98\" aria-label=\"atomic 과 hooks context가 만났을때 사용 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atomic 과 Hooks, Context가 만났을때 사용 정의</h2>\n<ul>\n<li>하나의 기능에 대한 상태와 메서드들은 하나의 <code class=\"language-text\">custom Hooks</code>로 묶어 둡니다. </li>\n<li>Atomic 관점에서 기능의 응집도가 높은 단위는 <code class=\"language-text\">organisms</code> 또는 <code class=\"language-text\">molecules</code> 단위가 될 수 있습니다. </li>\n<li><code class=\"language-text\">organisms</code> 과 하나의 <code class=\"language-text\">custom Hooks</code> 의 관계는 1 대 N 이 될 수 있습니다.</li>\n<li><code class=\"language-text\">molecules</code> 와 하나의 <code class=\"language-text\">custom Hooks</code> 의 관계는 1 대 1 관계를 유지 합니다. </li>\n<li><code class=\"language-text\">Context.Provider</code> 로 <code class=\"language-text\">Context</code> 범위 설정은 여러 기능에서 상태를 공유해야 하는 상황인 <code class=\"language-text\">organisms</code> 또는 <code class=\"language-text\">pages</code> 단위에 매칭이 되어야 합니다.</li>\n<li><code class=\"language-text\">pages</code> 단위 에서 <code class=\"language-text\">Context.Provider</code>로 공유가 필요한 값을 주입 합니다. 이때, 자주 변경이 이러나는 <code class=\"language-text\">Provider</code> 를 제일 안쪽에 위치시키도록 합니다.</li>\n<li><code class=\"language-text\">organisms</code> 단위에서는 <code class=\"language-text\">useContext</code>로 해당 <code class=\"language-text\">Context</code> 값을 참조해 오도록 합니다. </li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">Context.Provider</code> 의 value 가 바뀌면 <code class=\"language-text\">useContext</code> 로 구독하고 있는 컴포넌트는 한번씩 호출을 하게 된다. (Reconciliation - component가 호출되서 리턴된 Element가 이전 Element와 같은지 비교) ( 호출 자체가 비용이 많지는 않지만 Virtual Dom인 React Element를 새롭게 만들어내는 불필요한 작업을 하게 될 수도 있습니다. 사실 중요한건 React Element가 이전과 바뀌지 않게 유지하는 것입니다. )</p>\n</blockquote>\n<blockquote>\n<p>잘못 알고 있었던 사실 : <code class=\"language-text\">Context.Provider</code>의 <code class=\"language-text\">value</code> 값이 바뀌면 그 밑에 <code class=\"language-text\">children</code> 컴포넌트들이 전부 호출이 되는 줄 알았으나 사실은 해당 <code class=\"language-text\">Context</code> 를 구독하고 있는 컴포넌트를 상위로 하위 자식 컴포넌트들만 호출이 된다.</p>\n</blockquote>\n<h2 id=\"언제-hooks-와-context를-쓸까\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-hooks-%EC%99%80-context%EB%A5%BC-%EC%93%B8%EA%B9%8C\" aria-label=\"언제 hooks 와 context를 쓸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 Hooks 와 Context를 쓸까?</h2>\n<ul>\n<li>기본적으로 상태가 필요한 기능은 <code class=\"language-text\">Hooks</code> 를 사용합니다.</li>\n<li><strong>재사용</strong>이 필요한 기능에 대해서는 <code class=\"language-text\">custom Hooks</code>를 만들어 다양한 컴포넌트에서 사용합니다.</li>\n<li>상태가 <strong>전역</strong> 관리되어져야 할때와 서로 다른 컴포넌트 끼리의 <strong>공유</strong> 가 필요할 시에는 <code class=\"language-text\">Context</code>를 사용합니다.</li>\n</ul>\n<h2 id=\"hooks-사용\" style=\"position:relative;\"><a href=\"#hooks-%EC%82%AC%EC%9A%A9\" aria-label=\"hooks 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks 사용</h2>\n<ul>\n<li>Hooks는 함수형 컴포넌트에서 <code class=\"language-text\">상태에 따른 관련 메서드들의 응집도를 높이고 재사용성</code>을 위해 사용됩니다. ( 비교 대상은 class component에서 흔히 life cycle에 따라 관련 로직들이 흩어져 있는 모습을 볼수가 있습니다. )</li>\n<li>서로 연관된 상태와 기능을 가진 <code class=\"language-text\">custom Hooks</code> 를 제작해 특정 component(View)에 의존하지 않는 별도의 Hooks로 만들면 <strong>재사용성</strong>에 도움이 됩니다.</li>\n<li><code class=\"language-text\">computed</code> 한 값은 <code class=\"language-text\">useMemo</code>로 상태값을 저장해 두고, <code class=\"language-text\">action</code> 을 공유해야 하는 함수의 경우에는 <code class=\"language-text\">useCallback</code> 을 사용해서 매번 함수가 새로 만들어 지는걸 방지 합니다.</li>\n<li><code class=\"language-text\">setState</code> 의 리턴된 배열이 [<code class=\"language-text\">상태</code>, <code class=\"language-text\">set함수</code>]라 했을 때 두번째 <code class=\"language-text\">set함수</code>를 사용할 때는 <strong>함수형 업데이트</strong> (<code class=\"language-text\">setXXX(preState =&gt; newState)</code>)를 이용하면 <code class=\"language-text\">상태</code> 값에 의존적이지 않아도 됩니다. </li>\n</ul>\n<h3 id=\"예시-탭-ui\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%ED%83%AD-ui\" aria-label=\"예시 탭 ui permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시) 탭 UI</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// hooks/ui.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useMemo<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTab</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tabDataList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tabList<span class=\"token punctuation\">,</span> setTabList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>tabDataList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{id: 'merlin', name: 'merlin', content: &lt;Merlin/>, actived: true}]</span>\n \n  <span class=\"token comment\">// action 하는 함수들</span>\n  <span class=\"token comment\">// tab을 추가 하려 할때</span>\n  <span class=\"token keyword\">const</span> addTabList <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 함수형 업데이트 </span>\n    <span class=\"token function\">setTabList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabList</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>tabList<span class=\"token punctuation\">,</span>\n      tabData\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token comment\">// 탭 눌렀을때 </span>\n  <span class=\"token keyword\">const</span> onHandleTabClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// tabName 이 맞는게 있으면 그걸 true 바꾸고 나머지 false</span>\n    <span class=\"token comment\">// 맞는게 없으면 그대로 두자.</span>\n    <span class=\"token comment\">// 함수형 업데이트</span>\n    <span class=\"token function\">setTabList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabList</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tabList<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabData</span> <span class=\"token operator\">=></span> tabData<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> tabId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> tabList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabData<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          tabData<span class=\"token punctuation\">.</span>actived <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tabData<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> tabId<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> tabData\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> tabList\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Computed 한 값</span>\n  <span class=\"token comment\">// 현재 탭 index </span>\n  <span class=\"token keyword\">const</span> currentTabIndex <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> tabList<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabData</span> <span class=\"token operator\">=></span> tabData<span class=\"token punctuation\">.</span>actived<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tabList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 전체 탭 갯수 </span>\n  <span class=\"token keyword\">const</span> tabLength <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> tabList <span class=\"token operator\">&amp;&amp;</span> tabList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tabList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    currentTabIndex<span class=\"token punctuation\">,</span>\n    tabLength<span class=\"token punctuation\">,</span>\n    tabList<span class=\"token punctuation\">,</span>\n    onHandleTabClick<span class=\"token punctuation\">,</span>\n    initTabList<span class=\"token punctuation\">,</span>\n    addTabList\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> useTab <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TabWrapper.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTab <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'hooks/ui'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TabWrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    currentTabIndex<span class=\"token punctuation\">,</span>\n    tabLength<span class=\"token punctuation\">,</span>\n    tabList<span class=\"token punctuation\">,</span>\n    onHandleTabClick<span class=\"token punctuation\">,</span>\n    initTabList\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'merlin'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'merlin'</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Merlin <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> actived<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'ho'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span><span class=\"token string\">'ho'</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Ho <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> actived<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TabList activedIndex<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>currentTabIndex<span class=\"token punctuation\">}</span> onClickTab<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onHandleTabClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TabContents activedTabContent<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tabList<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"context-사용\" style=\"position:relative;\"><a href=\"#context-%EC%82%AC%EC%9A%A9\" aria-label=\"context 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context 사용</h2>\n<ul>\n<li><code class=\"language-text\">Context.Provider</code> 는 합성 패턴을 이용해서 만들어 줍니다.</li>\n<li><code class=\"language-text\">Context</code> 는 단독 기능으론 관계가 없지만 서로 엮어서 기능을 해야할때 서로 가지고 있는 상태나 메서드를 <strong>공유</strong> 해야 할 필요성이 있을 때 사용합니다.</li>\n<li><code class=\"language-text\">Context</code> 안에서도 자주 쓰는 기능이 있을 경우에는 <code class=\"language-text\">custom Hooks</code> 로 빼두어서 해당 <code class=\"language-text\">custom Hooks</code>를 <code class=\"language-text\">state</code> 관리용으로 사용합니다.</li>\n<li><code class=\"language-text\">Context.Provider</code> 의 <code class=\"language-text\">value props</code>에 넘기는 값은 별도의 <code class=\"language-text\">Provider 컴포넌트</code>를 만들어 그 컴포넌트 안에 <code class=\"language-text\">state</code>를 유지하게 만들어 줍니다. </li>\n<li>\n<p><code class=\"language-text\">Provider 컴포넌트</code> 안의 <code class=\"language-text\">state</code> 값은 <code class=\"language-text\">useState</code> 를 이용해서 관리합니다. </p>\n<ul>\n<li>일반 객체롤 상태관리를 할 경우 Provider 컴포넌트가 호출될 때마다 이전 객체를 유지하지 못합니다. 매 새로운 객체가 만들어지게 됩니다.</li>\n<li>일반 객체를 상태관리를 했을 경우 상태가 변경되었을때 React의 재 렌더링을 진행하라는 신호를 주지 못하게 됩니다. </li>\n</ul>\n</li>\n<li><code class=\"language-text\">Provider 컴포넌트</code> 의 <code class=\"language-text\">state</code>의 변경을 위한 메서드 공유가 필요한 경우 에는 별도의 객체를 만들어 <code class=\"language-text\">useMemo</code>로 매 호출마다 객체가 바뀌지 않게 막아줍니다. (적절한 디펜던시를 걸어주어서 디펜던시가 바뀌었을 때만 변경이 되도록 합니다.)</li>\n<li><strong>상태와 액션을 가지고 있는 Context 가 있다고 하고 액션만 필요한 컴포넌트만 있다고 했을때, 상태 변경시 불필요하게 액션만 필요한 컴포넌트도 렌더링이 될 수 있으니 이때는 상태 Context와 액션 Context로 분리해서 사용하자.</strong></li>\n</ul>\n<h3 id=\"기본-포멧-예시\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%8F%AC%EB%A9%A7-%EC%98%88%EC%8B%9C\" aria-label=\"기본 포멧 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 포멧 예시</h3>\n<ul>\n<li>TodoList 에서 'done', 'doing', 'todo' 의 리스트 갯수를 Header 에서 보여주어야 한다면 TodoList 정보를 <code class=\"language-text\">Context</code>로 관리 <code class=\"language-text\">Pages</code> 단위의 범주로 설정해야 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Context 기본 포멧</span>\n<span class=\"token comment\">// TodoContext.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> TodoContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 상태</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todoList<span class=\"token punctuation\">,</span> setTodoList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 액션</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Bad!!</span>\n  <span class=\"token comment\">// const store = {</span>\n  <span class=\"token comment\">//   name: 'merlin',</span>\n  <span class=\"token comment\">//   setName: () => {}</span>\n  <span class=\"token comment\">// }</span>\n  \n  <span class=\"token comment\">// (...)</span>\n\n  <span class=\"token keyword\">const</span> todoStore <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    todoList<span class=\"token punctuation\">,</span>\n    addTodo<span class=\"token punctuation\">,</span>\n    removeTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>todoList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>TodoContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoStore<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TodoContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> TodoProvider <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoContext</code></pre></div>\n<ul>\n<li>TodoProvider 컴포넌트 안에서 사용하는 Hooks들의 로직이 <strong>재사용이 필요하거나 로직이 복잡해질때는 custom Hooks로 빼둡니다.</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// useTodo.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todoList<span class=\"token punctuation\">,</span> setTodoList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// (...)</span>\n\n  <span class=\"token keyword\">const</span> todoStore <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    todoList<span class=\"token punctuation\">,</span>\n    addTodo<span class=\"token punctuation\">,</span>\n    removeTodo<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>todoList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> TodoStore\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TodoContext.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> useTodo <span class=\"token keyword\">from</span> <span class=\"token string\">'useTodo'</span>\n\n<span class=\"token keyword\">const</span> TodoContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todoStore <span class=\"token operator\">=</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>TodoContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoStore<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TodoContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> TodoProvider <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoContext</code></pre></div>\n<h3 id=\"organisms-컴포넌트-범위에서-provider를-하면서-organisms-내에서-usecontext를-사용하지-않고-재사용할-수-있도록-props로-받는-컴포넌트를-만들고-싶다면-필요시\" style=\"position:relative;\"><a href=\"#organisms-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B2%94%EC%9C%84%EC%97%90%EC%84%9C-provider%EB%A5%BC-%ED%95%98%EB%A9%B4%EC%84%9C-organisms-%EB%82%B4%EC%97%90%EC%84%9C-usecontext%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-props%EB%A1%9C-%EB%B0%9B%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4-%ED%95%84%EC%9A%94%EC%8B%9C\" aria-label=\"organisms 컴포넌트 범위에서 provider를 하면서 organisms 내에서 usecontext를 사용하지 않고 재사용할 수 있도록 props로 받는 컴포넌트를 만들고 싶다면 필요시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>organisms 컴포넌트 범위에서 provider를 하면서 organisms 내에서 useContext를 사용하지 않고 재사용할 수 있도록 props로 받는 컴포넌트를 만들고 싶다면? (필요시)</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// util.js</span>\n<span class=\"token comment\">// Context value 값을 어떻게 매핑할지 정의하는 함수와 적용할 컴포넌트를 인자로 받아 새로운 컴포넌트를 만들어 주는 HOC</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createWithProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">Context<span class=\"token punctuation\">,</span>\n  Provider</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">mapContextToProps</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">WrappedComponent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UseContextComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> contextValue <span class=\"token operator\">=</span> <span class=\"token function\">mapContextToProps</span><span class=\"token punctuation\">(</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>contextValue<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>WrappedComponent<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withProvier</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>UseContextComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>UseContextComponent<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> displayName <span class=\"token operator\">=</span>\n    WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'component'</span>\n  withProvier<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> displayName\n\n  <span class=\"token keyword\">return</span> withProvier\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TodoContext.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> useTodo <span class=\"token keyword\">from</span> <span class=\"token string\">'useTodo'</span>\n\n<span class=\"token keyword\">const</span> TodoContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todoStore <span class=\"token operator\">=</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>TodoContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoStore<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TodoContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Context value 값을 어떻게 매핑할지 정의하는 함수와 적용할 컴포넌트를 인자로 받아 새로운 컴포넌트를 만들어 주는 HOC</span>\n<span class=\"token keyword\">const</span> withTodoProvider <span class=\"token operator\">=</span> <span class=\"token function\">createWithProvider</span><span class=\"token punctuation\">(</span>TodoContext<span class=\"token punctuation\">,</span> TodoProvider<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> TodoProvider<span class=\"token punctuation\">,</span> withTodoProvider <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoContext</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// TodoContainer.js</span>\n\n<span class=\"token keyword\">import</span> Todo <span class=\"token keyword\">from</span> <span class=\"token string\">'../organisms/todo/Todo'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withTodoProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../context/TodoContext'</span>\n\n<span class=\"token comment\">// Todo organism의 props에 Context value 값을 매핑</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withTodoProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todoList<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  todoList<span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Todo<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"reactmemo-를-사용한-컴포넌트-리렌더링-방지\" style=\"position:relative;\"><a href=\"#reactmemo-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%B0%A9%EC%A7%80\" aria-label=\"reactmemo 를 사용한 컴포넌트 리렌더링 방지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.memo 를 사용한 컴포넌트 리렌더링 방지</h2>\n<ul>\n<li><code class=\"language-text\">React.memo</code>는 higher order component로 props의 얕은 비교를 통해 리 렌더링 성능을 올립니다.</li>\n<li>함수형 컴포넌트의 <code class=\"language-text\">props</code> 변경이 없다면 컴포넌트의 호출을 막아 불필요한 리 렌더링(실제 DOM에 그려지는 것이 아닌 컴포넌트 호출로 새로운 React Element 생성) 되는 것을 방지하여 렌더링 성능을 최적화 시킬 수 있습니다.</li>\n<li><code class=\"language-text\">Atomic</code> 컴포넌트 단위에선 <code class=\"language-text\">molecules</code> 컴포넌트 단위에서 <code class=\"language-text\">React.memo</code>를 사용할 수 있도록 합니다. 또는 성능을 실제로 개선할 수 있는 상황에서 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>memo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>todoList<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>TodoItem<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>일반적인 얕은 비교가 아닌 <code class=\"language-text\">React.memo</code>에서 두번째 파라미터에 <code class=\"language-text\">propsAreEqual</code> 이라는 함수를 사용하여 특정 값들만 비교를 하는 것도 가능합니다. 리턴 값이 <code class=\"language-text\">true</code>(이전 props랑 다음에 들어오는 props가 같은 경우)면 리렌더링을 방지하고 <code class=\"language-text\">false</code> 면 리 렌더링을 실행합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>memo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>todoList<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>TodoItem<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prevProps<span class=\"token punctuation\">.</span>todoList <span class=\"token operator\">===</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"언제-usememo-and-usecallback를-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-usememo-and-usecallback%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"언제 usememo and usecallback를 사용해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 useMemo and useCallback를 사용해야 할까</h2>\n<ol>\n<li>JSX의 인라인으로 넘기는 함수 body 부분에 <code class=\"language-text\">useCallback</code> 을 사용한 함수를 넘기지 말아야 합니다. 어짜피 JSX의 인라인으로 함수를 넘기게 되면 항상 렌더링이 되게 되어 있습니다.</li>\n<li><code class=\"language-text\">useMemo</code> 또한 값을 메모이제이션을 시키는 함수인데 해당 값을 컴포넌트 밖으로 빼서 관리 할 수 있다면 굳이 <code class=\"language-text\">useMemo</code>를 사용할 필요가 없습니다.</li>\n<li>부모 함수형 컴포넌트에서 호출 될때 새로운 함수 또는 값을 할당해서 자식 컴포넌트의 props로 넘기게 될때 불필요한 호출을 하게 될때 <code class=\"language-text\">useMemo</code>와 <code class=\"language-text\">useCallback</code>을 사용합시다.</li>\n<li>특히 함수 컴포넌트 내에서 비싼 호출을 하는 함수가 있을 경우에는 더더욱 <code class=\"language-text\">useMemo</code>를 사용합시다.</li>\n<li>부모 컴포넌트에서 다른 자식들로 인해 현재 자식 컴포넌트가 렌더링에 호출될 위험에 있을땐, <code class=\"language-text\">React.memo</code>를 사용해서 props가 바뀔때만 렌더링이 이뤄지도록 합시다.</li>\n</ol>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.huskyhoochu.com/react-pattern-hooks-and-contexts/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Hooks와 Context를 이용한 설계 패턴</a></li>\n<li><a href=\"https://velog.io/@velopert/typescript-context-api#context-%EC%A4%80%EB%B9%84%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript 환경에서 리액트 Context API 제대로 활용하기</a></li>\n<li><a href=\"https://ideveloper2.dev/blog/2019-06-14--when-to-use-memo-and-use-callback/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">When to useMemo and useCallback</a></li>\n</ul>","excerpt":"React 16 버젼으로 올라오면서 Context 와 Hooks를 이용해서 store를 대체 할 수 있다는데 Atomic 구조와 어떻게 쓰면 성능을 신경쓰면서 사용 할 수 있을지에 대한 고민 글입니다.\nReact Context 와 Hooks…","tableOfContents":"<ul>\n<li><a href=\"/ho_blog/context-hooks.md/#hooks-%EC%99%80-context%EC%9D%98-%EC%97%AD%ED%95%A0\">Hooks 와 Context의 역할</a></li>\n<li><a href=\"/ho_blog/context-hooks.md/#atomic-%EA%B3%BC-hooks-context%EA%B0%80-%EB%A7%8C%EB%82%AC%EC%9D%84%EB%95%8C-%EC%82%AC%EC%9A%A9-%EC%A0%95%EC%9D%98\">Atomic 과 Hooks, Context가 만났을때 사용 정의</a></li>\n<li><a href=\"/ho_blog/context-hooks.md/#%EC%96%B8%EC%A0%9C-hooks-%EC%99%80-context%EB%A5%BC-%EC%93%B8%EA%B9%8C\">언제 Hooks 와 Context를 쓸까?</a></li>\n<li>\n<p><a href=\"/ho_blog/context-hooks.md/#hooks-%EC%82%AC%EC%9A%A9\">Hooks 사용</a></p>\n<ul>\n<li><a href=\"/ho_blog/context-hooks.md/#%EC%98%88%EC%8B%9C-%ED%83%AD-ui\">예시) 탭 UI</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/ho_blog/context-hooks.md/#context-%EC%82%AC%EC%9A%A9\">Context 사용</a></p>\n<ul>\n<li><a href=\"/ho_blog/context-hooks.md/#%EA%B8%B0%EB%B3%B8-%ED%8F%AC%EB%A9%A7-%EC%98%88%EC%8B%9C\">기본 포멧 예시</a></li>\n<li><a href=\"/ho_blog/context-hooks.md/#organisms-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B2%94%EC%9C%84%EC%97%90%EC%84%9C-provider%EB%A5%BC-%ED%95%98%EB%A9%B4%EC%84%9C-organisms-%EB%82%B4%EC%97%90%EC%84%9C-usecontext%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-props%EB%A1%9C-%EB%B0%9B%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4-%ED%95%84%EC%9A%94%EC%8B%9C\">organisms 컴포넌트 범위에서 provider를 하면서 organisms 내에서 useContext를 사용하지 않고 재사용할 수 있도록 props로 받는 컴포넌트를 만들고 싶다면? (필요시)</a></li>\n</ul>\n</li>\n<li><a href=\"/ho_blog/context-hooks.md/#reactmemo-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%B0%A9%EC%A7%80\">React.memo 를 사용한 컴포넌트 리렌더링 방지</a></li>\n<li><a href=\"/ho_blog/context-hooks.md/#%EC%96%B8%EC%A0%9C-usememo-and-usecallback%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">언제 useMemo and useCallback를 사용해야 할까</a></li>\n<li><a href=\"/ho_blog/context-hooks.md/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/context-hooks.md/"},"frontmatter":{"title":"React Context 와 Hooks 설계","date":"Dec 11, 2019","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/context-hooks.md/","series":[],"lastmod":"0001-01-01"}}}