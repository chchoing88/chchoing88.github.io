{"componentChunkName":"component---src-templates-post-tsx","path":"/experience-monorepo.md/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>intro</h2>\n<ul>\n<li>공통모듈을 한 repo 에서 관리 하는 시도를 해보자.</li>\n<li>여러 npm 패키지를 하나의 github repo 에서 관리하자.</li>\n<li>즉, monorepo 를 구축해서 공통모듈을 관리하는 환경을 만들자.</li>\n</ul>\n<h2 id=\"monorepo-의-이점\" style=\"position:relative;\"><a href=\"#monorepo-%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"monorepo 의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>monorepo 의 이점</h2>\n<ul>\n<li>lint 나 build, test, release 프로세스를 한가지로 가져갈수 있다.</li>\n<li>개발 환경을 따로 구축할 수고를 덜어준다.</li>\n<li>devDependency 를 한곳에서 관리 할 수 있다.</li>\n<li>여러 이슈를 중앙에서 관리할 수 있다.</li>\n</ul>\n<h2 id=\"monorepo-의-단점\" style=\"position:relative;\"><a href=\"#monorepo-%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"monorepo 의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>monorepo 의 단점</h2>\n<ul>\n<li>한 repo 가 커질 수 있다.</li>\n</ul>\n<h2 id=\"monorepo-를-사용하고-있는-곳\" style=\"position:relative;\"><a href=\"#monorepo-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94-%EA%B3%B3\" aria-label=\"monorepo 를 사용하고 있는 곳 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>monorepo 를 사용하고 있는 곳</h2>\n<ul>\n<li>babel</li>\n<li>react</li>\n<li>etc..</li>\n</ul>\n<h2 id=\"monorepo-를-사용할-수-있는-수단\" style=\"position:relative;\"><a href=\"#monorepo-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%88%98%EB%8B%A8\" aria-label=\"monorepo 를 사용할 수 있는 수단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>monorepo 를 사용할 수 있는 수단.</h2>\n<ul>\n<li>lerna <a href=\"https://lernajs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://lernajs.io/</a></li>\n<li>yarn workspace <a href=\"https://yarnpkg.com/lang/en/docs/workspaces/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yarnpkg.com/lang/en/docs/workspaces/</a></li>\n<li>git sub-modules</li>\n</ul>\n<h2 id=\"lerna\" style=\"position:relative;\"><a href=\"#lerna\" aria-label=\"lerna permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lerna</h2>\n<p>각각의 독립적인 버젼을 가지고 있는 큰 코드베이스 분리는 코드 공유에 큰 이점을 가진다.\n하지만 많이 얽혀져있는 repositories 는 추적하기도 어렵고 지저분합니다. 그리고 테스팅도 복잡해집니다.</p>\n<p>이 문제를 해결하기 위해 몇몇 프로젝트는 multi-package repositories 를 설계하고(monorepos 라고 불리움) Babel, React, Angular, Ember, Meteor, Jest 프로젝트들이 싱글 repository 안에 그들의 모든 패키지들을 관리합니다.</p>\n<p>lerna 툴은 git 및 npm 을 사용하여 multi-package repositories 를 관리하는 작업을 최적화 하는 도구이다.</p>\n<p>Lerna 는 또한 개발 및 빌드 환경에서 패키지의 수많은 복사본에 대한 시간과 공간을 줄여줍니다.</p>\n<p><code class=\"language-text\">lerna 3.0 이상을 기준으로 합니다.</code></p>\n<h3 id=\"lerna-명령어-사용법\" style=\"position:relative;\"><a href=\"#lerna-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"lerna 명령어 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lerna 명령어 사용법</h3>\n<ul>\n<li>lerna 초기화 및 independent 모드로 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna init -i</code></pre></div>\n<ul>\n<li>각 패키지 안에 들어있는 모듈의 npm install 을 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna bootstrap\n<span class=\"token comment\"># 1. 각 패키지의 모든 외부 dependecies를 npm install 해준다.</span>\n<span class=\"token comment\"># 2. 서로의 dependencies들을 가지고 있는 package들을 Symlink 해준다.</span>\n<span class=\"token comment\"># 3. 모든 bootstrap 당한 packaged들을 npm run prepublish를 실행한다. ( --ignore-prepublish가 없을경우)</span>\n<span class=\"token comment\"># 4. 모든 bootstrap 당한 packaged들을 npm run prepare를 실행한다.</span>\n\n$ lerna bootstrap --hoist <span class=\"token punctuation\">[</span>glob<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># glob에 매칭된 모든 외부 dependencies들을 repo의 root에 설치해준다. </span>\n<span class=\"token comment\"># 이 dependencies들은 node_moules/.bin/ 디렉토리에 연결되고 npm script가 가능하게 해준다. </span></code></pre></div>\n<p>여기서 hoist를 사용하게 되면 다음과 같은 수행을 하게 됩니다.</p>\n<ul>\n<li>공통된 dependencies들을 오직 top-level의 node<em>modules에 설치하고 각각의 package에의 node</em>modules에서 생략됩니다.</li>\n<li>서로 다른 버젼을 가진 package들은 각 로컬에 정상적으로 설치하게 됩니다.</li>\n<li>공통 패키지들의 바이너리 파일들은 개별 패키지의 node_modules/.bin/ 디렉토리와 심볼릭 링크되어 있으므로 package.json 스크립트를 수정없이 사용할수 있다.</li>\n</ul>\n<p>Node module resolution algorithm에 따르면 패키지 A를 찾으려고 할때 가장먼저 node<em>modules/A 를 찾고 그 후엔 ../node</em>modules/A, ../../node<em>modules/A, ../../../node</em>modules/A 이런식으로 상위 폴더의 node_modules를 찾곤한다. </p>\n<p>하지만 특히 dependencies들이 local에 있다고 구체적으로 가정하거나 요구하는 경우에는 위 룰을 따르지 않는다. 그래서 이 문제를 해결하기 위해선 top-level에 있는 패키지를 각 패키지 node_module 디렉토리에 symlink 하는 방법이 있다. 하지만 lerna에선 지원하지 않는다.</p>\n<ul>\n<li>각 패키지들이 마지막 릴리즈 이후에 변화가 있었는지 체크</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna updated</code></pre></div>\n<ul>\n<li>각 패키지 안에 있는 npm script 를 한번에 run 시켜줌.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna run <span class=\"token punctuation\">[</span>script<span class=\"token punctuation\">]</span>\n\n$ lerna run --scope my-component <span class=\"token builtin class-name\">test</span></code></pre></div>\n<ul>\n<li>각 패키지 안에서 쉘 스크립트를 실행할수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna <span class=\"token builtin class-name\">exec</span> <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">## ex) lerna exec rm -rf ./node_modules</span></code></pre></div>\n<ul>\n<li>모듈간의 의존성 추가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">## moduleb 의 package.json에 dependency에 modulea 추가</span>\n$ lerna <span class=\"token function\">add</span> modulea --scope<span class=\"token operator\">=</span>moduleb\n\n<span class=\"token comment\">## moduleb 의 package.json에 devDependency에 modulea 추가</span>\n$ lerna <span class=\"token function\">add</span> modulea --scope<span class=\"token operator\">=</span>moduleb --dev\n\n<span class=\"token comment\">## 모든 모듈 package.json에 devDependency에 moduleb 추가</span>\n$ lerna <span class=\"token function\">add</span> modulea</code></pre></div>\n<ul>\n<li>버젼을 수정합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna version <span class=\"token number\">1.0</span>.1 <span class=\"token comment\"># explicit</span>\n$ lerna version patch <span class=\"token comment\"># semver keyword</span>\n$ lerna version       <span class=\"token comment\"># select from prompt(s)</span></code></pre></div>\n<p>해당 버젼을 수행하면 다음과 같은 일이 일어난다.</p>\n<ol>\n<li>이전 태그 릴리즈 이전부터의 지금까지의 변경사항을 확인한다.</li>\n<li>새로운 버젼에 대한 프롬프트 안내를 한다.</li>\n<li>새로운 릴리즈 정보를 반영한 패키지를 수정한다.</li>\n<li>변경사항을 커밋하고 그 커밋에 태그를 단다.</li>\n<li>git remote에 push한다.</li>\n</ol>\n<p><code class=\"language-text\">주의</code> : version 명령시에 git push를 할 수 있는 상태가 되어야 한다. 이미 push를 다 해버린 상태라면 push를 할 수가 없다고 에러가 뜬다.</p>\n<p>그래서 수동으로 package.json의 version 을 내리고 다시 lerna version으로 올리는 방법이 있겠다.\n그전에 git tag -d 로 기존에 있던 tag들은 없앤다.</p>\n<ul>\n<li>배포 ( git 및 npm )</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna publish\n<span class=\"token comment\">## git 뿐만 아니라 npmjs 에도 배포 ( npm publish )</span>\n\n$ lerna publish --skip-npm <span class=\"token comment\">## Deprecated</span>\n<span class=\"token comment\">## npm 생략 ( 대신 git 에도 올라가지 않음 )</span>\n<span class=\"token comment\">## 이렇게 publish 하면 package.json 의 버전이 업데이트가 되고</span>\n<span class=\"token comment\">## 그에 관련된 의존성있던 모듈들의 package.json의 devDependency 나 dependency의 해당 모듈의 버젼도 업데이트 시켜준다.</span>\n\n$ lerna publish from-git \n<span class=\"token comment\">## explicitly publish packages tagged in current commit</span>\n<span class=\"token comment\">## lerna version을 별도로 수행하지 않고 현재 있는 태그로 publish를 도와준다. </span>\n<span class=\"token comment\">## 주의할 점은 현재 커밋의 tagged를 배포한다는 것이다. 커밋만 있고 Annotated tag가 없다면 </span>\n<span class=\"token comment\">## No tagged release found 라는 메세지가 뜨면서 배포가 되질 않는다.</span>\n<span class=\"token comment\">## 그냥 커밋만 했을시엔 lerna publish 를 실행시켜서 다시 version 을 수정해주어야 한다.</span>\n\n$ lerna publish from-package\n<span class=\"token comment\"># explicitly publish packages where the latest version is not present in the registry</span>\n<span class=\"token comment\"># 각 package.json을 확인해서 version이 registry에 있지 않은 가장 마지막 커밋을 배포한다. </span>\n<span class=\"token comment\"># 이는 이전 lerna publish가 모든 패키지 등록을 실패했을때 유용하게 사용할 수 있다.</span></code></pre></div>\n<ul>\n<li>패키지 모듈 생성 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lerna create test1\n\n<span class=\"token comment\">## lerna로 관리될 패키지 모듈 생성</span>\n<span class=\"token comment\">## test1이라는 폴더 이름으로 packages 폴더 안에 생성된다. </span></code></pre></div>\n<p><code class=\"language-text\">참고 1</code> : lerna 의 version 과 changed 의 기준은 최신 Annotated tag를 기준으로 한다. npm version 과 lerna version 의 경우 자동으로 Annotated tag를 생성해준다. ( npm version 의 경우 git 사용시 )</p>\n<p><code class=\"language-text\">참고 2</code> : npm version 과 publish 는 git 이랑 무관하게 사용할 수 있다. </p>\n<p><code class=\"language-text\">참고 3</code> : npm publish 의 경우에는 오로지 npm package.json의 version 만 보고 해당 버져닝으로 배포한다. </p>\n<ul>\n<li>자세한건 lerna 공식 홈페이지 참조.\n<a href=\"https://lernajs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://lernajs.io/</a></li>\n</ul>\n<h3 id=\"lerna-json-셋팅\" style=\"position:relative;\"><a href=\"#lerna-json-%EC%85%8B%ED%8C%85\" aria-label=\"lerna json 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lerna json 셋팅</h3>\n<ul>\n<li>version: 현재 repository 버젼</li>\n<li>packages: packages 경로, 배열과 glob 사용.</li>\n<li>command.publish.ignoreChanges: <code class=\"language-text\">lerna changed/puslish</code> 할때 포함시키지 않을 파일</li>\n<li>command.bootstrap.ignore: <code class=\"language-text\">lerna bootstrap</code> 명령어 사용할시 bootstrap 안할 리스트 , 배열과 glob 사용</li>\n<li>command.bootstrap.scope: <code class=\"language-text\">lerna bootstrap</code> 명령어 사용할시 packages 들의 영역을 지정한다. 배열과 glob 사용.</li>\n<li>command.bootstrap.npmClientArgs: <code class=\"language-text\">lerna bootstrap</code> 명령 사용할시 <code class=\"language-text\">npm install</code>에 직접 넘겨야할 인자들을 배열로 받는다.</li>\n</ul>\n<h3 id=\"lerna-장점\" style=\"position:relative;\"><a href=\"#lerna-%EC%9E%A5%EC%A0%90\" aria-label=\"lerna 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lerna 장점</h3>\n<ul>\n<li>\n<p>공통의 devDependencies 를 가질수 있다.</p>\n<ul>\n<li>대부분의 devDependencies 를 root repo 에서 당겨 받을수 있다.</li>\n<li>모든 패키지들은 같은 버젼의 dependency 로 사용할 수 있다.</li>\n<li>스토리지를 적게 들수있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"yarn-workspaces\" style=\"position:relative;\"><a href=\"#yarn-workspaces\" aria-label=\"yarn workspaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yarn Workspaces</h2>\n<p>Yarn Workspaces 는 단일 루트 package.json 파일의 하위 폴더에있는 여러 package.json 파일의 종속성을 모두 한 번에 설치할 수있는 기능입니다.</p>\n<p>또한 워크스페이스들 간의 중복된 package 를 막아주므로써 가볍고, Yarn 은 서로 의존하는 Workspace 간에 심볼릭 링크를 만들 수 있으며 모든 디렉토리의 일관성과 정확성을 보장합니다.</p>\n<p>Yarn Workspaces 는 lerna 툴 처럼 사용할 수 있는 low-level 의 primitives 이다.\nlerna 가 제공하는 high-level 의 특징들을 제공하진 않지만, 코어로직의 실행과 linking steps 로 더 향상된 퍼포먼스를 제공할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// package.json 에 아래와 같이 설정</span>\n<span class=\"token string\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"packages/*\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// jest-matcher-utils package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest-matcher-utils\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20.0.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"chalk\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.1.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"pretty-format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^20.0.3\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// jest-diff package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest-diff\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20.0.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"chalk\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.1.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"diff\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jest-matcher-utils\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^20.0.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"pretty-format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^20.0.3\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 설정 후 각 패키지 모듈안에서 <code class=\"language-text\">yarn install</code> 명령을 실행하면 아래와 같은 구조를 만들어준다.\n아래 구조에서 symlink를 잘 보자!!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| jest/\n| ---- node_modules/\n| -------- chalk/\n| -------- diff/\n| -------- pretty-format/\n| -------- jest-matcher-utils/  (symlink) -&gt; ../packages/jest-matcher-utils\n| ---- package.json\n| ---- packages/\n| -------- jest-matcher-utils/\n| ------------ node_modules/\n| ---------------- chalk/\n| ------------ package.json\n| -------- jest-diff/\n| ------------ node_modules/\n| ---------------- chalk/\n| ------------ package.json</code></pre></div>\n<p>마지막으로 <code class=\"language-text\">yarn install</code>을 진행하면 아래와 같은 계층을 얻을수 있다.</p>\n<p><code class=\"language-text\">yarn install</code>시 패키지들의 있는 모듈들을 root 디렉토리쪽으로 hoisted 시켜준다.\n대신 버젼이 다른 dependency 에 한해서는 hoisted 시켜주지 않는다.</p>\n<p>이것은 lerna 의 bootstrapping 의 <code class=\"language-text\">--hoint</code> flag 효과와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| jest/\n| ---- node_modules/\n| -------- chalk/\n| -------- diff/\n| -------- pretty-format/\n| -------- jest-matcher-utils/  (symlink) -&gt; ../packages/jest-matcher-utils\n| ---- package.json\n| ---- packages/\n| -------- jest-matcher-utils/\n| ------------ node_modules/\n| ---------------- chalk/\n| ------------ package.json\n| -------- jest-diff/\n| ------------ node_modules/\n| ---------------- chalk/\n| ------------ package.json</code></pre></div>\n<p>패키지 <code class=\"language-text\">diff</code>, <code class=\"language-text\">pretty-format</code> 그리고 symlink인 <code class=\"language-text\">jest-matcher-utils</code> 들은 root의 node_moules 디렉토리로 hoist 된다.\n그러나 <code class=\"language-text\">chalk</code>의 경우네는 root에 이미 다른 버젼이 설치되어있기 때문에 root로 hoist 되지 않는다. </p>\n<p>위와 같은 구조에서 jest-diff 워크스페이스 안이라면, 코드 안에서 다음과 같이 resolve 될것이다.</p>\n<ul>\n<li>require(‘chalk’) resolves to ./node_modules/chalk</li>\n<li>require(‘diff’) resolves to ../../node_modules/diff</li>\n<li>require(‘pretty-format’) resolves to ../../node_modules/pretty-format</li>\n<li>require(‘jest-matcher-utils’) resolves to ../../node_modules/jest-matcher-utils that is a - symlink to ../packages/jest-matcher-utils</li>\n</ul>\n<h3 id=\"yarn-workspaces-setting\" style=\"position:relative;\"><a href=\"#yarn-workspaces-setting\" aria-label=\"yarn workspaces setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yarn Workspaces setting</h3>\n<ul>\n<li>root 에 있는 package.json 에 아래와 같이 셋팅한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"workspace-a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"workspace-b\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>각 워크스페이스의 package.json 은 아래와 같이 셋팅한다.</li>\n</ul>\n<p>아래 보면 줄일 수 third-party dependecies 들이 보인다.\nWorkspaces 를 활성화 시키면 yarn 은 dependency 구조를 좀더 최적화 시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// workspace-a/package.json:</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"workspace-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"cross-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.5\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// workspace-b/package.json:</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"workspace-b\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"cross-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"workspace-a\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/package.json\n/yarn.lock\n\n/node_modules\n/node_modules/cross-env\n/node_modules/workspace-a -<span class=\"token operator\">></span> /workspace-a\n\n/workspace-a/package.json\n/workspace-b/package.json</code></pre></div>\n<ul>\n<li>위 처럼 적용이 될때 workspace-b 에있는 파일에서 workspace-a 를 요구하면 현재 Github 에 게시 된 코드가 아니라 프로젝트 내부에있는 정확한 코드가 사용되며 cross-env 패키지가 올바르게 중복 제거되어 프로젝트의 루트에 놓입니다.</li>\n<li>lerna 2.0.0 에선 lerna 커맨드 이용시 <code class=\"language-text\">--use-workspace</code> flag 를 사용하면 프로젝트의 bootstrap 을 Yarn 을 사용하게 된다. 이렇게 되면 root-level의 <code class=\"language-text\">packages.json/workspaces</code> 필드의 값이 <code class=\"language-text\">lerna.json/packages</code> 값을 재정의 한다.</li>\n</ul>\n<p>lerna.json 파일로 설정하는 방법은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"npmClient\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"useWorkspaces\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>lerna 와 yarn workspace 를 사용하면 중복되는 dependency 에 관해서 관리를 할 수 있다.</li>\n<li>yarn workspace 와 lerna 는 쉽게 통합될수 있다.</li>\n<li>lerna를 이용하면 버져닝과 publish의 flow를 강제해서 많은 모듈들을 관리할 수 있다.</li>\n<li>lerna 를 이용하면 yarn workspace 에서 할수 없는 다양한 기능들을 사용할 수 있다. ( testing, 배포 , 버젼관리 , 패키지별 scripting 명령)</li>\n<li>같은 환경속에서 여러가지 dependency 를 가지고 여러 패키지들을 다룬다면 monorepo 를 사용할만 할것 같다.</li>\n</ul>","excerpt":"intro 공통모듈을 한 repo 에서 관리 하는 시도를 해보자. 여러 npm 패키지를 하나의 github repo 에서 관리하자. 즉, monorepo 를 구축해서 공통모듈을 관리하는 환경을 만들자. monorepo 의 이점 lint 나 build…","tableOfContents":"<ul>\n<li><a href=\"/experience-monorepo.md/#intro\">intro</a></li>\n<li><a href=\"/experience-monorepo.md/#monorepo-%EC%9D%98-%EC%9D%B4%EC%A0%90\">monorepo 의 이점</a></li>\n<li><a href=\"/experience-monorepo.md/#monorepo-%EC%9D%98-%EB%8B%A8%EC%A0%90\">monorepo 의 단점</a></li>\n<li><a href=\"/experience-monorepo.md/#monorepo-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94-%EA%B3%B3\">monorepo 를 사용하고 있는 곳</a></li>\n<li><a href=\"/experience-monorepo.md/#monorepo-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%88%98%EB%8B%A8\">monorepo 를 사용할 수 있는 수단.</a></li>\n<li>\n<p><a href=\"/experience-monorepo.md/#lerna\">lerna</a></p>\n<ul>\n<li><a href=\"/experience-monorepo.md/#lerna-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9A%A9%EB%B2%95\">lerna 명령어 사용법</a></li>\n<li><a href=\"/experience-monorepo.md/#lerna-json-%EC%85%8B%ED%8C%85\">lerna json 셋팅</a></li>\n<li><a href=\"/experience-monorepo.md/#lerna-%EC%9E%A5%EC%A0%90\">lerna 장점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/experience-monorepo.md/#yarn-workspaces\">yarn Workspaces</a></p>\n<ul>\n<li><a href=\"/experience-monorepo.md/#yarn-workspaces-setting\">yarn Workspaces setting</a></li>\n</ul>\n</li>\n<li><a href=\"/experience-monorepo.md/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>","fields":{"slug":"/experience-monorepo.md/"},"frontmatter":{"title":"experience monorepo","date":"Jul 13, 2018","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/experience-monorepo.md/","series":[],"lastmod":"0001-01-01"}}}