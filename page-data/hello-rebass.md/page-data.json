{"componentChunkName":"component---src-templates-post-tsx","path":"/hello-rebass.md/","result":{"data":{"markdownRemark":{"html":"<p>이번 프로젝트에 rebass 라는 <code class=\"language-text\">React primitive ui component build with styled system</code> 이라는 라이브러리를 사용해보고 정보와 사용 느낀점을 남깁니다.</p>\n<h2 id=\"rebass-란\" style=\"position:relative;\"><a href=\"#rebass-%EB%9E%80\" aria-label=\"rebass 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rebass 란</h2>\n<p>React에서 사용할 수 있는 UI 원시 컴포넌트들을 지원하는 라이브러리로써 기존의 <code class=\"language-text\">css-in-js</code> 라이브러리에 <code class=\"language-text\">styled-system</code>을 이용해서 만들어져 있습니다.</p>\n<p>즉, css-in-js에 이런 <code class=\"language-text\">styled-system</code>을 믹싱해서 원시 컴포넌트를 미리 만들어 둔 것이 <code class=\"language-text\">rebass</code> 입니다.</p>\n<p>css-in-js : styled-component , @emotion</p>\n<h2 id=\"css-in-js-styled-component-emotion-장점\" style=\"position:relative;\"><a href=\"#css-in-js-styled-component-emotion-%EC%9E%A5%EC%A0%90\" aria-label=\"css in js styled component emotion 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css-in-js (styled-component, @emotion) 장점</h2>\n<p>여기서는 별도의 css-in-js 들을 설명하진 않겠습니다. 대신 장점 몇 가지를 나열해 보겠습니다.</p>\n<ol>\n<li>셀렉터의 스코프가 전역이 아닙니다. 이 말은, 셀렉터가 겹칠일이 없다는 것입니다.</li>\n<li>sass 문법을 사용할 수 있습니다. 즉, '&#x26;' 단어로 현재 컴포넌트를 나타낼 수 있고 이걸로 부모 , 형재 등등의 선택자들을 셀렉팅 할 수 있습니다.</li>\n<li>React Context API를 이용해 theme를 적용할 수 있습니다.</li>\n<li>다이나믹하게 스타일링을 적용할 수 있습니다. 컴포넌트에 props를 전달해서 동적으로 스타일을 정의 할 수 있습니다. 또한 js 특정 값에 따라서 스타일을 쉽게 정의 내릴 수 있습니다.</li>\n</ol>\n<p>무엇보다도 컴포넌트 베이스 디자인을 할 수 있고 작은 독립적인 단위로 UI 분할을 하는데 도움을 줍니다.</p>\n<p>한곳 또한 한 페이지 이상 또는 자주 사용된다면 특정 스타일 또는 디자인을 갖고 있다면 클래스를 만들고 어플리케이션의 다른 영역에서 그 클래스를 사용하는 것보다 하나의 스타일된 컴포넌트를 만들고 특정 컴포넌트를 사용하는 것이 중복된 css를 줄이고 color 또는 공간을 조정하는 것 같은 UI를 약간 변경하는 데 필요한 시간을 줄입니다.  </p>\n<h2 id=\"styled-system-이란\" style=\"position:relative;\"><a href=\"#styled-system-%EC%9D%B4%EB%9E%80\" aria-label=\"styled system 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-system 이란</h2>\n<p><code class=\"language-text\">Styled System</code>은 <code class=\"language-text\">constraint-based design system principles</code>에 영향을 받아 비주얼 디자인의 특정 영역 내에서 디자인 제약 스케일을 관리하기 위한 솔루션 입니다.</p>\n<blockquote>\n<p>\"디자인 시스템은 기본적으로 디자인과 코드로 구현 된 규칙, 제약 조건 및 원칙의 모음입니다.\" -Sylvee L.-\n'디자인 시스템'이란, 서비스를 만드는데 사용한 공통 컬러, 서체, 인터랙션, 각종 정책 및 규정에 관한 모든 컴포넌트를 정리해놓은 것을 뜻합니다. -배재민 디자이너-</p>\n</blockquote>\n<p>예를 들면 폰트의 사이즈, 여백의 사이즈, 컬러, 기타 다른 시각적인 속성들을 theme object로 관리 할 수 있도록 도와줍니다. 이제는 구체적인 디자인 시스템을 포함하는 theme.js 를 사용해서 컴포넌트의 props를 셋팅해주게 됩니다.</p>\n<p>또한 일관된 스타일을 적용 할 때 올바른 작업을 쉽게 수행 할 수있는 API를 제공하도록 합니다.</p>\n<h2 id=\"rebass-장점\" style=\"position:relative;\"><a href=\"#rebass-%EC%9E%A5%EC%A0%90\" aria-label=\"rebass 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rebass 장점</h2>\n<p><code class=\"language-text\">rebass</code>는 <code class=\"language-text\">system-styled</code> 장점을 더욱 간단히 이용 하는 것이라, 아래 장점들은 <code class=\"language-text\">styled-system</code>의 장점이 되기도 합니다.</p>\n<ol>\n<li>가장 작고 견고한 Component 들을 제공합니다.</li>\n</ol>\n<p>  컴포넌트 개발시에 기본적으로 제공하는 (Box, Text, Image.. 등등의 컴포넌트를 미리 제공해 줍니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Box<span class=\"token punctuation\">,</span> Text<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rebass'</span></code></pre></div>\n<ol start=\"2\">\n<li>일관 된 컴포넌트의 props 개발</li>\n</ol>\n<p>  다음 유지보수시 서로 다른 개발자가 작성한 컴포넌트가 아래의 예시와 같다고 했을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token operator\">&lt;</span>CustomButton1 <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"thin\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>CustomButton2 thin<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>  다양한 API 형식을 지니는 컴포넌트를 제작할 수 있으며 이는 곧 또다른 유지보수시 큰 시간을 들이게 됩니다.</p>\n<p>  반면 rebass를 사용한다면 새롭게 props 를 만들 필요가 없을 뿐더러 다른 개발자가 보아도 쉽게 이해 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token operator\">&lt;</span>CustomButton1 p<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// padding 이 테마의 scale의 2번째 값을 적용한다.</span>\n  <span class=\"token operator\">&lt;</span>CustomButton2 p<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// padding 이 테마의 scale의 3번째 값을 적용한다.</span></code></pre></div>\n<ol start=\"3\">\n<li>테마를 우선순위로 사용하면서 일관된 스타일을 유지</li>\n</ol>\n<p>  css-in-js 에서도 테마를 지원하지만 기본적으로 우선시 되지는 않습니다. 하지만 rebass 컴포넌트는 테마를 우선 적용하도록 되어있습니다.</p>\n<ol start=\"4\">\n<li>확장성이 용이</li>\n</ol>\n<p>  css-in-js에서 사용하도록 하는 <code class=\"language-text\">styled()</code> 로 확장하는 컴포넌트는 기존 컴포넌트의 API가 복잡할수록 예측 가능하도록 확장하기가 어렵습니다. 반면 rebass로 확장을 하는 경우에는 예측 가능하도록 설계가 되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Button<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rebass'</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">CustomButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Button sx<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n              color<span class=\"token operator\">:</span> <span class=\"token string\">'point'</span> <span class=\"token comment\">// theme에 포인트 컬러</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token operator\">&lt;</span>CustomButton <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// 일반적으로 color는 point 컬러</span>\n  <span class=\"token operator\">&lt;</span>CustomButton color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// red color로 수정</span></code></pre></div>\n<h2 id=\"추후-theme를-잘-쓰기-위한-노력\" style=\"position:relative;\"><a href=\"#%EC%B6%94%ED%9B%84-theme%EB%A5%BC-%EC%9E%98-%EC%93%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%85%B8%EB%A0%A5\" aria-label=\"추후 theme를 잘 쓰기 위한 노력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추후 theme를 잘 쓰기 위한 노력</h2>\n<p>스타일에 대한 적절한 추상화 작업이 필요합니다. 최대한 추상화로 정의 내릴 수 있는 디자인은 모두 theme에 녹여내는 작업이 필요 합니다.</p>\n<p>디자인을 보고 더 이상 쪼갤 수 없는 스타일 요소들을 분류하고 한 스타일 요소에 최대 n개가 넘지 않는 선에서 추상화를 시킵니다.</p>\n<p>ex) borderRadius 의 경우 smallRadius, mediumRadius, largeRadius</p>\n<p>이렇게 theme.js 에 디자인 명세를 작성하면 페이지에 들어가는 컴포넌트들은 될 수 있으면 이 명세에 따르도록 만듭니다.\n피치 못할 경우에는 각 컴포넌트에서 필요한 스타일을 추가 및 오버라이딩 해서 적용합니다.</p>\n<ol>\n<li>디자인 가이드로 준 수치는 모두 theme.js 로 설정해 둔다.</li>\n<li>theme에 있는 수치들은 sx props로 셋팅한다.</li>\n<li>보통은 atoms 단위에 있는 컴포넌트는 sx로 셋팅한다. ( 다른 컴포넌트에서 확장시 css props로 확장 )</li>\n<li>moleculos 이상부터는 공간부분을 대부분 theme에서 가져다 쓴다.</li>\n<li>나머지는 css로 사용하되 json 또는 styled-component의 css helper를 이용하면 간단하게 이용할 수 있을 듯 싶다.</li>\n</ol>\n<h2 id=\"rebass--typescript\" style=\"position:relative;\"><a href=\"#rebass--typescript\" aria-label=\"rebass  typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rebass + typescript</h2>\n<p>rebass와 typecript를 함께 썼을때 이슈로는 다음과 같습니다.</p>\n<p>rebass는 css-in-js를 <code class=\"language-text\">@emotion</code> 기반으로 사용하고 <code class=\"language-text\">styled-system</code>을 사용하는 것으로 github에서 보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n  \n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    shouldForwardProp\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    boxSizing<span class=\"token operator\">:</span> <span class=\"token string\">'border-box'</span><span class=\"token punctuation\">,</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    minWidth<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    base<span class=\"token punctuation\">,</span>\n    variant<span class=\"token punctuation\">,</span>\n    sx<span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n      space<span class=\"token punctuation\">,</span>\n      layout<span class=\"token punctuation\">,</span>\n      typography<span class=\"token punctuation\">,</span>\n      color<span class=\"token punctuation\">,</span>\n      flexbox<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BoxKnownProps</span>\n      <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseProps</span><span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>SpaceProps<span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>LayoutProps<span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>FontSizeProps<span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>ColorProps<span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>FlexProps<span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>OrderProps<span class=\"token punctuation\">,</span>\n          StyledSystem<span class=\"token punctuation\">.</span>AlignSelfProps<span class=\"token punctuation\">,</span>\n          SxProps <span class=\"token punctuation\">{</span>\n      variant<span class=\"token operator\">?</span><span class=\"token operator\">:</span> StyledSystem<span class=\"token punctuation\">.</span>ResponsiveValue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      tx<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BoxProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BoxKnownProps</span><span class=\"token punctuation\">,</span> Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>HTMLProps<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> BoxKnownProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Box<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token operator\">&lt;</span>BoxProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 다른 컴포넌트에서 <code class=\"language-text\">@emotion/core</code>를 import 할 경우 css에 대한 충돌이 발생 합니다.</p>\n<p><code class=\"language-text\">@emotion/core</code> 에서 사용하는 css type 은</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * Do we need to modify `LibraryManagedAttributes` too,\n       * to make `className` props optional when `css` props is specified?\n       */</span>\n  \n      <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntrinsicAttributes</span> <span class=\"token punctuation\">{</span>\n        css<span class=\"token operator\">?</span><span class=\"token operator\">:</span> InterpolationWithTheme<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>rebass 의 css type을 살펴보면</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> StyledComponents <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>RefAttributes</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">as</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ElementType<span class=\"token punctuation\">;</span>\n      css<span class=\"token operator\">?</span><span class=\"token operator\">:</span> StyledComponents<span class=\"token punctuation\">.</span>CSSObject <span class=\"token operator\">|</span> StyledComponents<span class=\"token punctuation\">.</span>FlattenSimpleInterpolation <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 rebass의 css props는 왜 StyledComponents 를 아직도 type으로 지정하는지는 아직 파악이 안됩니다.</p>\n<h2 id=\"rebass-느낀점\" style=\"position:relative;\"><a href=\"#rebass-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"rebass 느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rebass 느낀점</h2>\n<p>디자이너가 있다면 어느정도 디자인에 대한 <code class=\"language-text\">system</code>을 만들어 두고 시작하면 좀 더 손쉽게 쓸 수 있을거 같습니다.\n여기서 디자인 <code class=\"language-text\">system</code>은 간단하게 디자인 가이드 정도 생각하면 될 듯 싶습니다.\n스타일 어디까지를 테마로 뺴두어야 할지의 경계를 정하지 못한다면 theme.js가 자칫 의미가 없어질 수 있습니다.</p>\n<p>장점을 정리해보면 다음과 같습니다.</p>\n<ol>\n<li>테마를 우선순위로</li>\n<li>일관된 props ( 모양과 행동으로 구체적인 props를 갖는게 좋음.)</li>\n<li>컴포넌트의 계층 구조를 손쉽게 생각할 수 있게 해줌.</li>\n<li>컴포넌트 확장에 용이</li>\n</ol>\n<h3 id=\"아쉬웠던-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\"아쉬웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬웠던 점</h3>\n<p>css-in-js 들에는 develop 할 경우 css 네이밍을 개발자가 정해놓은 룰에 따라서 네이밍을 붙여주기도 합니다.</p>\n<p>특히 <code class=\"language-text\">@emotion</code> 에서는 <a href=\"https://emotion.sh/docs/babel-plugin-emotion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://emotion.sh/docs/babel-plugin-emotion</a> 를 사용하면 css 네이밍을 붙여줍니다.</p>\n<p>이는 개발자 도구에서도 어느 컴포넌트에서 렌더링이 되었는지 한눈에 알아 볼 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">rebass</code>에서 <code class=\"language-text\">@emotion/styled</code> 를 사용하고 있어서 위 플러그인을 사용함.</li>\n</ul>\n<p>하지만 <code class=\"language-text\">rebass</code> 에서는 다음의 경우에만 css 네이밍을 붙여 줍니다.</p>\n<ol>\n<li>props로 css 속성이 들어간 컴포넌트 : babel config에 정해진 룰대로 자동으로 css 네이밍을 붙여줍니다.</li>\n<li>sx props 안에 label property가 존재하는 경우 : label의 값으로 css 네이밍을 붙여줍니다.</li>\n</ol>\n<h2 id=\"styled-component로-비슷하게-만들어-보기\" style=\"position:relative;\"><a href=\"#styled-component%EB%A1%9C-%EB%B9%84%EC%8A%B7%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"styled component로 비슷하게 만들어 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled component로 비슷하게 만들어 보기</h2>\n<p>추가적으로 테마를 사용하지 않을 경우에 styled component 모듈로도 이렇게 primitive UI Component를 만들어 볼 수 있을 것이다.</p>\n<p>해서 한번 도전해 보았다.\n쉬운 <code class=\"language-text\">Atom</code>의 <code class=\"language-text\">Box Component</code> 는 다음과 같이 만들 수 있을 꺼 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> FlattenSimpleInterpolation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> BoxProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  css<span class=\"token operator\">?</span><span class=\"token operator\">:</span> FlattenSimpleInterpolation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> BoxStyledProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  css<span class=\"token operator\">?</span><span class=\"token operator\">:</span> FlattenSimpleInterpolation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BoxStyled <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token operator\">&lt;</span>BoxStyledProps<span class=\"token operator\">></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>css <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>css <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> BoxProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>BoxStyled css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>css<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BoxStyled<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Box<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p>styled-system 사용법 : <a href=\"https://varun.ca/styled-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://varun.ca/styled-system/</a></p>\n<p>styled-component와 styled-system을 함께 사용했을때 이점 : <a href=\"https://medium.com/styled-components/build-better-component-libraries-with-styled-system-4951653d54ee\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/styled-components/build-better-component-libraries-with-styled-system-4951653d54ee</a></p>\n<p>styled-system 신조 : <a href=\"https://jxnblk.com/blog/the-three-tenets-of-styled-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jxnblk.com/blog/the-three-tenets-of-styled-system/</a></p>\n<p>디자인 시스템 1 : <a href=\"https://medium.muz.li/what-is-a-design-system-1e43d19e7696\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.muz.li/what-is-a-design-system-1e43d19e7696</a></p>\n<p>디자인 시스템 2 : <a href=\"https://medium.com/sketch-app-sources/design-system-principles-service-design-c3e439666b97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/sketch-app-sources/design-system-principles-service-design-c3e439666b97</a></p>\n<p>디자인 시스템 3 : <a href=\"https://medium.com/guleum/%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-beefa8214884\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/guleum/%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-beefa8214884</a></p>","excerpt":"이번 프로젝트에 rebass 라는  이라는 라이브러리를 사용해보고 정보와 사용 느낀점을 남깁니다. rebass 란 React에서 사용할 수 있는 UI…","tableOfContents":"<ul>\n<li><a href=\"/hello-rebass.md/#rebass-%EB%9E%80\">rebass 란</a></li>\n<li><a href=\"/hello-rebass.md/#css-in-js-styled-component-emotion-%EC%9E%A5%EC%A0%90\">css-in-js (styled-component, @emotion) 장점</a></li>\n<li><a href=\"/hello-rebass.md/#styled-system-%EC%9D%B4%EB%9E%80\">styled-system 이란</a></li>\n<li><a href=\"/hello-rebass.md/#rebass-%EC%9E%A5%EC%A0%90\">rebass 장점</a></li>\n<li><a href=\"/hello-rebass.md/#%EC%B6%94%ED%9B%84-theme%EB%A5%BC-%EC%9E%98-%EC%93%B0%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%85%B8%EB%A0%A5\">추후 theme를 잘 쓰기 위한 노력</a></li>\n<li><a href=\"/hello-rebass.md/#rebass--typescript\">rebass + typescript</a></li>\n<li>\n<p><a href=\"/hello-rebass.md/#rebass-%EB%8A%90%EB%82%80%EC%A0%90\">rebass 느낀점</a></p>\n<ul>\n<li><a href=\"/hello-rebass.md/#%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90\">아쉬웠던 점</a></li>\n</ul>\n</li>\n<li><a href=\"/hello-rebass.md/#styled-component%EB%A1%9C-%EB%B9%84%EC%8A%B7%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0\">styled component로 비슷하게 만들어 보기</a></li>\n<li><a href=\"/hello-rebass.md/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/hello-rebass.md/"},"frontmatter":{"title":"Hello rebass","date":"Mar 09, 2020","tags":["undefined"],"keywords":["Merlin Tech Blog","Merlin.ho"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/hello-rebass.md/","series":[],"lastmod":"0001-01-01"}}}