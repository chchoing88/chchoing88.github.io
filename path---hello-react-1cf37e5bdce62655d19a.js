webpackJsonp([60702703624353],{514:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-react/index.md absPath of file >>> MarkdownRemark",html:'<p>Babel : es6 작성된 코드를 이전 버젼인 es5로 변환하기 위한 도구\n여러가지 브라우저를 호환하기 위해 es5로 변환</p>\n<p>15버전 이상에서\nreact.min.js : 컴포넌트 담당\nreact-dom.min.js : dom에 랜더링 담당</p>\n<p>컴포넌트는 자바스크립트 클래스 입니다.\n리엑트 컴포넌트 클래스를 상속한다.</p>\n<p>여기서 es6 클래스란… </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Coldelab</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"Hi i am coldelab"</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>\n            baackgroundColor<span class="token punctuation">:</span><span class="token string">\'aqua\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">(</span>\n            <span class="token comment">// &lt;div>Codelab&lt;/div></span>\n            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 다른 컴포넌트에서 다시 사용할 수 있다.</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>Codelab<span class="token operator">/</span><span class="token operator">></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 페이지에 랜더링</span>\n<span class="token comment">// 실제 페이지에 jsx코드를 랜더링할때 사용합니다.</span>\nReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>xml같은 문법을 네이티브 자바스크립트로 변환을 해줍니다. 괄호는 가독성을 위해 사용\n바벨이 jsx로더를 사용해서 jsx 형태코드를 변환해준다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token comment">// jsx</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        Welcome to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>React CodeLab<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// javascript</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n    <span class="token string">"div"</span><span class="token punctuation">,</span>\n    <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token string">"Welcome to"</span><span class="token punctuation">,</span>\n    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>\n        "b<span class="token punctuation">,</span>\n        <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token string">"React.js CodeLab"</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>모든 jsx 형태의 코드는 컨테이너 엘리먼트 안에 포함시켜 주어야 한다.\njsx안에서 javascript 를 표현할때는 {} 로 wrapping을 하면 된다.\nif Else 문은 jsx에서 사용 불가 이에 대한 대안은 tenary expression 을 사용한다.\nex) condition? true : false // {1==1? ‘true’:‘false’}</p>\n<p>jsx안에 스타일을 선언할때 카멜케이스를 사용한다. ex) backgroundColor\njsx 안에서 class를 설정할때는 ‘class=’ 가 아닌 className을 사용한다.</p>\n<p>jsx 에서 주석을 작성할 때는 { /* … */ } 로 표현한다.</p>\n<p>React에서 가장 기본 &#x26; 중요한\n&#x3C; props >\n컴포넌트 내부의 immutable Data 를 처리할 때 사용한다.\njsx 내부에 {this.props.propsName} 라고 설정하고\n위에서 설정한 컴포넌트를 사용할때 propsName=“value” 라고 사용한다.\nthis.props.childrens은 기본적으로 가지고 있는 props로\n<Cpnt> 여기에 있는 값이 들어갑니다. <Cpnt></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Coldelab</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword">return</span><span class="token punctuation">(</span>\n           <span class="token operator">&lt;</span>div<span class="token operator">></span>\n                <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n                <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 다른 컴포넌트에서 다시 사용할 수 있다.</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>Codelab name<span class="token operator">=</span><span class="token string">"merlin"</span><span class="token operator">></span>이 사이에 있는거<span class="token operator">&lt;</span><span class="token operator">/</span>Codelab<span class="token operator">></span> <span class="token comment">// "이 사이에 있는거" 가 위의 children에 나타납니다.</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>props에 기본 값을 설정 할 수 있다.\nprops에 특정 타입이 아니거나 입력을 안했을때 개발자 콘솔에 뜨게 할 수 있다.\n참고 : js 넣을때 minifyed 버젼은 에러가 뜨지 않는다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>Codelab name<span class="token operator">=</span><span class="token string">"merlin"</span><span class="token operator">></span>이 사이에 있는거<span class="token operator">&lt;</span><span class="token operator">/</span>Codelab<span class="token operator">></span> <span class="token comment">// "이 사이에 있는거" 가 위의 children에 나타납니다.</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nApp<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n    value<span class="token punctuation">:</span><span class="token number">0</span>\n<span class="token punctuation">}</span>\n\nApp<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    value<span class="token punctuation">:</span>React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n    secondValue<span class="token punctuation">:</span>React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>\n    thirdValue<span class="token punctuation">:</span>React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>any<span class="token punctuation">.</span>isRequired <span class="token comment">// 어떤 타입이든 필수로 입력이 되도록</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>&#x3C; state ></p>\n<p>컴포넌트에서 유동적인 데이터를 보여줄 때 사용합니다.\n초기값 설정이 필수다\n초기값은 constructor에서 this.state={} 로 설정\n값을 수정할때는 this.setState({…}), 렌더링 된 다음엔 this.state= 절대 사용하지 말것.</p>\n<p>스테이트를 바로 수정하는게 아니라 리엑트 개발자가 지정한 안정된 프로세스로 통하여 값이 변경된다.\n값이 변경된 다음에는 랜더링이 다시 진행된다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span>\n        <span class="token keyword">return</span><span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div<span class="token operator">></span>Counter<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            \n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',frontmatter:{title:"Hello React",date:"January 31, 2018"}}},pathContext:{slug:"/hello-react/"}}}});
//# sourceMappingURL=path---hello-react-1cf37e5bdce62655d19a.js.map