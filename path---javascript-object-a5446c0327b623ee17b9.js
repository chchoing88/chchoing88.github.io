webpackJsonp([73704410068446],{440:function(s,n){s.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/javascript-object/index.md absPath of file >>> MarkdownRemark",html:'<p>번역 : <a href="http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/">http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/</a></p>\n<p>자바스크립트가 OOP(객체 지향 언어인지 함수형 언어인지 많은 혼란들이 있다. 실제로 Javascript 는 이 두가지 모두 사용할 수 있다.</p>\n<p>그러나 사람들은 자바스크립트 모든것이 객체인지?, 함수는 무엇인지 질문하곤 한다.\n이 포스트가 이것들을 명확하게 할것이다.</p>\n<h2>시작해보자.</h2>\n<p>자바스크립는 여섯가지 원시 데이터 타입이 있다.</p>\n<ul>\n<li>Booleans - <code>true</code> or <code>false</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>number</code> - double-precision 64-bit float. <strong>There are no integers in JavaScript</strong>.</li>\n<li><code>string</code></li>\n<li><code>symbol</code> (new in ES6)</li>\n</ul>\n<p>원시타입 외에도, ECMAScript 스탠다드는 <code>object</code> 타입을 정의합니다. 이것은 간단하게 키 벨류의 저장소 입니다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>Object</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;key</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>value</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<p>간단하게는, 원시타입이 아닌 어떤것들을 <code>Object</code> 이라한다. 그리고 이것은 함수와 배열을 포함하고 있다.</p>\n<p>모든 함수들은 객체들이다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Primitive&nbsp;types</span></span></span></div><div class="line"><span class="source js"><span class="constant language boolean true js"><span>true</span></span><span>&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span class="constant language null js"><span>null</span></span><span>&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span class="constant language js"><span>undefined</span></span><span>&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span class="constant numeric decimal js"><span>0</span></span><span>&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>bar</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Non-primitive&nbsp;types</span></span></span></div><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>foo&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre>\n<h2>원시타입</h2>\n<p>원시타입 들은 원시타입에 붙어있는 메서드를 가지지 않는다. 그래서 절대 <code>undefined.toString()</code> 이라는 문법을 볼 수 없을 것이다. 또한 이 원시타입들은 값을 을 변화시키는 메서드를 지니고 있지 않기 때문에 원시타입들은 불변함의 성격을 지니고 있다.</p>\n<p>사용자들은 원시타입을 변수에 재 할당할수 있다. 하지만 그것은 새로운 값이 될것이다. 예전의 것이 아니며 변할수도 없다. 즉, 변수에 원시타입을 대입하는 것은 새로운 값이 되는것이지 이전의 값이 변한것이 아니다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>answer</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>answer</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>bar</span><span class="punctuation definition string end js"><span>&#39;</span></span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>answer</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;undefined</span></span></span></div></pre>\n<blockquote>\n<p>원시 타입들은 불변함을 지닌다.</p>\n</blockquote>\n<p>게다가 원시 타입들은 참조값을 저장하는 객체와는 다르게 값 자체로 저장이 된다. 이것은 같은 검사를 수행할때 여향을 미친다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class="line"><span class="source js"><span class="constant numeric decimal js"><span>14</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>14</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="punctuation section scope begin js"><span>{</span></span><span class="punctuation section scope end js"><span>}</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="punctuation section scope begin js"><span>{</span></span><span class="punctuation section scope end js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div></pre>\n<blockquote>\n<p>원시 타입들은 값으로 저장이 되고, 객체는 참조값으로 저장이 된다.</p>\n</blockquote>\n<h2>함수</h2>\n<p>함수는 <code>constructor</code> , <code>call</code> 과 같은 몇몇 특별한 프로퍼티들을 가진 object 타입이다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>baz</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property dom js"><span>name</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;foo&quot;</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property js"><span>length</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;1</span></span></span></div></pre>\n<p>그리고 평범한 객체와 같이 새로운 프로퍼티들을 추가할 수 있다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>baz</span><span class="punctuation definition string end js"><span>&#39;</span></span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;baz&quot;</span></span></span></div></pre>\n<h3>Methods</h3>\n<p>메서드는 함수처럼 행동하는 객체의 프로퍼티이다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="punctuation section scope begin js"><span>{</span></span><span class="punctuation section scope end js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta function js"><span class="meta delimiter method period js"><span>.</span></span><span class="entity name function js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="storage type function js"><span>function</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="entity name type object console js"><span>console</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="support function console js"><span>log</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>baz</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="entity name function js"><span>bar</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;baz&quot;</span></span></span></div></pre>\n<h2>생성자 함수</h2>\n<p>만약 당신이 몇몇 같은 수행을 공유하는 객체를 가지고 있다면, 생성자 함수 내부에 그 로직을 놓을 수 있다. 그리고 생성자 함수로 그 객체들을 만들수 있다.</p>\n<p>생성자 함수는 다른 함수들과 다르지 않다. 이 함수는 new 키워드 뒤에 사용될 때 생성자 함수로 사용된다.</p>\n<blockquote>\n<p>모든 함수라도 생성자 함수가 될수 있다.</p>\n</blockquote>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>Foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>Foo</span></span></span><span class="meta brace round js"><span>(</span><span>)</span></span></span></div><div class="line"><span class="source js"><span>bar&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;{}</span></span></span></div><div class="line"><span class="source js"><span>bar&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;Foo&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class="line"><span class="source js"><span>bar&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre>\n<p>생성자 함수는 객체를 리턴 할 것이다. 여기 이 함수안에 있는 <code>this</code>는 객체에 새로운 프로퍼티를 할당하는데 사용 될 수 있다.</p>\n<p>그래서 만약 우리가 초기에 <code>bar</code>라는 프로퍼티에 <code>baz</code> 값을 할당하고 싶은 많은 객체를 만들길 원한다면 해당 로직을 지닌 새로운 <code>Foo</code>라는 로새로운 생성자를 만들 수 있다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>Foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>baz</span><span class="punctuation definition string end js"><span>&#39;</span></span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>qux</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>Foo</span></span></span><span class="meta brace round js"><span>(</span><span>)</span></span></span></div><div class="line"><span class="source js"><span>qux&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;{&nbsp;bar:&nbsp;&quot;baz&quot;&nbsp;}</span></span></span></div><div class="line"><span class="source js"><span>qux&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;Foo&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class="line"><span class="source js"><span>qux&nbsp;</span><span class="keyword operator instanceof js"><span>instanceof</span></span><span>&nbsp;</span><span class="support class js"><span>Object</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre>\n<blockquote>\n<p>당신은 생성자 함수를 새로운 객체를 만드는데 사용할 수 있다.</p>\n</blockquote>\n<p>생성자 함수가 단순히 new 가 없이 일반 함수 <code>Foo()</code> 처럼 동작한다면 해당 함수 안에 있는 이 <code>this</code> 는 실행 컨텍스트에 해당되게 됩니다. 그래서 모든 함수들 밖에서 <code>Foo()</code>를 호출하게 되면 사실 <code>window</code> 객체 가 수정되게 될것이다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function-call js"><span class="entity name function js"><span>Foo</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;undefined</span></span></span></div><div class="line"><span class="source js"><span class="support variable dom js"><span>window</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;baz&quot;</span></span></span></div></pre>\n<p>반대로, 일반 함수를 생성자 처럼 실행하게 된다면 이전에 바왔던 새로운 빈 객체가 나오게 된다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>pet</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>String</span></span></span><span class="meta brace round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span></span></div></pre>\n<h2>래퍼 객체</h2>\n<p><code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Function</code> 등등 이런 함수들은 혼란을 가져온다.\n이것들을 <code>new</code> 와 함께 호출한다면 원시타입 대한 <em>wrpper object</em>가 생성된다.</p>\n<p><code>String</code>은 주어진 매개변수를 원시 문자열을 만들수 있는 글로벌 함수이다. 그것은 매개변수를 문자열로 변환할 수 있다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="constant numeric decimal js"><span>1337</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;1337&quot;</span></span></span></div><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="constant language boolean true js"><span>true</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;true&quot;</span></span></span></div><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="constant language null js"><span>null</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;null&quot;</span></span></span></div><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="constant language js"><span>undefined</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;undefined&quot;</span></span></span></div><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;&quot;</span></span></span></div><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class="line"><span class="source js"><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;</span><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;string&quot;</span></span></span></div></pre>\n<p>하지만 <code>String</code>함수를 생성자 함수처럼 사용할 수도 있다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>pet</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>String</span></span></span><span class="meta brace round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span></span></div><div class="line"><span class="source js"><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;pet&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;&quot;object&quot;</span></span></span></div><div class="line"><span class="source js"><span>pet&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;false</span></span></span></div></pre>\n<p>그리고 이것은 문자열 <code>"dog"</code>를 표현하는 새로운 객체를 만들어 낸다. 다음과 같은 프로퍼티들을 지닌다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="constant numeric decimal js"><span>0</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>d</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>o</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>g</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;length</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<h2>자동 박싱</h2>\n<p>흥미로운 점은 기본 문자열과 객체 모두의 생성자가 둘 다 String 함수라는 것이다.\n훨씬 더 흥미로운 사실은 기본 문자열에서 <code>.constructor</code>를 호출할 수 있다는 점이다. 우리가 원시타입은 메서드를 가질수 없다고 알고있었다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>pet</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>String</span></span></span><span class="meta brace round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>pet</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property js"><span>constructor</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="support class js"><span>String</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div><div class="line"><span class="source js"><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>dog</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property js"><span>constructor</span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="support class js"><span>String</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre>\n<p>이런 절차가 발생되는것을 우리는 <em>autoboxing</em>이라 부른다. 우리가 원시 타입안에서 메서드나 프로퍼티를 호출할 때, 자바스크립트는 먼저 일시적으로 <em>wrapper object</em>로 변환시킨다. 그리고 그 프로퍼티와 메서드에 원래의 값에 영향없이 접근한다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>bar</span><span class="punctuation definition string end js"><span>&#39;</span></span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property js"><span>length</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;3</span></span></span></div><div class="line"><span class="source js"><span>foo&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>bar</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;true</span></span></span></div></pre>\n<p>위 예제에서 <code>length</code>프로퍼티에 접근한다. 자바스크립트는 <code>foo</code>를 wapper object 로 autoboxed 를 시킨다. 그리곤 해당 객체의 length 에 접근한다. 그리곤 그 객체를 버립니다. 이것은 foo 에 영향 없이 진행됩니다.</p>\n<p>이것이 우리가 원시타입에 프로퍼티를 접근하려들려 할때 자바스크립트가 에러를 뱉지 않는 이유이다. 그 원시 타입 자신을 건들지 않고 임시 래퍼 객체에 할당했기 때문이다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>baz</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Assignment&nbsp;done&nbsp;on&nbsp;temporary&nbsp;wrapper&nbsp;object</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;undefined</span></span></span></div></pre>\n<p>만약 <code>undefined</code>나 <code>null</code>같이 래퍼객체가 없는 타입으로 이같은 시도를 했다면 에러가 났을 것이다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant language null js"><span>null</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>foo</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>baz</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Uncaught&nbsp;TypeError:&nbsp;Cannot&nbsp;set&nbsp;property&nbsp;&#39;bar&#39;&nbsp;of&nbsp;null</span></span></span></div></pre>\n<h2>요약</h2>\n<ol>\n<li>자바스크립트의 모든것이 객체가 아니다.</li>\n<li>자바스크립트에는 6 가지 원시 타입이 있다.</li>\n<li>원시타입 모두가 객체는 아니다.</li>\n<li>함수는 특별한 타입의 객체이다.</li>\n<li>함수는 새로운 객체를 만드는데 사용될 수 있다.</li>\n<li>String, booleans 그리고 numbers 는 원시타입으로 대표될 수 있지만 객체이기도 하다.</li>\n<li>확실한 원시타입( strings. numbers, booleans ) 는 마치 객체처럼 보여지기도 하다. 이는 자바스크립트의 autoboxin 이라고 불리오는 특징 때문이다.</li>\n</ol>\n<pre class="editor editor-colors"><div class="line"><span class="text plain null-grammar"><span>일부&nbsp;의역이&nbsp;들어간&nbsp;경우도&nbsp;있으므로&nbsp;해당&nbsp;원문의&nbsp;내용과&nbsp;조금&nbsp;다를&nbsp;수&nbsp;있습니다.&nbsp;&lt;br/&gt;</span></span></div><div class="line"><span class="text plain null-grammar"><span>문제가&nbsp;될&nbsp;소지가&nbsp;있다거나&nbsp;혹은&nbsp;수정이&nbsp;필요한&nbsp;사항이&nbsp;있다면&nbsp;있다면&nbsp;issues&nbsp;보내주세요.</span></span></div></pre>',
frontmatter:{title:"Javascript 의 모든것은 Object 이다? 아니다?",date:"April 01, 2019"}}},pathContext:{slug:"/javascript-object/"}}}});
//# sourceMappingURL=path---javascript-object-a5446c0327b623ee17b9.js.map