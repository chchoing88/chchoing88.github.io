webpackJsonp([0xe0a97ed112cb],{509:function(s,a){s.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/search.md absPath of file >>> MarkdownRemark",html:'<h2>검색 알고리즘</h2>\n<ul>\n<li>리스트에서는 순차 검색(sequential search)과 이진 검색(binary search) 두 가지 방법으로 데이터를 검색할 수 있습니다.</li>\n<li>리스트의 항목이 임의의 순서로 저장되어 있을 때는 순차 검색을 사용합니다.</li>\n<li>리스트의 항목이 정렬되어 있을 때는 이진 검색을 이용합니다.</li>\n<li>이진 검색이 순차 검색보다 효율성을 좋지만, 이진 검색을 수행하려면 리스트의 데이터를 정렬하는 데도 시간을 소비함을 감안해야 합니다.</li>\n</ul>\n<h2>순차 검색</h2>\n<ul>\n<li>리스트에서 데이터를 찾는 가장 단순한 방법 입니다. 리스트의 처음 요소부터 찾는 요소가 발견 될때까지 계속 다음 요소를 찾는 것입니다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>seqSearch</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>for</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>i</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="keyword operator increment ts"><span>++</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language boolean true ts"><span>true</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language boolean false ts"><span>false</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div></pre>\n<ul>\n<li>참과 거짓이 아니라 발견된 위치를 반환하도록 순차 검색 함수를 고칠 수 있습니다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>seqSearch</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>for</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>i</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="keyword operator increment ts"><span>++</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div></pre>\n<ul>\n<li>Array.indexOf() 함수보다 속도가 느리므로 실용성은 없습니다.</li>\n</ul>\n<h3>최솟값과 최댓값 검색</h3>\n<p>배열에서 최솟값을 찾는 알고리즘</p>\n<ol>\n<li>배열의 첫 번째 요소를 최솟값으로 간주해 변수에 저장한다.</li>\n<li>배열의 두 번째 요소부터 루프를 돌면서 현재 최솟값과 크기를 비교한다.</li>\n<li>배열 요소가 현재 최솟값보다 작다면 현재 요소를 새로운 최솟값으로 간주하고 변수에 저장한다.</li>\n</ol>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>findMin</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>min</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="constant numeric decimal ts"><span>0</span></span><span class="meta brace square ts"><span>]</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>for</span></span><span class="meta brace round ts"><span>(</span></span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>i</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="keyword operator increment ts"><span>++</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>min</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>min</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>min</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div></pre>\n<p>최댓값을 찾는 로직도 다를 바 없다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>findMax</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>max</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="constant numeric decimal ts"><span>0</span></span><span class="meta brace square ts"><span>]</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>for</span></span><span class="meta brace round ts"><span>(</span></span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>i</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="keyword operator increment ts"><span>++</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&gt;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>max</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>max</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>max</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div></pre>\n<h3>자체 정렬 데이터</h3>\n<ul>\n<li>자주 검색하는 데이터를 데이터 집합의 앞부분에 저장함으로써 검색 속도를 높일 수 있는 기법입니다.</li>\n<li>프로그램이 실행되면서 자체적으로 정렬되는 데이터를 자체 정렬 데이터 (self-organized data)라 합니다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>seqSearch</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>for</span></span><span class="meta brace round ts"><span>(</span></span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>i</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span class="keyword operator increment ts"><span>++</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;if(&nbsp;i&nbsp;&gt;&nbsp;0&nbsp;)&nbsp;{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;찾는&nbsp;데이터가&nbsp;가장&nbsp;첫번째에&nbsp;있지&nbsp;않다면&nbsp;하나씩&nbsp;앞으로&nbsp;옮긴다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;swap(arr,&nbsp;i,&nbsp;i-1);</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>*</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span><span class="meta delimiter decimal period ts"><span>.</span></span><span>2</span></span><span class="meta brace round ts"><span>)</span><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;데이터&nbsp;집합의&nbsp;시작지점으로부터&nbsp;20&nbsp;퍼센트에&nbsp;해당하지&nbsp;않는&nbsp;데이터면&nbsp;위치를&nbsp;바꾸는&nbsp;방식을&nbsp;이용</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>swap</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>arr</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="meta brace round ts"><span>)</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="constant language boolean true ts"><span>true</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>falses</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>swap</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>index</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>index1</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>temp</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>index</span></span><span class="meta brace square ts"><span>]</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>index</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>index1</span></span><span class="meta brace square ts"><span>]</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>index1</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>temp</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div></pre>\n<h2>이진 검색</h2>\n<ul>\n<li>데이터가 정렬된 상황에서는 순차 검색보다는 이진 검색이 더 효율적이다.</li>\n<li>숫자를 선택할 때 상대방의 대답에 따라 제시한 숫자보다 큰쪽이나 작은 쪽 범위에서 중간값(midpoint)을 다시 제시하는 방법을 활용할 수 있습니다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>binSearch</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>arr</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>data</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>upperBound</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>arr</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;상위&nbsp;경계&nbsp;(높은&nbsp;수)</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>lowerBound</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;하위&nbsp;경계&nbsp;(낮은수)</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>lowerBound</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>upperBound</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;상위&nbsp;경계가&nbsp;크다면&nbsp;계속&nbsp;돕니다.</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>mid</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="support constant math ts"><span>Math</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function math ts"><span>floor</span></span></span><span class="meta brace round ts"><span>(</span><span>(</span></span><span class="variable other readwrite ts"><span>upperBound</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>+</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>lowerBound</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>/</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>2</span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>mid</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;물리적인&nbsp;중간값을&nbsp;설정하고&nbsp;이&nbsp;중간값보다&nbsp;찾는&nbsp;값이&nbsp;크다면&nbsp;하위&nbsp;경계를&nbsp;중간값&nbsp;+&nbsp;1&nbsp;로&nbsp;셋팅합니다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>lowerBound</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>mid</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>+</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>arr</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>mid</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&gt;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>data</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;물리적인&nbsp;중간값을&nbsp;설정하고&nbsp;이&nbsp;중간값보다&nbsp;찾는&nbsp;값이&nbsp;작다면&nbsp;상위&nbsp;경계를&nbsp;중간값&nbsp;-&nbsp;1&nbsp;로&nbsp;셋팅합니다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>upperBound</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>mid</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span><span>&nbsp;</span><span class="keyword control conditional ts"><span>else</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;그&nbsp;외&nbsp;arr[mid]&nbsp;값이&nbsp;data&nbsp;와&nbsp;같다면&nbsp;해당&nbsp;인덱스를&nbsp;반환합니다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>mid</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;발견하지&nbsp;못한다면ㄴ</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div></pre>',
frontmatter:{title:"Search Algorithms",date:"May 01, 2020"}}},pathContext:{slug:"/hello-algorithms/search/"}}}});
//# sourceMappingURL=path---hello-algorithms-search-ab8a2117d1ff484ce314.js.map