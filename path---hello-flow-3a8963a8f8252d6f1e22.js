webpackJsonp([59645336058927],{518:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-flow/index.md absPath of file >>> MarkdownRemark",html:'<h2>Intro</h2>\n<ul>\n<li>flow 는 자바스크립트의 스태틱한 타입들을 체크해주는 도구이다.</li>\n<li>flow 는 코드가 변경되는 동안 빠른 피드백을 줍니다.</li>\n<li>flow 는 타입을 추론할 수 있습니다. </li>\n</ul>\n<h2>install</h2>\n<ol>\n<li>\n<p>바벨을 이용해서 flow 유형을 변환시켜줘야 한다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code>npm install --save-dev babel-cli babel-preset-flow</code></pre>\n      </div>\n<ul>\n<li>만약 리엑트를 사용해서 babel-preset-react를 사용한다면 bable-preset-flow는 별도로 설치할 필요가 없다.</li>\n</ul>\n</li>\n</ol>\n<ol start="2">\n<li>\n<p>.babelrc 의 preset 속성에 flow 작성</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token punctuation">{</span>\n    <span class="token string">"preset"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"flow"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>이 역시도 react를 사용하고 있다면 react만 적어주면 된다.</li>\n</ul>\n</li>\n</ol>\n<ol start="3">\n<li>\n<p>flow 설치</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code>npm install -g flow-bin\nnpm install --save-dev flow-bin</code></pre>\n      </div>\n</li>\n</ol>\n<ol start="4">\n<li>\n<p>flow init</p>\n<ul>\n<li>flow init 을 하게 되면 .flowconfig 파일이 생성.</li>\n<li>.flowconfig에서 flow의 여러가지 config 설정을 할 수 있음.</li>\n<li>홈페이지 참조! <a href="https://flow.org/en/docs/config/">https://flow.org/en/docs/config/</a></li>\n</ul>\n</li>\n</ol>\n<ol start="5">\n<li>flow 명령어를 차기 되면 해당 프로젝트의 타입들을 체크</li>\n</ol>\n<h3>요약</h3>\n<ul>\n<li>flow init 으로 프로젝트를 init</li>\n<li>flow 명령으로 Flow background 프로세스를 실행</li>\n<li>각 파일상단에 ”// @flow” 을 기입하므로써 flow가 모니터링을 할수 있게 정의</li>\n<li>flow code 작성</li>\n<li>flow error type 체크</li>\n</ul>\n<h2>Type들</h2>\n<ol>\n<li>\n<p>primitive types</p>\n<ul>\n<li>가장 기본적인 원시타입의 정의 </li>\n<li>리터럴 값의 타입은 소문자로 정의 </li>\n<li>object로 wrapper 한것들은 capitalized 로 정의</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> Number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>Boolean , String, Number, null , undefined(flow는 void로 정의 ) , Symblos ( 아직 flow가 지원안함 )</li>\n</ul>\n</li>\n<li>\n<p>Mixed types</p>\n<ul>\n<li>type을 알수 없을때 사용한다.</li>\n<li>프로그램들은 여러가지 다른 타입의 종류를 지닐수 있다.</li>\n<li>mixed 타입은 아무 타입이나 받을 수 있다. </li>\n<li>mixed는 아무거나 받을 수 있지만 mixed 유형의 값을 사용하려고 한다면 실제 유형이 무엇인지 알아내야 한다. 그렇지 않으면 에러를 내뿜는다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> mixed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">""</span> <span class="token operator">+</span> value <span class="token comment">// error</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> mixed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">""</span> <span class="token operator">+</span> value <span class="token comment">// works!!!</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n</li>\n</ol>\n<ol start="3">\n<li>\n<p>any types</p>\n<ul>\n<li>mixed 와 햇갈려 하지 마세요.</li>\n<li>any 자체는 완벽하게 안전하지 않습니다. 어느때나 에러를 내뿜지 않습니다.</li>\n<li>그래서 any로 type을 지정했을 경우에는 가능한 빨리 다른 타입으로 casting을 해야 합니다.</li>\n</ul>\n</li>\n</ol>\n<ol start="4">\n<li>\n<p>maybe types</p>\n<ul>\n<li>typing value가 있을수도 있구 없을수도 있을때 사용한다.</li>\n<li>예를 들어 ?number 라고 타입을 지정하면 받을 수 있는 타입은 number , null , undefined 타입만을 받을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>variable types</p>\n<ul>\n<li>변수를 선언할때 타입을 추가한다.</li>\n<li>javascript 변수 선언 방식은 const , let , var 방식이 있다.</li>\n<li>flow는 두 그룹으로 나뉜다 재 할당이 가능한지 ( let, var ) 가능하지 않은지 ( const )</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> fooVar<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> barLet<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\nfooVar <span class="token operator">=</span> <span class="token string">"3"</span> <span class="token comment">// error</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>function types</p>\n<ul>\n<li>함수는 2가지 장소에 type을 지정할 수 있다. 하나는 매개변수 ( input ) 나머지 한곳은 return value ( output ) 이다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> string <span class="token punctuation">,</span> b<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">:</span> string <span class="token punctuation">,</span> bool<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 함수 타입을 아예 지정할 수 있다.</span>\ntype merlin <span class="token operator">=</span> <span class="token punctuation">{</span>\n    ho<span class="token punctuation">:</span> <span class="token punctuation">(</span>str<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n    hoing<span class="token punctuation">:</span> <span class="token punctuation">(</span>string <span class="token punctuation">,</span> boolean <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">,</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token comment">// 파라미터 명을 생략할 수도 있다.</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 콜백에 대한것도 지정할 수 있다.</span>\n<span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>cb<span class="token punctuation">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">,</span> value<span class="token punctuation">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>function 의 this의 경우에는 해당 function을 실행한 context를 체크한다. </li>\n<li>술어 함수에 대해서는 리턴값 다음에 <strong>%checks</strong> 라고 적어주지 않으면 에러를 뿜는다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">truty</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>boolean <span class="token operator">%</span>checks <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>a <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">merlin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">truty</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>만약 매개변수로 좀더 유연한 function을 받으려면 <strong>() => mixed</strong> 를 사용한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> mixed<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>만약 타입체크를 피할 필요성이 느끼면서 any 방법을 사용 하지 않으려면 Function 을 타입으로 사용하면 된다. 하지만 이 방법은 안전하지 않고 피해야할 방법이다.</li>\n</ul>\n<p>아래와 같은 코드에서 에러를 내뿜지 않는다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//works</span>\n    <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//works</span>\n    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//works</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Object types</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> obj1<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> number<span class="token punctuation">,</span>\n    bar<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n    baz<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    bar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    baz<span class="token punctuation">:</span> <span class="token string">"abc"</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> foo<span class="token operator">?</span> <span class="token punctuation">:</span> boolean<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// works</span>\nobj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">"abc"</span> <span class="token comment">// error</span>\n</code></pre>\n      </div>\n<ul>\n<li>value 의 type을 설정할 때에는 optional properties가 void 와 생략을 사용할수 있게 한다. 다만 null 값은 에러를 낸다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// foo 에 null 을 셋팅하면 error가 뜬다.</span>\n<span class="token keyword">function</span> <span class="token function">acceptsObject</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token punctuation">{</span>foo<span class="token operator">?</span> <span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>sealed object의 경우에는 없는 값을 추가 하려면 에러를 뿜는다.</li>\n<li>unsealed object의 경우에는 새로운 값을 추가해도 허락한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\nobj<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//error</span>\nobj<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment">//error</span>\n</code></pre>\n      </div>\n<ul>\n<li>\n<p>조건문에 따라 달라지는 프로퍼티의 값이 있다면 아래처럼 해줘야 한다.</p>\n</li>\n<li>\n<p>sealed object 는 프로퍼티를 추가 할수 없다. </p>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> val3<span class="token punctuation">:</span> boolean <span class="token operator">|</span> string <span class="token operator">=</span> obj<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>\n<p>unsealed object 의 알지못하는 프로퍼티를 정해진 타입에 할당하는 것은 안전하지 못하다.</p>\n</li>\n<li>\n<p>exact 한 obect를 만들고 싶다면 <strong>{| |}</strong> 를 사용한다.</p>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">|</span> foo<span class="token punctuation">:</span> string <span class="token operator">|</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"World!"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Error!</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>array types</p>\n<ul>\n<li>array 타입은 Array<Type> 으로 사용하고 Type 장소에 배열의 요소 타입을 정의 할 수 있다. </li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> arr<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span>\n</code></pre>\n      </div>\n<ul>\n<li>축약형으로 Type[] 으로 축약할 수도 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> arr<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>?Type[] 는 ?Array<T> 와 같고 Array&#x3C;?T>는 (?Type)[] 과 같다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// 이부분은 숫자로 된 배열이거나 , null , undefined</span>\n\n<span class="token keyword">let</span> arr1<span class="token punctuation">:</span> <span class="token operator">?</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">// Works!</span>\n<span class="token keyword">let</span> arr2<span class="token punctuation">:</span> <span class="token operator">?</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n<span class="token keyword">let</span> arr3<span class="token punctuation">:</span> <span class="token operator">?</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error!</span>\n\n<span class="token comment">// 이부분은 배열이면서 배열 안에 element들이 숫자이거나 , null , undefined 된거</span>\n<span class="token keyword">let</span> arr1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">?</span>number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">// Error!</span>\n<span class="token keyword">let</span> arr2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">?</span>number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n<span class="token keyword">let</span> arr3<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">?</span>number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n</code></pre>\n      </div>\n<ul>\n<li>array type을 안전하게 사용하는 방법</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> array<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> value<span class="token punctuation">:</span> number <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span> value <span class="token operator">!==</span> undefined <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// number</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>tuple types</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> tuple1<span class="token punctuation">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tuple2<span class="token punctuation">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> boolean<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tuple3<span class="token punctuation">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> boolean<span class="token punctuation">,</span> string<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>mutating 한 Array method를 tuples type에 사용하지 않는다.</li>\n<li>tuples는 array type과 match 시키지 않는다.</li>\n<li>같은 tuples 타입이라도 같은 length 여야 한다.</li>\n</ul>\n</li>\n<li>\n<p>class types</p>\n<ul>\n<li>flow 안에서 javascript classes 는 값과 타입 2가지로 작동한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  prop<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 이걸 사용하려면 위에 처럼 필드에 대한 타입을 설정해야 한다.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> myInstance<span class="token punctuation">:</span> MyClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>classes는 자신만의 generics를 가질수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// @flow</span>\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> A<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> B<span class="token punctuation">,</span> arg3<span class="token punctuation">:</span> C<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> val<span class="token punctuation">:</span> MyClass<span class="token operator">&lt;</span>number<span class="token punctuation">,</span> boolean<span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">\'three\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Type aliases</p>\n<ul>\n<li>복잡한 타입들을 다양한 장소에서 사용하고 싶을때 flow는 type alias를 사용한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>type MyObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token punctuation">:</span> number<span class="token punctuation">,</span>\n  <span class="token keyword">var</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  baz<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>generics 를 활용해서 정의할 수도 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  type MyObject<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> A<span class="token punctuation">,</span>\n    bar<span class="token punctuation">:</span> B<span class="token punctuation">,</span>\n    baz<span class="token punctuation">:</span> C<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> val<span class="token punctuation">:</span> MyObject<span class="token operator">&lt;</span>number<span class="token punctuation">,</span> boolean<span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    bar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    baz<span class="token punctuation">:</span> <span class="token string">\'three\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Opaque Type Aliases</p>\n<ul>\n<li>Opaque type aliases는 이 타입이 정의된 파일 외부에 있는 다른 파일들에서 접근을 허용하지 않는다. </li>\n<li>이 타입은 선언된 곳 어디서든 사용될수 있는 type aliases와 동일하게 작동한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>opaque type ID <span class="token operator">=</span> string<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> ID<span class="token punctuation">)</span><span class="token punctuation">:</span> ID <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> type <span class="token punctuation">{</span>ID<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>또한 optionally하게 제약조건 subtyping을 추가할 수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// Opaque type alias syntax</span>\nopaque type Alias <span class="token operator">=</span> Type<span class="token punctuation">;</span>\nopaque type Alias<span class="token punctuation">:</span> SuperType <span class="token operator">=</span> Type<span class="token punctuation">;</span>\n\nopaque type ID<span class="token punctuation">:</span> string <span class="token operator">=</span> string<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>import 한 opaque type은 외부에서 사용할 수 없다. 마치 nomial type 처럼 행동한다.</li>\n<li>c++ , java , swift는 nomial type 시스템을 사용한다.</li>\n<li>nominal type system 이란 타입의 구조가 같더라도 이름이 다르면 에러를 뿜는다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// exports.js</span>\n<span class="token keyword">export</span> opaque type NumberAlias <span class="token operator">=</span> number<span class="token punctuation">;</span>\n\n<span class="token comment">// imports.js</span>\n<span class="token keyword">import</span> type <span class="token punctuation">{</span>NumberAlias<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./exports\'</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">:</span> NumberAlias<span class="token punctuation">)</span> <span class="token comment">// Error: 0 is not a NumberAlias!</span>\n\n<span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> NumberAlias<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token comment">// Error: x is not a number!</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>opaque type alias 에 subtyping constraint를 추가할때 우리는 super type으로 사용된 opaque type을 선언된 파일 밖에서 사용할 수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">//exports.js</span>\n<span class="token keyword">export</span> opaque type ID<span class="token punctuation">:</span> string <span class="token operator">=</span> string<span class="token punctuation">;</span>\n\n<span class="token comment">//import.js</span>\n<span class="token keyword">import</span> type <span class="token punctuation">{</span>ID<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./exports.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">formatID</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> ID<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">"ID: "</span> <span class="token operator">+</span> x<span class="token punctuation">;</span> <span class="token comment">// works</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toID</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> ID <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>subtyping constraint를 함께 쓰는 opaque type alias 를 만들때 타입설정은 반드시 super type positiona에 설정된 타입을 지니고 있어야 한다. </li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>opaque type Bad<span class="token punctuation">:</span> string <span class="token operator">=</span> number<span class="token punctuation">;</span> <span class="token comment">// Error: number is not a subtype of string</span>\nopaque type Good<span class="token punctuation">:</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> string<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> string<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Interface Types</p>\n<ul>\n<li>classes flow type 의 경우에는 nominal typed 이다. 다시말해서 같은 속성과 같은 메서드가 있어도 서로 이름이 다른 classes type은 한곳에서 다른곳으로 사용이 불가하다.</li>\n<li>대신에. interface 로 기대 되는 class structure 를 선언할 수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">\'[Foo]\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>\n  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">\'[Bar]\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> foo<span class="token punctuation">:</span> Serializable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n<span class="token keyword">const</span> bar<span class="token punctuation">:</span> Serializable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n</code></pre>\n      </div>\n<ul>\n<li>implements 구문을 사용해서 flow 에게 이 인터페이스에 매칭되는 클래스를 원한다는 것을 말해줄수가 있다. 이것은 다른 사람이 클래스를 쉽게 변하게 만들지 못하도록 보호할 수 있다.</li>\n<li>멀티로 2개 이상도 설정가능</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// @flow</span>\n<span class="token keyword">interface</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">\'[Foo]\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// Works!</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n  <span class="token comment">// $ExpectError</span>\n  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// Error!</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>인터페이스 syntax는 아래와 같다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>\n  <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  property<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  property<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>\n<p>인터페이스도 다른 타입과 같이 generics를 사용할수 있고 프로퍼티에 read-only 와 write-only를 설정할 수있다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span> <span class="token punctuation">{</span>\nfoo<span class="token punctuation">:</span> A<span class="token punctuation">;</span>\nbar<span class="token punctuation">:</span> B<span class="token punctuation">;</span>\nbaz<span class="token punctuation">:</span> C<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>\n<span class="token operator">+</span>covariant<span class="token punctuation">:</span> number <span class="token comment">// read-only</span>\n<span class="token operator">-</span>contravariant<span class="token punctuation">:</span> number<span class="token punctuation">;</span> <span class="token comment">// write-only</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Invariant</span> <span class="token punctuation">{</span> property<span class="token punctuation">:</span> number <span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Contravariant</span> <span class="token punctuation">{</span> <span class="token operator">-</span>writeOnly<span class="token punctuation">:</span> number <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">method1</span><span class="token punctuation">(</span> value<span class="token punctuation">:</span> Invariant<span class="token punctuation">)</span> <span class="token punctuation">{</span>\nvalue<span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token comment">// works</span>\nvalue<span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token comment">// works</span>\n<span class="token punctuation">}</span>\nfuntion <span class="token function">method2</span> <span class="token punctuation">(</span> value<span class="token punctuation">:</span> contravariant<span class="token punctuation">)</span> <span class="token punctuation">{</span>\nvalue<span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token comment">// error</span>\nvalue<span class="token punctuation">.</span>writeOnly <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token comment">// works!!</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>write-only 를 사용하면 덜 구체적인 타입도 pass를 진행한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Contravariant</span> <span class="token punctuation">{</span> <span class="token operator">-</span>writeOnly<span class="token punctuation">:</span> number <span class="token punctuation">}</span>\n<span class="token keyword">var</span> numberOrString <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token operator">?</span> <span class="token number">42</span> <span class="token punctuation">:</span> <span class="token string">\'forty-two\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> value2<span class="token punctuation">:</span> Contravariant <span class="token operator">=</span> <span class="token punctuation">{</span> writeOnly<span class="token punctuation">:</span> numberOrString <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</li>\n</ul>\n</li>\n<li>\n<p>Generic Types</p>\n<ul>\n<li>\n<p>generic은 추상적으로 타입을 지정할수 있는 방법이다.</p>\n</li>\n<li>\n<p>generic은 function , function types , classes , type aliases , interface에 사용될 수 있다.</p>\n</li>\n<li>\n<p>function 사용</p>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=></span> T\n</code></pre>\n      </div>\n<ul>\n<li>classes 사용</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>\n  prop<span class="token punctuation">:</span> T<span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> param<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>many generics as you need</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>One<span class="token punctuation">,</span> Two<span class="token punctuation">,</span> Three<span class="token operator">></span><span class="token punctuation">(</span>one<span class="token punctuation">:</span> One<span class="token punctuation">,</span> two<span class="token punctuation">:</span> Two<span class="token punctuation">,</span> three<span class="token punctuation">:</span> Three<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>generic 타입은 말 그대로 “unknown” type이다. 하지만 함수 안에서 구체적인 타입을 사용하게 된다면 에러를 뿜는다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> logFoo<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>\n  <span class="token keyword">return</span> obj\n<span class="token punctuation">}</span>\n<span class="token comment">// 정확한 타입을 쓰기 위해 분기를 쳐야 한다.</span>\n<span class="token keyword">function</span> logFoo<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works.</span>\n<span class="token punctuation">}</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 또는 타입을 지정한다.</span>\n<span class="token keyword">function</span> logFoo<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>flow경우 하나의 타입을 다른곳으로 전달할 때 original type을 잃어버린다. 그래서 구체적인 타입을 덜 구체적인 타입으로 전달할때 flow 는 “forget” 된다. 그것은 한때 구체적이였던 것이다.</li>\n</ul>\n</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>  ```javascript\n  function identity<T>(val: T): T{\n    retur val\n  }\n\n  let foo: \'foo\' = \'foo\'; // works\n  // identity 호출할때 구체적인 string이 전잘 됬지만 호출 이후에 original type을 잃어버림.. 그래서 작동할 수 있다.\n\n\n  let bar: \'bar\' = identity(\'bar\'); // works\n  ```\n\n  - generic은 함수의 arguments 처럼 타입을 지정할 수 있다. \n\n  ```javascript\n  type Item<T> = {\n    prop: T,\n  }\n\n  let item: Item<string> {\n    prop: "value"\n  }\n  ```\n\n  - classes 버젼\n\n  ```javascript\n  class Item<T> {\n    prop: T;\n    constructor(param: T) {\n      this.prop = param;\n    }\n  }\n\n  let item: Item<number> = new Item(42); \n  let item: Item = new Item(42); // error;\n  ```\n\n  - type aliases 버젼\n\n  ```javascript\n  type Item<T> = {\n    prop: T,\n  }\n\n  let item1: Item<number> = {prop: 42}\n  let item2: Item = {prop: 42}  // error\n  ```\n\n\n  - interface 버젼\n\n  ```javascript\n  interface HasProp<T> {\n    prop: T,\n  }\n\n  class Item {\n    prop: string\n  }\n  (Item.prototype: HasProp<string>); // works\n  (Item.prototype: HasProp) // error\n  ```\n\n  - default 값도 설정할 수있다.\n\n  ```javascript\n  type Item<T: number = 1> = {\n    prop: T,\n  };\n\n  let foo: Item<> = { prop: 1 };\n  let bar: Item<2> = { prop: 2 };\n  ```</code></pre>\n      </div>\n<ol start="15">\n<li>\n<p>Union types</p>\n<ul>\n<li>여러가지 타입을 받고 싶다면 Union types를 쓸수 있다.</li>\n<li>syntax는 아래와 같다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>Type1 <span class="token operator">|</span> Type2 <span class="token operator">|</span> <span class="token operator">...</span> <span class="token operator">|</span> TypeN\n</code></pre>\n      </div>\n<ul>\n<li>여러 타입을 (union types)을 사용한다면 우리는 그들 타입중 하나만을 다뤄야 한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toStringPrimitives</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> number <span class="token operator">|</span> boolean <span class="token operator">|</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span> <span class="token comment">// Error!</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">\'boolean\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>여러타입중 한가지 타입만 다루고 싶다면 다음과 같이 합니다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toStringPrimitives</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> number <span class="token operator">|</span> boolean <span class="token operator">|</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> maximumSignificantDigits<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>만약 우리가 두가지의 object types들을 union type으로 생성한다면 flow 는 두 object type 에 들어있는 success property 를 base로 사용하여 알아낼수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>type Success <span class="token operator">=</span> <span class="token punctuation">{</span>success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> boolean<span class="token punctuation">}</span>\ntype Fail <span class="token operator">=</span> <span class="token punctuation">{</span>success<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token punctuation">:</span> string<span class="token punctuation">}</span>\n\ntype Response <span class="token operator">=</span> Success <span class="token operator">|</span> Fail<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span> response<span class="token punctuation">.</span>success <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> value<span class="token punctuation">:</span> boolean <span class="token operator">=</span> response<span class="token punctuation">.</span>value <span class="token comment">// work</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> error<span class="token punctuation">:</span> boolean <span class="token operator">=</span> response<span class="token punctuation">.</span>error <span class="token comment">// work</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>\n<p>union type을 위처럼 분리해서 사용하려면 정확한 타입과 함께 사용해야 한다. disjoint unions type은 각 object에서 한가지 프로퍼티를 구별로 사용한다. 따라서 구별 할 수 있는 프로퍼티가 없다면 에러를 뿜게 된다.\n이것은 flow가 object type을 더 확장 가능한 값으로 보기 때문이다.</p>\n</li>\n<li>\n<p>정 사용해야 겠다면 아래처럼</p>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>type Success <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span> success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> boolean <span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\ntype Failed  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span> error<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> string <span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ntype Response <span class="token operator">=</span> Success <span class="token operator">|</span> Failed<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> value<span class="token punctuation">:</span> boolean <span class="token operator">=</span> response<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> message<span class="token punctuation">:</span> string <span class="token operator">=</span> response<span class="token punctuation">.</span>message<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Intersection Types</p>\n<ul>\n<li>&#x26; 로 연결된 타입들 이것들은 모두를 만족해야 한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>type A <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span>\ntype B <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> boolean <span class="token punctuation">}</span><span class="token punctuation">;</span>\ntype C <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> A <span class="token operator">&amp;</span> B <span class="token operator">&amp;</span> C<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// ExpectError</span>\n<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error!</span>\n<span class="token comment">// ExpectError</span>\n<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error!</span>\n<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token string">\'three\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Typeof Types</p>\n<ul>\n<li>자바스크립트의 typeof 연산자에서 리턴되는 값으로 타입을 정의한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> num2<span class="token punctuation">:</span> <span class="token keyword">typeof</span> num1 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>     <span class="token comment">// Works!</span>\n<span class="token comment">// $ExpectError</span>\n<span class="token keyword">let</span> num3<span class="token punctuation">:</span> <span class="token keyword">typeof</span> num1 <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span>  <span class="token comment">// Error!</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Type Casting Expressions</p>\n<ul>\n<li>함수나 변수를 선언하지 않고 타입을 지정하고 싶을 때가 있을 것입니다. 이때 flow는 inline type cast expression 을 사용할 수 있습니다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token punctuation">(</span>value<span class="token punctuation">:</span> Type<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> Type<span class="token punctuation">)</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> Type<span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> Type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> Type<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<ul>\n<li>선언 뿐만 아니라 할당도 할 수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Works!</span>\n<span class="token punctuation">(</span>value<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n\n<span class="token comment">// 42 할당 및 type number</span>\n<span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// $ExpectError</span>\n<span class="token punctuation">(</span>newValue<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Error!</span>\n<span class="token punctuation">(</span>newValue<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works!</span>\n</code></pre>\n      </div>\n<ul>\n<li>다음 아래와 같이 value 를 any로 캐스팅 하면, 너는 원하는 어떤것이든 타입을 캐스팅할수 있다. 다만 이건 굉장이 안전하지 않다. </li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>하지만 타입을 지정하기 어렵고 불가능할때에는 result에 따라서 타입이 정해지길 바랄수 있다. 예를 들어보자</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// 얕은 복사</span>\n<span class="token keyword">function</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  Object<span class="token punctuation">.</span><span class="token function">kets</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=></span> <span class="token punctuation">{</span>\n    clone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// return clone;</span>\n  <span class="token comment">// 이렇게 사용될 수 있다.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clone<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>만약 우리가 cloneObject 메소드를 실행하기전에 들어오는 인자의 타입을 먼저 정한다면 아래처럼 작성할 것이다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> mixed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>\n<p>하지만 위 코드는 문제가 있다. 우리의 <strong>typeof obj</strong> annotation 또한 새로운 annotation을 갖기에 전체 목적을 파괴시킨다.</p>\n</li>\n<li>\n<p>그래서 우리는 function 안에 사용할 타입에 대해서 assertion 해야한다.</p>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> mixed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//...</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clone<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>실질적인 해결 방법은 아래와 같다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> cloneObject<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> mixed <span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> $Shape<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Utility Types</p>\n<ul>\n<li>flow 는 flow 자체내에 utility types 들을 제공한다.</li>\n</ul>\n<p>  홈페이지 참고 : <a href="https://flow.org/en/docs/types/utilities/">https://flow.org/en/docs/types/utilities/</a></p>\n</li>\n</ol>',
frontmatter:{title:"hello-flow",date:"March 29, 2018"}}},pathContext:{slug:"/hello-flow/"}}}});
//# sourceMappingURL=path---hello-flow-3a8963a8f8252d6f1e22.js.map