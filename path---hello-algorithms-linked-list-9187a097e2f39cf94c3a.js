webpackJsonp([0x6b355d1e8f27],{506:function(s,a){s.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/linkedList.md absPath of file >>> MarkdownRemark",html:'<h2>연결 리스트</h2>\n<ul>\n<li>배열로 작업했을때 느리다고 판단되면 대안으로 연결 리스트를 사용할 수 있다.</li>\n<li>일차원 배열을 사용한 곳에서는 대부분 배열을 연결 리스트로 바꿀 수 있다.</li>\n<li>임의의 요소에 접근해야 할 때는 연결 리스트보다 배열이 좋다.</li>\n<li>노드(node) 라 불리는 객체가 모여 연결 리스트를 구성한다.</li>\n<li>각 노드는 객체 레퍼런스를 통해 리스트의 다른 노드와 연결된다.</li>\n<li>다른 노드를 참조하는 레퍼런스를 링크(link)라 한다.</li>\n</ul>\n<h2>동작</h2>\n<ul>\n<li>연결 리스트는 다른 요소와의 관계를 통해 원하는 요소를 참조할 수 있다.</li>\n<li>헤더라 불리는 특별한 노드를 이용해 연결 리스트의 시작을 표현한다.</li>\n<li>새 노드를 추가하려면 삽입하려는 노드의 이전 노드 링크가 새 노드를 가리키도록 바꿔야 하고 새 노드의 링크는 이전 노드가 가리키던 노드를 가리키도록 설정해야 한다.</li>\n<li>노드를 삭제하는 일은 삭제하려는 노드의 이전에 있는 노드 링크를 삭제하려는 노드가 가리키는 노드로 바꾼 다음, 삭제하려는 노드의 링크를 Null로 설정하면 노드가 삭제된다.</li>\n</ul>\n<h2>설계</h2>\n<ol>\n<li>Node 클래스</li>\n</ol>\n<p>Node 클래스는 노드의 데이터를 저장하는 element와 연결 리스트의 다음 노드 링크를 저장하는 next, 두 가지 프로퍼티를 포함한다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>Node</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>element</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>element</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;element</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property dom js"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant language null js"><span>null</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ol start="2">\n<li>LinkedList 클래스</li>\n</ol>\n<p>새 노드 삽입, 기존 노드 삭제, 리스트의 특정 데이터 검색 등의 기능 제공한다. 리스트의 헤드를 나타내는 노드에 해당하는 한개의 프로퍼티를 포함한다.</p>\n<h2>연결 리스트 코드 (단방향)</h2>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;LinkedNode</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>element</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>next</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>element</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>element</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;LinkedList</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>LinkedList</span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>head</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="support type primitive ts"><span>string</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>head</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>find</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>item</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control trycatch ts"><span>throw</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Error</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>해당&nbsp;노드를&nbsp;찾을&nbsp;수&nbsp;없습니다.</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>findPrevious</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>item</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;현재&nbsp;노드&nbsp;다음&nbsp;element가&nbsp;item과&nbsp;일치할&nbsp;때까지&nbsp;링크를&nbsp;타고&nbsp;이동시킨다.</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="keyword operator ternary ts"><span>?</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span>)&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;currNode;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>throw</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Error</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>해당&nbsp;이전&nbsp;노드를&nbsp;찾을&nbsp;수&nbsp;없습니다.</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;}</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;어떤&nbsp;노드를&nbsp;추가할&nbsp;것이고,&nbsp;어느&nbsp;노드&nbsp;앞에&nbsp;추가할지를&nbsp;지정해야&nbsp;한다.</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>insert</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>newElement</span></span><span>:&nbsp;</span><span class="variable other readwrite ts"><span>string</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span>:&nbsp;</span><span class="variable other readwrite ts"><span>string</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>newNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>newElement</span></span><span class="meta brace round ts"><span>)</span></span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>currentNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>find</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;newNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currentNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;currentNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>newNode</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>remove</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span>:&nbsp;</span><span class="variable other readwrite ts"><span>string</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>removeNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>find</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>findPrevious</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;previousRemoveNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;전체&nbsp;연결&nbsp;리스트&nbsp;보여주기</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>display</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;console.l</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>og</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>element</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span></span><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>while</span></span><span>&nbsp;</span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>next</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>}</span></span></span></span></span></div></pre>\n<h2>연결 리스트 코드 (양방향)</h2>\n<p>연결 리스트를 양방향으로 구현한다면 역방향으로 노드 탐색과 삭제할때 편리하지만 노드를 추가할 때는 더 많은 작업을 수행 해야 한다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;LinkedNode</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>element</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>next</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>previous</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="support type builtin ts"><span>null</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>element</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>element</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;양방향을&nbsp;위한&nbsp;이전&nbsp;노드&nbsp;가리키기</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>LinkedList</span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>head</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="support type primitive ts"><span>string</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>tail</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="support type primitive ts"><span>string</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>head</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;꼬리&nbsp;부분도&nbsp;저장해&nbsp;둔다.</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;(...)&nbsp;이전&nbsp;코드</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;어떤&nbsp;노드를&nbsp;추가할&nbsp;것이고,&nbsp;어느&nbsp;노드&nbsp;앞에&nbsp;추가할지를&nbsp;지정해야&nbsp;한다.</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>insert</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>newElement</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>item</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>newNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>newElement</span></span><span class="meta brace round ts"><span>)</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>currentNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>find</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>newNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currentNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>newNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>currentNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;추가</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>currentNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>newNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>newNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>remove</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>item</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>removeNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>find</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>previousRemoveNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>nextRemoveNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;const&nbsp;previousRemoveNode&nbsp;=&nbsp;this.findPrevious(item);</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;previousRemoveNode.next&nbsp;=&nbsp;removeNode.next;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>previousRemoveNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>nextRemoveNode</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>nextRemoveNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="keyword operator logical ts"><span>!</span></span><span class="variable other readwrite ts"><span>nextRemoveNode</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>displayReverse</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></div></pre>\n<h2>연결 리스트 코드 (순환형)</h2>\n<p>순환형 연결 리스트에서는 헤드의 next 프로퍼티가 자신을 가리킨다는 것입니다.\n순환형 연결 리스트에서는 노드의 끝을 지나 계속 탐색하면 결국 역받향에 있는 노드로 이동 할 수 있습니다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;순환과&nbsp;양방향의&nbsp;합성&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>LinkedList</span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>head</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="support type primitive ts"><span>string</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>tail</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="support type primitive ts"><span>string</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>head</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other object property ts"><span>tail</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other object property ts"><span>head</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>find</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>item</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control trycatch ts"><span>throw</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Error</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>해당&nbsp;노드를&nbsp;찾을&nbsp;수&nbsp;없습니다.</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>findPrevious</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>item</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;현재&nbsp;노드&nbsp;다음&nbsp;element가&nbsp;item과&nbsp;일치할&nbsp;때까지&nbsp;링크를&nbsp;타고&nbsp;이동시킨다.</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="keyword operator ternary ts"><span>?</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span>)&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;currNode;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>throw</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Error</span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>해당&nbsp;이전&nbsp;노드를&nbsp;찾을&nbsp;수&nbsp;없습니다.</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;}</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;어떤&nbsp;노드를&nbsp;추가할&nbsp;것이고,&nbsp;어느&nbsp;노드&nbsp;앞에&nbsp;추가할지를&nbsp;지정해야&nbsp;한다.</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>insert</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>newElement</span></span><span>:&nbsp;</span><span class="variable other readwrite ts"><span>string</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>item</span></span><span>:&nbsp;</span><span class="variable other readwrite ts"><span>string</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>newNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>LinkedNode</span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>newElement</span></span><span class="meta brace round ts"><span>)</span></span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>currentNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>find</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;newNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currentNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;newNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>currentNode</span></span><span>;&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;추가</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta object member ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>currentNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>newNode</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;this.head.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>newNode</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;this.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>tail</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>newNode</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>remove</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span>:&nbsp;</span><span class="variable other readwrite ts"><span>string</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>removeNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>find</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>item</span></span><span class="meta brace round ts"><span>)</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>nextRemoveNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;const&nbsp;previousRemoveNode&nbsp;=&nbsp;this.findPrevious(item);</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;previousRemoveNode.next&nbsp;=&nbsp;removeNode.next;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>if</span></span><span>&nbsp;</span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>previousRemoveNode</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>previousRemoveNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>removeNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>if</span></span><span>&nbsp;</span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>nextRemoveNode</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other object ts"><span>nextRemoveNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>if</span></span><span>&nbsp;</span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span>!</span><span class="variable parameter ts"><span>nextRemoveNode</span></span><span>&nbsp;</span><span>&amp;&amp;</span><span>&nbsp;</span><span class="variable parameter ts"><span>previousRemoveNode</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other object property ts"><span>head</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>previousRemoveNode</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;removeNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>next</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;removeNode.</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>previous</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language null ts"><span>null</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;전체&nbsp;연결&nbsp;리스트&nbsp;보여주기</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>display</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>head</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;console.l</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>og</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>element</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span></span><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>while</span></span><span>&nbsp;</span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>next</span></span><span>&nbsp;</span><span>&amp;&amp;&nbsp;!(</span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>next</span></span><span>.</span><span class="variable parameter ts"><span>element</span></span><span>&nbsp;</span><span>===&nbsp;&quot;</span><span class="variable parameter ts"><span>head</span></span><span>&quot;</span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>)&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>next</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="entity name function ts"><span>displayReverse</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="meta objectliteral ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;</span><span class="meta object member ts"><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>tail</span></span><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;console.l</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>og</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>element</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span></span><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>while</span></span><span>&nbsp;</span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>previous</span></span><span>&nbsp;</span><span>&amp;&amp;&nbsp;!(</span><span class="variable parameter ts"><span>currNode</span></span><span>.</span><span class="variable parameter ts"><span>previous</span></span><span>&nbsp;</span><span>===</span><span>&nbsp;</span><span class="variable parameter ts"><span>this</span></span><span>.</span><span class="variable parameter ts"><span>tail</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>)&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>element</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable other readwrite ts"><span>currNode</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>currNode</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>previous</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta objectliteral ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>}</span></span></span></span></span></div></pre>',
frontmatter:{title:"algorithm Linked List",date:"March 29, 2020"}}},pathContext:{slug:"/hello-algorithms/linkedList/"}}}});
//# sourceMappingURL=path---hello-algorithms-linked-list-9187a097e2f39cf94c3a.js.map