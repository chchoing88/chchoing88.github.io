webpackJsonp([89772980507866],{498:function(s,a){s.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/stack.md absPath of file >>> MarkdownRemark",html:'<h2>스택의 동작</h2>\n<ul>\n<li>스택은 리스트의 한쪽 긑으로만 요소에 접근할 수 있다.</li>\n<li>구내식당에 쌓아놓은 쟁반을 스택에 비유할 수 있다.</li>\n<li>스택은 후입선출(Last-in, First-out) 자료 구조로 알려져 있다.</li>\n<li>스택의 탑에 있지 않은 요소에는 접근할 수 있다.</li>\n<li>스택의 밑바닥에 있는 요소에 접근하려면 모든 요소를 제거하는 수밖에 없다.</li>\n<li>push 동작을 이용해 스택에 추가, pop 동작을 이용해 스택에서 요소를 꺼낼 수 있다.</li>\n<li>peak 을 이용하면 스택에 탑에 있는 요소를 제거하지 않고 내용만 확인할 수 있다.</li>\n<li>clear 는 스택에 모든 요소를 삭제한다.</li>\n</ul>\n<h2>재귀</h2>\n<ul>\n<li>재귀를 구현할 때는 스택을 사용합니다.</li>\n<li>함수를 호출할 때마다 함수에 필요한 많은 변수의 사본이 메모리에 보관된다. 이 메모리가 스택이다.</li>\n<li>함수를 재귀 적으로 호출하면 이러한 모든 변수의 다른 사본이 메모리에 저장되고 그 다음에 계속 저장된다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>factorial</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="constant other js"><span>N</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="constant other js"><span>N</span></span><span class="keyword operator comparison js"><span>&lt;=</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="keyword operator ternary js"><span>?</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>N</span></span><span>&nbsp;</span><span class="keyword operator js"><span>*</span></span><span>&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>factorial</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="constant other js"><span>N</span></span><span class="keyword operator js"><span>-</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<h2>스택 구현</h2>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>Stack</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>dataStore</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>top</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>dataStore</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;</span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>push</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>element</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>dataStore</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="meta class ts"><span class="storage type class ts"><span>class</span></span><span>&nbsp;</span><span class="entity name type class ts"><span>Stack</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>T</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>dataStore</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta field declaration ts"><span class="meta definition property ts variable object property ts"><span>top</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>number</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="storage type ts"><span>constructor</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>dataStore</span></span><span class="keyword operator optional ts"><span>?</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>dataStore</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>dataStore</span></span><span>&nbsp;</span><span class="keyword operator logical ts"><span>||</span></span><span>&nbsp;</span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>push</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>element</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>T</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>dataStore</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>element</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>+</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;top을&nbsp;변화시킴,&nbsp;영구적으로&nbsp;내보낸다.</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>pop</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>topElement</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other object property ts"><span>dataStore</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>splice</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="meta brace round ts"><span>)</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="constant numeric decimal ts"><span>0</span></span><span class="meta brace square ts"><span>]</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>topElement</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>peek</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>dataStore</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator arithmetic ts"><span>-</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>1</span></span><span class="meta brace square ts"><span>]</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>clear</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other property ts"><span>dataStore</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property dom ts"><span>top</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span>&nbsp;&nbsp;</span><span class="meta method declaration ts"><span class="meta definition method ts entity name function ts"><span>length</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable language this ts"><span>this</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="variable other object property ts"><span>dataStore</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta class ts"><span class="meta method declaration ts"><span class="meta block ts"><span class="meta array literal ts"><span class="meta class ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div></pre>\n<h2>예제</h2>\n<ol>\n<li>수식을 인자로 받아 수식에 열거나 닫는 괄호가 없을 때 false를 반환하는 함수를 구현하시오 닫는 괄호가 다 정상적일땐 true 리턴하자. 예를 들어 ‘2.3 + 23 / 12 + (3.14159 * 0.24’ 에는 닫는 괄호가 없다.</li>\n</ol>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>mathematicalLint</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>express</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="support type primitive ts"><span>string</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;문자열로&nbsp;된&nbsp;수식을&nbsp;배열로&nbsp;쪼갠다.&nbsp;(기준을&nbsp;띄어쓰기로?&nbsp;아니면&nbsp;문자&nbsp;하나하나로?)</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;검증을&nbsp;stack으로</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;괄호가&nbsp;있는지&nbsp;없는지는&nbsp;regexp로?</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;&#39;(&#39;&nbsp;를&nbsp;만나면&nbsp;stack에&nbsp;push&nbsp;&#39;)&#39;&nbsp;를&nbsp;만나면&nbsp;스택확인,&nbsp;쌍이&nbsp;맞는지&nbsp;확인,&nbsp;그후&nbsp;pop</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;최종적으로&nbsp;stack이&nbsp;비어야&nbsp;닫는&nbsp;괄호가&nbsp;정상이다.</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>result</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant language boolean true ts"><span>true</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>verificationStack</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Stack</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="support type primitive ts"><span>string</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>splitExpress</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>express</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>split</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>length</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="variable other object ts"><span>splitExpress</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;O(n)</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>for</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="meta var expr ts"><span class="storage type ts"><span>let</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>i</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span>&nbsp;</span><span class="keyword operator relational ts"><span>&lt;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>length</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>i</span></span><span class="keyword operator increment ts"><span>++</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>splitExpress</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>(</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>verificationStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>push</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>splitExpress</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;여는&nbsp;괄호를&nbsp;만나면&nbsp;닫는&nbsp;괄호를&nbsp;만나야지&nbsp;pop이&nbsp;이뤄진다.</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>splitExpress</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>)</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;스택이&nbsp;비어&nbsp;있다면</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="meta function-call ts"><span class="variable other object ts"><span>verificationStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>verificationStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>push</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>splitExpress</span></span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span><span class="variable other readwrite ts"><span>i</span></span><span class="meta brace square ts"><span>]</span></span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>break</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="meta function-call ts"><span class="variable other object ts"><span>verificationStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="entity name function ts"><span>peek</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>(</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="punctuation whitespace comment leading ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="comment line double-slash ts"><span class="punctuation definition comment ts"><span>//</span></span><span>&nbsp;쌍이&nbsp;맞는지&nbsp;확인</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>verificationStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>pop</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>verificationStack</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>verificationStack</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>verificationStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>===</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div></pre>\n<ol start="2">\n<li>우리 주변의 페즈 디스펜서(사탕을 한 알씩 배출해주는 장치)는 스택과 같은 방식으로 동작한다 페즈 디스펜서에 빨간색, 노란색, 흰색 사탕이 섞여 있는데 노란색 사탕은 우리가 싫어하는 맛이다. 스택(한개 이상의 스택을 사용할 수 있다) 을 이용해 디스펜서의 다른 사탕 순서는 바꾸지 말고 노란색 사탕만 제거하는 프로그램을 구현하시오.</li>\n</ol>\n<pre class="editor editor-colors"><div class="line"><span class="source ts"><span class="meta type declaration ts"><span class="storage type type ts"><span>type</span></span><span>&nbsp;</span><span class="entity name type alias ts"><span>CandyType</span></span><span>&nbsp;</span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>red</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>white</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span>&nbsp;</span><span class="keyword operator type ts"><span>|</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>yellow</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other constant ts"><span>PEZ_CANDY_DISPENSER</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>CandyType</span></span><span class="meta type tuple ts"><span class="meta brace square ts"><span>[</span><span>]</span></span></span><span>&nbsp;</span></span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta array literal ts"><span class="meta brace square ts"><span>[</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>red</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>white</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>yellow</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>red</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>yellow</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>white</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>red</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="punctuation separator comma ts"><span>,</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span>&nbsp;&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>red</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="meta array literal ts"><span class="meta brace square ts"><span>]</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></div><div class="line"><span class="source ts"><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>pezDispenserStack</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Stack</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>CandyType</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other constant ts"><span>PEZ_CANDY_DISPENSER</span></span><span class="meta brace round ts"><span>)</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="storage type function ts"><span>function</span></span><span>&nbsp;</span><span class="meta definition function ts entity name function ts"><span>removeCandy</span></span><span class="meta parameters ts"><span class="punctuation definition parameters begin ts"><span>(</span></span><span class="variable parameter ts"><span>dispenser</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Stack</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>CandyType</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span></span><span class="punctuation separator parameter ts"><span>,</span></span><span>&nbsp;</span><span class="variable parameter ts"><span>candy</span></span><span class="meta type annotation ts"><span class="keyword operator type annotation ts"><span>:</span></span><span>&nbsp;</span><span class="entity name type ts"><span>CandyType</span></span></span><span class="punctuation definition parameters end ts"><span>)</span></span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>resultStack</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="new expr ts"><span class="keyword operator new ts"><span>new</span></span><span>&nbsp;</span><span class="entity name type ts"><span>Stack</span></span><span class="meta type parameters ts"><span class="punctuation definition typeparameters begin ts"><span>&lt;</span></span><span class="entity name type ts"><span>CandyType</span></span><span class="punctuation definition typeparameters end ts"><span>&gt;</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control loop ts"><span>while</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="meta function-call ts"><span class="variable other object ts"><span>dispenser</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support variable property ts"><span>length</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="constant numeric decimal ts"><span>0</span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta var expr ts"><span class="storage type ts"><span>const</span></span><span>&nbsp;</span><span class="meta var-single-variable expr ts"><span class="meta definition variable ts variable other readwrite ts"><span>dispenserItem</span></span><span>&nbsp;</span></span><span class="keyword operator assignment ts"><span>=</span></span><span>&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>dispenser</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>pop</span></span></span><span class="meta brace round ts"><span>(</span><span>)</span></span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control conditional ts"><span>if</span></span><span>&nbsp;</span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>dispenserItem</span></span><span>&nbsp;</span><span class="keyword operator comparison ts"><span>!==</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>yellow</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span></span><span>&nbsp;</span><span class="meta block ts"><span class="punctuation definition block ts"><span>{</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call ts"><span class="variable other object ts"><span>resultStack</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function ts"><span>push</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>dispenserItem</span></span><span class="meta brace round ts"><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="punctuation definition block ts"><span>}</span></span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;</span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span>&nbsp;&nbsp;</span><span class="keyword control flow ts"><span>return</span></span><span>&nbsp;</span><span class="variable other readwrite ts"><span>resultStack</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></span></span></div><div class="line"><span class="source ts"><span class="meta function ts"><span class="meta block ts"><span class="punctuation definition block ts"><span>}</span></span></span></span></span></div><div class="line"><span class="source ts"><span>&nbsp;</span></span></div><div class="line"><span class="source ts"><span class="meta function-call ts"><span class="support class console ts"><span>console</span></span><span class="punctuation accessor ts"><span>.</span></span><span class="support function console ts"><span>log</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="meta function-call ts"><span class="entity name function ts"><span>removeCandy</span></span></span><span class="meta brace round ts"><span>(</span></span><span class="variable other readwrite ts"><span>pezDispenserStack</span></span><span class="punctuation separator comma ts"><span>,</span></span><span>&nbsp;</span><span class="string quoted double ts"><span class="punctuation definition string begin ts"><span>&quot;</span></span><span>yellow</span><span class="punctuation definition string end ts"><span>&quot;</span></span></span><span class="meta brace round ts"><span>)</span><span>)</span></span><span class="punctuation terminator statement ts"><span>;</span></span></span></div></pre>',
frontmatter:{title:"algorithm Stack",date:"March 27, 2020"}}},pathContext:{slug:"/hello-algorithms/stack/"}}}});
//# sourceMappingURL=path---hello-algorithms-stack-0abc28df3af0037195ca.js.map