webpackJsonp([59645336058927],{483:function(s,n){s.exports={data:{site:{siteMetadata:{title:"Merlin Tec Blog",author:"merlin.ho"}},markdownRemark:{id:"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-flow/index.md absPath of file >>> MarkdownRemark",html:'<h1>Intro</h1>\n<ul>\n<li>flow 는 자바스크립트의 스태틱한 타입들을 체크해주는 도구이다.</li>\n<li>flow 는 코드가 변경되는 동안 빠른 피드백을 줍니다.</li>\n<li>flow 는 타입을 추론할 수 있습니다. </li>\n</ul>\n<h1>install</h1>\n<ol>\n<li>\n<p>바벨을 이용해서 flow 유형을 변환시켜줘야 한다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="text plain null-grammar"><span>npm&nbsp;install&nbsp;--save-dev&nbsp;babel-cli&nbsp;babel-preset-flow</span></span></div></pre>\n<ul>\n<li>만약 리엑트를 사용해서 babel-preset-react를 사용한다면 bable-preset-flow는 별도로 설치할 필요가 없다.</li>\n</ul>\n</li>\n</ol>\n<ol start="2">\n<li>\n<p>.babelrc 의 preset 속성에 flow 작성</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>preset</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>flow</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta brace square js"><span>]</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>이 역시도 react를 사용하고 있다면 react만 적어주면 된다.</li>\n</ul>\n</li>\n</ol>\n<ol start="3">\n<li>\n<p>flow 설치</p>\n<pre class="editor editor-colors"><div class="line"><span class="text plain null-grammar"><span>npm&nbsp;install&nbsp;-g&nbsp;flow-bin</span></span></div><div class="line"><span class="text plain null-grammar"><span>npm&nbsp;install&nbsp;--save-dev&nbsp;flow-bin</span></span></div></pre>\n</li>\n</ol>\n<ol start="4">\n<li>\n<p>flow init</p>\n<ul>\n<li>flow init 을 하게 되면 .flowconfig 파일이 생성.</li>\n<li>.flowconfig에서 flow의 여러가지 config 설정을 할 수 있음.</li>\n<li>홈페이지 참조! <a href="https://flow.org/en/docs/config/">https://flow.org/en/docs/config/</a></li>\n</ul>\n</li>\n</ol>\n<ol start="5">\n<li>flow 명령어를 차기 되면 해당 프로젝트의 타입들을 체크</li>\n</ol>\n<h3>요약</h3>\n<ul>\n<li>flow init 으로 프로젝트를 init</li>\n<li>flow 명령으로 Flow background 프로세스를 실행</li>\n<li>각 파일상단에 ”// @flow” 을 기입하므로써 flow가 모니터링을 할수 있게 정의</li>\n<li>flow code 작성</li>\n<li>flow error type 체크</li>\n</ul>\n<h1>Type들</h1>\n<ol>\n<li>\n<p>primitive types</p>\n<ul>\n<li>가장 기본적인 원시타입의 정의 </li>\n<li>리터럴 값의 타입은 소문자로 정의 </li>\n<li>object로 wrapper 한것들은 capitalized 로 정의</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>x</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>number</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>x</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Number</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>Boolean , String, Number, null , undefined(flow는 void로 정의 ) , Symblos ( 아직 flow가 지원안함 )</li>\n</ul>\n</li>\n<li>\n<p>Mixed types</p>\n<ul>\n<li>type을 알수 없을때 사용한다.</li>\n<li>프로그램들은 여러가지 다른 타입의 종류를 지닐수 있다.</li>\n<li>mixed 타입은 아무 타입이나 받을 수 있다. </li>\n<li>mixed는 아무거나 받을 수 있지만 mixed 유형의 값을 사용하려고 한다면 실제 유형이 무엇인지 알아내야 한다. 그렇지 않으면 에러를 내뿜는다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>user</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>mixed</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="keyword operator js"><span>+</span></span><span>&nbsp;value&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>user</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>mixed</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>if</span></span><span class="meta brace round js"><span>(</span></span><span>&nbsp;</span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;value&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>string</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="meta brace round js"><span>)</span></span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="keyword operator js"><span>+</span></span><span>&nbsp;value&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works!!!</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n</li>\n</ol>\n<ol start="3">\n<li>\n<p>any types</p>\n<ul>\n<li>mixed 와 햇갈려 하지 마세요.</li>\n<li>any 자체는 완벽하게 안전하지 않습니다. 어느때나 에러를 내뿜지 않습니다.</li>\n<li>그래서 any로 type을 지정했을 경우에는 가능한 빨리 다른 타입으로 casting을 해야 합니다.</li>\n</ul>\n</li>\n</ol>\n<ol start="4">\n<li>\n<p>maybe types</p>\n<ul>\n<li>typing value가 있을수도 있구 없을수도 있을때 사용한다.</li>\n<li>예를 들어 ?number 라고 타입을 지정하면 받을 수 있는 타입은 number , null , undefined 타입만을 받을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>variable types</p>\n<ul>\n<li>변수를 선언할때 타입을 추가한다.</li>\n<li>javascript 변수 선언 방식은 const , let , var 방식이 있다.</li>\n<li>flow는 두 그룹으로 나뉜다 재 할당이 가능한지 ( let, var ) 가능하지 않은지 ( const )</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;fooVar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;barLet</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span>bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>number</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>fooVar&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>3</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div></pre>\n</li>\n<li>\n<p>function types</p>\n<ul>\n<li>함수는 2가지 장소에 type을 지정할 수 있다. 하나는 매개변수 ( input ) 나머지 한곳은 return value ( output ) 이다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>concat</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>a</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span>&nbsp;</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>b</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;string&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;a</span><span class="keyword operator js"><span>+</span></span><span>b</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;</span><span class="meta function arrow js"><span class="entity name function js"><span>method</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>str</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span>&nbsp;</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>bool</span></span><span class="keyword operator ternary js"><span>?</span><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>boolean</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="keyword operator spread js"><span>...</span></span><span class="variable parameter rest function js"><span>args</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Array</span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="variable parameter function js"><span>number</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;함수&nbsp;타입을&nbsp;아예&nbsp;지정할&nbsp;수&nbsp;있다.</span></span></span></div><div class="line"><span class="source js"><span>type&nbsp;merlin&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function arrow json js"><span class="entity name function js"><span>ho</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>str</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator void js"><span>void</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function arrow json js"><span class="entity name function js"><span>hoing</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>string</span></span><span>&nbsp;</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>boolean</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="keyword operator void js"><span>void</span></span><span>&nbsp;</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="support class js"><span>Array</span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="variable parameter function js"><span>number</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator void js"><span>void</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;파라미터&nbsp;명을&nbsp;생략할&nbsp;수도&nbsp;있다.</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;콜백에&nbsp;대한것도&nbsp;지정할&nbsp;수&nbsp;있다.</span></span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="meta function arrow json js"><span class="entity name function js"><span>cb</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>error</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Error</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="constant language null js"><span>null</span></span><span>&nbsp;</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="constant language null js"><span>null</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="keyword operator void js"><span>void</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>function 의 this의 경우에는 해당 function을 실행한 context를 체크한다. </li>\n<li>술어 함수에 대해서는 리턴값 다음에 <strong>%checks</strong> 라고 적어주지 않으면 에러를 뿜는다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>truty</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>a</span></span><span class="meta delimiter object comma js"><span>,</span></span><span class="variable parameter function js"><span>b</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:boolean&nbsp;%checks&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="keyword operator logical js"><span>!!</span></span><span>a&nbsp;</span><span class="keyword operator logical js"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="keyword operator logical js"><span>!!</span></span><span>b</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>merlin</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>if</span></span><span class="meta brace round js"><span>(</span></span><span class="meta function-call js"><span class="entity name function js"><span>truty</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span>a</span><span class="meta delimiter object comma js"><span>,</span></span><span>b</span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="meta brace round js"><span>)</span></span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>만약 매개변수로 좀더 유연한 function을 받으려면 <strong>() => mixed</strong> 를 사용한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="meta function arrow json js"><span class="entity name function js"><span>func</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="variable parameter function js"><span>mixed</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>만약 타입체크를 피할 필요성이 느끼면서 any 방법을 사용 하지 않으려면 Function 을 타입으로 사용하면 된다. 하지만 이 방법은 안전하지 않고 피해야할 방법이다.</li>\n</ul>\n<p>아래와 같은 코드에서 에러를 내뿜지 않는다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>func</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Function</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>func</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span class="constant numeric decimal js"><span>2</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>works</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>func</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>1</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>2</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>works</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>func</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation section scope begin js"><span>{</span></span><span class="punctuation section scope end js"><span>}</span></span><span class="meta delimiter object comma js"><span>,</span></span><span class="meta brace square js"><span>[</span><span>]</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>works</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta function js"><span class="storage type function js"><span>function</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>a</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>number</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>b</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>number</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="meta arguments js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;a</span><span class="keyword operator js"><span>+</span></span><span>b</span><span class="punctuation terminator statement js"><span>;</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="meta arguments js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span></span></div></pre>\n</li>\n<li>\n<p>Object types</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;obj1</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean</span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;baz</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;baz</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>abc</span><span class="punctuation definition string end js"><span>&quot;</span></span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;obj</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;foo</span><span class="keyword operator ternary js"><span>?</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;boolean</span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="punctuation section scope begin js"><span>{</span></span><span class="punctuation section scope end js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>abc</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div></pre>\n<ul>\n<li>value 의 type을 설정할 때에는 optional properties가 void 와 생략을 사용할수 있게 한다. 다만 null 값은 에러를 낸다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;foo&nbsp;에&nbsp;null&nbsp;을&nbsp;셋팅하면&nbsp;error가&nbsp;뜬다.</span></span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>acceptsObject</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>foo</span><span class="keyword operator ternary js"><span>?</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;...</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>sealed object의 경우에는 없는 값을 추가 하려면 에러를 뿜는다.</li>\n<li>unsealed object의 경우에는 새로운 값을 추가해도 허락한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;obj&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>bar</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>error</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>baz</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>abc</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>error</span></span></span></div></pre>\n<ul>\n<li>\n<p>조건문에 따라 달라지는 프로퍼티의 값이 있다면 아래처럼 해줘야 한다.</p>\n</li>\n<li>\n<p>sealed object 는 프로퍼티를 추가 할수 없다. </p>\n</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;val3</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;string&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>prop</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>\n<p>unsealed object 의 알지못하는 프로퍼티를 정해진 타입에 할당하는 것은 안전하지 못하다.</p>\n</li>\n<li>\n<p>exact 한 obect를 만들고 싶다면 <strong>{| |}</strong> 를 사용한다.</p>\n</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>Hello</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>World!</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div></pre>\n<ul>\n<li>flow는 기본 object type에서 추가 속성들을 안전하게 생각한다. 이것을 “width subtyping” 이라 한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;...</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta brace curly js"><span>{</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="meta arguments js"><span>&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>test</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="meta arguments js"><span>&nbsp;&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="meta arguments js"><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n</li>\n</ol>\n<ol start="8">\n<li>\n<p>array types</p>\n<ul>\n<li>array 타입은 Array<Type> 으로 사용하고 Type 장소에 배열의 요소 타입을 정의 할 수 있다. </li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;arr</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Array</span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span>number</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;arr2</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Array</span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span>string</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>1</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>2</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>3</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta brace square js"><span>]</span></span></span></div></pre>\n<ul>\n<li>축약형으로 Type[] 으로 축약할 수도 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;arr</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>0</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>?Type[] 는 ?Array<T> 와 같고 Array&#x3C;?T>는 (?Type)[] 과 같다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;이부분은&nbsp;숫자로&nbsp;된&nbsp;배열이거나&nbsp;,&nbsp;null&nbsp;,&nbsp;undefined</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;arr1</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>?</span></span><span>number</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant language null js"><span>null</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;</span><span>arr2</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>?</span></span><span>number</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;</span><span>arr3</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>?</span></span><span>number</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant language null js"><span>null</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;이부분은&nbsp;배열이면서&nbsp;배열&nbsp;안에&nbsp;element들이&nbsp;숫자이거나&nbsp;,&nbsp;null&nbsp;,&nbsp;undefined&nbsp;된거</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;</span><span>arr1</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="keyword operator ternary js"><span>?</span></span><span>number)</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant language null js"><span>null</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;</span><span>arr2</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="keyword operator ternary js"><span>?</span></span><span>number)</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;</span><span>arr3</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="keyword operator ternary js"><span>?</span></span><span>number)</span><span class="meta brace square js"><span>[</span><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant language null js"><span>null</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div></pre>\n<ul>\n<li>array type을 안전하게 사용하는 방법</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;array</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Array</span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span>number</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>0</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="keyword operator void js"><span>void</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;array</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="keyword control js"><span>if</span></span><span class="meta brace round js"><span>(</span></span><span>&nbsp;value&nbsp;</span><span class="keyword operator comparison js"><span>!==</span></span><span>&nbsp;</span><span class="constant language js"><span>undefined</span></span><span>&nbsp;</span><span class="meta brace round js"><span>)</span></span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;number</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n</li>\n<li>\n<p>tuple types</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;tuple1</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span>number</span><span class="meta brace square js"><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;tuple2</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span>number</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;boolean</span><span class="meta brace square js"><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;tuple3</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span>number</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;boolean</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;string</span><span class="meta brace square js"><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>three</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>mutating 한 Array method를 tuples type에 사용하지 않는다.</li>\n<li>tuples는 array type과 match 시키지 않는다.</li>\n<li>같은 tuples 타입이라도 같은 length 여야 한다.</li>\n</ul>\n</li>\n<li>\n<p>class types</p>\n<ul>\n<li>flow 안에서 javascript classes 는 값과 타입 2가지로 작동한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>MyClass</span></span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;...</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>prop</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;이걸&nbsp;사용하려면&nbsp;위에&nbsp;처럼&nbsp;필드에&nbsp;대한&nbsp;타입을&nbsp;설정해야&nbsp;한다.</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;myInstance</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;MyClass&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>MyClass</span></span></span><span class="meta brace round js"><span>(</span><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>classes는 자신만의 generics를 가질수 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;@flow</span></span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>MyClass</span></span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>A</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function js"><span class="entity name function constructor js"><span>constructor</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>arg1</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>A</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>arg2</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>arg3</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;...</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;val</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;MyClass</span><span class="keyword operator comparison js"><span>&lt;</span></span><span>number</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;boolean</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;string</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>MyClass</span></span></span><span class="meta brace round js"><span>(</span></span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>three</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n</li>\n<li>\n<p>Type aliases</p>\n<ul>\n<li>복잡한 타입들을 다양한 장소에서 사용하고 싶을때 flow는 type alias를 사용한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;MyObject&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;var</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean</span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;baz</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>generics 를 활용해서 정의할 수도 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>&nbsp;&nbsp;type&nbsp;MyObject</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>A</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>A</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;baz</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="storage type var js"><span>var</span></span><span>&nbsp;val</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;MyObject</span><span class="keyword operator comparison js"><span>&lt;</span></span><span>number</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;boolean</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;string</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;baz</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>three</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n</li>\n<li>\n<p>Opaque Type Aliases</p>\n<ul>\n<li>Opaque type aliases는 이 타입이 정의된 파일 외부에 있는 다른 파일들에서 접근을 허용하지 않는다. </li>\n<li>이 타입은 선언된 곳 어디서든 사용될수 있는 type aliases와 동일하게 작동한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>opaque&nbsp;type&nbsp;</span><span class="constant other js"><span>ID</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;string</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>identity</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>x</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>ID</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;ID&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;x</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta export js"><span class="keyword control js"><span>export</span></span><span>&nbsp;</span><span class="variable other module js"><span>type</span></span><span>&nbsp;</span><span class="punctuation definition modules begin js"><span>{</span></span><span class="variable other module js"><span>ID</span></span><span class="punctuation definition modules end js"><span>}</span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>또한 optionally하게 제약조건 subtyping을 추가할 수 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Opaque&nbsp;type&nbsp;alias&nbsp;syntax</span></span></span></div><div class="line"><span class="source js"><span>opaque&nbsp;type&nbsp;Alias&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;Type</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>opaque&nbsp;type&nbsp;Alias</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;SuperType&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;Type</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>opaque&nbsp;type&nbsp;</span><span class="constant other js"><span>ID</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;string</span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>import 한 opaque type은 외부에서 사용할 수 없다. 마치 nomial type 처럼 행동한다.</li>\n<li>c++ , java , swift는 nomial type 시스템을 사용한다.</li>\n<li>nominal type system 이란 타입의 구조가 같더라도 이름이 다르면 에러를 뿜는다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;exports.js</span></span></span></div><div class="line"><span class="source js"><span class="meta export js"><span class="keyword control js"><span>export</span></span><span>&nbsp;</span><span class="variable other module js"><span>opaque</span></span><span>&nbsp;</span><span class="variable other module js"><span>type</span></span><span>&nbsp;</span><span class="variable other module js"><span>NumberAlias</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other module js"><span>number</span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;imports.js</span></span></span></div><div class="line"><span class="source js"><span class="meta import js"><span class="keyword control js"><span>import</span></span><span>&nbsp;</span><span class="variable other module js"><span>type</span></span><span>&nbsp;</span><span class="punctuation definition modules begin js"><span>{</span></span><span class="variable other module js"><span>NumberAlias</span></span><span class="punctuation definition modules end js"><span>}</span></span><span>&nbsp;</span><span class="keyword control js"><span>from</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>./exports</span><span class="punctuation definition string end js"><span>&#39;</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span class="constant numeric decimal js"><span>0</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;NumberAlias</span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error:&nbsp;0&nbsp;is&nbsp;not&nbsp;a&nbsp;NumberAlias!</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>convert</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>x</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>NumberAlias</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;number&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;x</span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error:&nbsp;x&nbsp;is&nbsp;not&nbsp;a&nbsp;number!</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>opaque type alias 에 subtyping constraint를 추가할때 우리는 super type으로 사용된 opaque type을 선언된 파일 밖에서 사용할 수 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>exports.js</span></span></span></div><div class="line"><span class="source js"><span class="meta export js"><span class="keyword control js"><span>export</span></span><span>&nbsp;</span><span class="variable other module js"><span>opaque</span></span><span>&nbsp;</span><span class="variable other module js"><span>type</span></span><span>&nbsp;</span><span class="variable other module js"><span>ID</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable other module js"><span>string</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other module js"><span>string</span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>import.js</span></span></span></div><div class="line"><span class="source js"><span class="meta import js"><span class="keyword control js"><span>import</span></span><span>&nbsp;</span><span class="variable other module js"><span>type</span></span><span>&nbsp;</span><span class="punctuation definition modules begin js"><span>{</span></span><span class="variable other module js"><span>ID</span></span><span class="punctuation definition modules end js"><span>}</span></span><span>&nbsp;</span><span class="keyword control js"><span>from</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>./exports.js</span><span class="punctuation definition string end js"><span>&#39;</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>formatID</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>x</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>ID</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;string&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>ID:&nbsp;</span><span class="punctuation definition string end js"><span>&quot;</span></span></span><span>&nbsp;</span><span class="keyword operator js"><span>+</span></span><span>&nbsp;x</span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>toID</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>x</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;ID&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;x</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>subtyping constraint를 함께 쓰는 opaque type alias 를 만들때 타입설정은 반드시 super type positiona에 설정된 타입을 지니고 있어야 한다. </li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>opaque&nbsp;type&nbsp;Bad</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;number</span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error:&nbsp;number&nbsp;is&nbsp;not&nbsp;a&nbsp;subtype&nbsp;of&nbsp;string</span></span></span></div><div class="line"><span class="source js"><span>opaque&nbsp;type&nbsp;Good</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>x</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>x</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;y</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n</li>\n<li>\n<p>Interface Types</p>\n<ul>\n<li>classes flow type 의 경우에는 nominal typed 이다. 다시말해서 같은 속성과 같은 메서드가 있어도 서로 이름이 다른 classes type은 한곳에서 다른곳으로 사용이 불가하다.</li>\n<li>대신에. interface 로 기대 되는 class structure 를 선언할 수 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;Serializable&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>serialize</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Foo</span></span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function method definition js"><span class="entity name function js"><span>serialize</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span>&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>[Foo]</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Bar</span></span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function method definition js"><span class="entity name function js"><span>serialize</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span>&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>[Bar]</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span>foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>Serializable</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>Foo</span></span></span><span class="meta brace round js"><span>(</span><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span>bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>Serializable</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>Bar</span></span></span><span class="meta brace round js"><span>(</span><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div></pre>\n<ul>\n<li>implements 구문을 사용해서 flow 에게 이 인터페이스에 매칭되는 클래스를 원한다는 것을 말해줄수가 있다. 이것은 다른 사람이 클래스를 쉽게 변하게 만들지 못하도록 보호할 수 있다.</li>\n<li>멀티로 2개 이상도 설정가능</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;@flow</span></span></span></div><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;Serializable&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>serialize</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Foo</span></span></span><span>&nbsp;</span><span class="storage modifier js"><span>implements</span></span><span>&nbsp;Serializable&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function method definition js"><span class="entity name function js"><span>serialize</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span>&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>[Foo]</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Bar</span></span></span><span>&nbsp;</span><span class="storage modifier js"><span>implements</span></span><span>&nbsp;Serializable&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;$ExpectError</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function method definition js"><span class="entity name function js"><span>serialize</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span>&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>인터페이스 syntax는 아래와 같다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;MyInterface&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;property</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;property</span><span class="keyword operator ternary js"><span>?</span><span>:</span></span><span>&nbsp;string</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace square js"><span>[</span></span><span>key</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace square js"><span>]</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>\n<p>인터페이스도 다른 타입과 같이 generics를 사용할수 있고 프로퍼티에 read-only 와 write-only를 설정할 수있다.</p>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;MyInterface</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>A</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>A</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>baz</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;MyInterface&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span class="keyword operator js"><span>+</span></span><span>covariant</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;read-only</span></span></span></div><div class="line"><span class="source js"><span class="keyword operator js"><span>-</span></span><span>contravariant</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;write-only</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;Invariant&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;property</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;Contravariant&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;</span><span class="keyword operator js"><span>-</span></span><span>writeOnly</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method1</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>Invariant</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>value</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>property</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>value</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>property</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span><span class="meta delimiter decimal period js"><span>.</span></span><span>14</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>funtion&nbsp;</span><span class="meta function method definition js"><span class="entity name function js"><span>method2</span></span><span>&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>contravariant</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>value</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>property</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div><div class="line"><span class="source js"><span class="variable other object js"><span>value</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>writeOnly</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span><span class="meta delimiter decimal period js"><span>.</span></span><span>14</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works!!</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>write-only 를 사용하면 덜 구체적인 타입도 pass를 진행한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;Contravariant&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;</span><span class="keyword operator js"><span>-</span></span><span>writeOnly</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;numberOrString&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="support class math js"><span>Math</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="support function math js"><span>random</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>0</span><span class="meta delimiter decimal period js"><span>.</span></span><span>5</span></span><span class="keyword operator ternary js"><span>?</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span>&nbsp;</span><span class="keyword operator ternary js"><span>:</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>forty-two</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>var</span></span><span>&nbsp;value2</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Contravariant&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;writeOnly</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;numberOrString&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Generic Types</p>\n<ul>\n<li>\n<p>generic은 추상적으로 타입을 지정할수 있는 방법이다.</p>\n</li>\n<li>\n<p>generic은 function , function types , classes , type aliases , interface에 사용될 수 있다.</p>\n</li>\n<li>\n<p>function 사용</p>\n</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;identity&lt;T&gt;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;T&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;value</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span class="meta function arrow js"><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>param</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span></span></div></pre>\n<ul>\n<li>classes 사용</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Item</span></span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>...</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Item</span></span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function js"><span class="entity name function constructor js"><span>constructor</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>param</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>prop</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;param</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>prop</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>many generics as you need</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;identity&lt;One,&nbsp;Two,&nbsp;Three&gt;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>one</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>One</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>two</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>Two</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>three</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>Three</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>generic 타입은 말 그대로 “unknown” type이다. 하지만 함수 안에서 구체적인 타입을 사용하게 된다면 에러를 뿜는다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;logFoo&lt;T&gt;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;T&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="entity name type object console js"><span>console</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="support function console js"><span>log</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;obj</span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;정확한&nbsp;타입을&nbsp;쓰기&nbsp;위해&nbsp;분기를&nbsp;쳐야&nbsp;한다.</span></span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;logFoo&lt;T&gt;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;T&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span class="keyword control js"><span>if</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span>obj&nbsp;</span><span class="keyword operator logical js"><span>&amp;&amp;</span></span><span>&nbsp;</span><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="entity name type object console js"><span>console</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="support function console js"><span>log</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works.</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;obj</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;또는&nbsp;타입을&nbsp;지정한다.</span></span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;logFoo&lt;T:&nbsp;{foo:&nbsp;string}&gt;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;T&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="entity name type object console js"><span>console</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="support function console js"><span>log</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="variable other object js"><span>obj</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>foo</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;obj</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>flow경우 하나의 타입을 다른곳으로 전달할 때 original type을 잃어버린다. 그래서 구체적인 타입을 덜 구체적인 타입으로 전달할때 flow 는 “forget” 된다. 그것은 한때 구체적이였던 것이다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;identity&lt;T&gt;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>val</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;T</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;retur&nbsp;val</span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>foo</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>foo</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;identity&nbsp;호출할때&nbsp;구체적인&nbsp;string이&nbsp;전잘&nbsp;됬지만&nbsp;호출&nbsp;이후에&nbsp;original&nbsp;type을&nbsp;잃어버림..&nbsp;그래서&nbsp;작동할&nbsp;수&nbsp;있다.</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>bar</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta function-call js"><span class="entity name function js"><span>identity</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>bar</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div></pre>\n<ul>\n<li>generic은 함수의 arguments 처럼 타입을 지정할 수 있다. </li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;item</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span>string</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted double js"><span class="punctuation definition string begin js"><span>&quot;</span></span><span>value</span><span class="punctuation definition string end js"><span>&quot;</span></span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>classes 버젼</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Item</span></span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta function js"><span class="entity name function constructor js"><span>constructor</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>param</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="variable language js"><span>this</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>prop</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;param</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;item</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span>number</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>Item</span></span></span><span class="meta brace round js"><span>(</span></span><span class="constant numeric decimal js"><span>42</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;item</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta class instance constructor js"><span class="keyword operator new js"><span>new</span></span><span>&nbsp;</span><span class="entity name type instance js"><span>Item</span></span></span><span class="meta brace round js"><span>(</span></span><span class="constant numeric decimal js"><span>42</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error;</span></span></span></div></pre>\n<ul>\n<li>type aliases 버젼</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;item1</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span>number</span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;item2</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div></pre>\n<ul>\n<li>interface 버젼</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type js"><span>interface</span></span><span>&nbsp;HasProp</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta class js"><span class="storage type class js"><span>class</span></span><span>&nbsp;</span><span class="entity name type class js"><span>Item</span></span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span class="variable other object js"><span>Item</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property js"><span>prototype</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;HasProp</span><span class="keyword operator comparison js"><span>&lt;</span></span><span>string</span><span class="keyword operator comparison js"><span>&gt;</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;works</span></span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span class="variable other object js"><span>Item</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property js"><span>prototype</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;HasProp</span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;error</span></span></span></div></pre>\n<ul>\n<li>default 값도 설정할 수있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant other js"><span>T</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="meta delimiter object comma js"><span>,</span></span></span></div><div class="line"><span class="source js"><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;foo</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;bar</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Item</span><span class="keyword operator comparison js"><span>&lt;</span></span><span class="constant numeric decimal js"><span>2</span></span><span class="keyword operator comparison js"><span>&gt;</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>2</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n</li>\n</ol>\n<ol start="15">\n<li>\n<p>Union types</p>\n<ul>\n<li>여러가지 타입을 받고 싶다면 Union types를 쓸수 있다.</li>\n<li>syntax는 아래와 같다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>Type1&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;Type2&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="keyword operator spread js"><span>...</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;TypeN</span></span></div></pre>\n<ul>\n<li>여러 타입을 (union types)을 사용한다면 우리는 그들 타입중 하나만을 다뤄야 한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>toStringPrimitives</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>number</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>boolean</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;string&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>if</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;value&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>number</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword control js"><span>else</span></span><span>&nbsp;</span><span class="keyword control js"><span>if</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;value&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>boolean</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="support class js"><span>String</span></span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>여러타입중 한가지 타입만 다루고 싶다면 다음과 같이 합니다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>toStringPrimitives</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>number</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>boolean</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>string</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>if</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;value&nbsp;</span><span class="keyword operator comparison js"><span>===</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>number</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="variable other object js"><span>value</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="support function js"><span>toLocaleString</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta brace square js"><span>[</span><span>]</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;maximumSignificantDigits</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;...</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>만약 우리가 두가지의 object types들을 union type으로 생성한다면 flow 는 두 object type 에 들어있는 success property 를 base로 사용하여 알아낼수 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;Success&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>success</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>type&nbsp;Fail&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>success</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean false js"><span>false</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;error</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>type&nbsp;Response&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;Success&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;Fail</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>handleResponse</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>response</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>Response</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>if</span></span><span class="meta brace round js"><span>(</span></span><span>&nbsp;</span><span class="variable other object js"><span>response</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>success</span></span><span>&nbsp;</span><span class="meta brace round js"><span>)</span></span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="storage type var js"><span>var</span></span><span>&nbsp;value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other object js"><span>response</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property dom js"><span>value</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;work</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword control js"><span>else</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="storage type var js"><span>var</span></span><span>&nbsp;error</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other object js"><span>response</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>error</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;work</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>\n<p>union type을 위처럼 분리해서 사용하려면 정확한 타입과 함께 사용해야 한다. disjoint unions type은 각 object에서 한가지 프로퍼티를 구별로 사용한다. 따라서 구별 할 수 있는 프로퍼티가 없다면 에러를 뿜게 된다.\n이것은 flow가 object type을 더 확장 가능한 값으로 보기 때문이다.</p>\n</li>\n<li>\n<p>정 사용해야 겠다면 아래처럼</p>\n</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;Success&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;success</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>type&nbsp;Failed&nbsp;&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;error</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;message</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>type&nbsp;Response&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;Success&nbsp;</span><span class="keyword operator bitwise js"><span>|</span></span><span>&nbsp;Failed</span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>handleResponse</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>response</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="variable parameter function js"><span>Response</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>if</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="variable other object js"><span>response</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>success</span></span><span class="meta brace round js"><span>)</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="storage type var js"><span>var</span></span><span>&nbsp;value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other object js"><span>response</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="support variable property dom js"><span>value</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span>&nbsp;</span><span class="keyword control js"><span>else</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="storage type var js"><span>var</span></span><span>&nbsp;message</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="variable other object js"><span>response</span></span><span class="meta delimiter property period js"><span>.</span></span><span class="variable other property js"><span>message</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n</li>\n<li>\n<p>Intersection Types</p>\n<ul>\n<li>&#x26; 로 연결된 타입들 이것들은 모두를 만족해야 한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span>type&nbsp;</span><span class="constant other js"><span>A</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;a</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>type&nbsp;</span><span class="constant other js"><span>B</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;b</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;boolean&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>type&nbsp;</span><span class="constant other js"><span>C</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;c</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>method</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>value</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>A</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>&amp;</span></span><span>&nbsp;</span><span class="constant other js"><span>B</span></span><span>&nbsp;</span><span class="keyword operator bitwise js"><span>&amp;</span></span><span>&nbsp;</span><span class="constant other js"><span>C</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;ExpectError</span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;a</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;ExpectError</span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;a</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;b</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span class="meta function-call js"><span class="entity name function js"><span>method</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;a</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>1</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;b</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant language boolean true js"><span>true</span></span><span class="meta delimiter object comma js"><span>,</span></span><span>&nbsp;c</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>three</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span>&nbsp;</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div></pre>\n</li>\n<li>\n<p>Typeof Types</p>\n<ul>\n<li>자바스크립트의 typeof 연산자에서 리턴되는 값으로 타입을 정의한다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;num1&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;num2</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;num1&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>3</span><span class="meta delimiter decimal period js"><span>.</span></span><span>14</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;$ExpectError</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;num3</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;num1&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="string quoted single js"><span class="punctuation definition string begin js"><span>&#39;</span></span><span>world</span><span class="punctuation definition string end js"><span>&#39;</span></span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div></pre>\n</li>\n<li>\n<p>Type Casting Expressions</p>\n<ul>\n<li>함수나 변수를 선언하지 않고 타입을 지정하고 싶을 때가 있을 것입니다. 이때 flow는 inline type cast expression 을 사용할 수 있습니다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Type</span><span class="meta brace round js"><span>)</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;val&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Type</span><span class="meta brace round js"><span>)</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;obj&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;prop</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Type</span><span class="meta brace round js"><span>)</span></span><span class="meta brace curly js"><span>}</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;arr&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span class="meta brace square js"><span>[</span></span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Type</span><span class="meta brace round js"><span>)</span></span><span class="meta delimiter object comma js"><span>,</span></span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;Type</span><span class="meta brace round js"><span>)</span></span><span class="meta brace square js"><span>]</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="support class js"><span>Array</span></span><span class="keyword operator comparison js"><span>&lt;</span></span><span>Type</span><span class="keyword operator comparison js"><span>&gt;</span></span><span class="meta brace round js"><span>)</span></span></span></div></pre>\n<ul>\n<li>선언 뿐만 아니라 할당도 할 수 있다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;value&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;42&nbsp;할당&nbsp;및&nbsp;type&nbsp;number</span></span></span></div><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;newValue&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;$ExpectError</span></span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span>newValue</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant numeric decimal js"><span>42</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Error!</span></span></span></div><div class="line"><span class="source js"><span class="meta brace round js"><span>(</span></span><span>newValue</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;number</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span><span>&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;Works!</span></span></span></div></pre>\n<ul>\n<li>다음 아래와 같이 value 를 any로 캐스팅 하면, 너는 원하는 어떤것이든 타입을 캐스팅할수 있다. 다만 이건 굉장이 안전하지 않다. </li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="storage type var js"><span>let</span></span><span>&nbsp;newValue&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span><span>(</span></span><span>value</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;any</span><span class="meta brace round js"><span>)</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div></pre>\n<ul>\n<li>하지만 타입을 지정하기 어렵고 불가능할때에는 result에 따라서 타입이 정해지길 바랄수 있다. 예를 들어보자</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;얕은&nbsp;복사</span></span></span></div><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>cloneObject</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="storage type const js"><span>const</span></span><span>&nbsp;</span><span class="constant other js"><span>clone</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;</span><span class="punctuation section scope begin js"><span>{</span></span><span class="punctuation section scope end js"><span>}</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="support class js"><span>Object</span></span><span class="meta method-call js"><span class="meta delimiter method period js"><span>.</span></span><span class="entity name function js"><span>kets</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span>obj</span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span><span class="meta delimiter method period js"><span>.</span></span><span class="support function dom js"><span>forEach</span></span><span class="meta arguments js"><span class="punctuation definition arguments begin bracket round js"><span>(</span></span><span class="meta function arrow js"><span class="meta parameters js"><span class="variable parameter function js"><span>key</span></span></span><span>&nbsp;</span><span class="storage type function arrow js"><span>=&gt;</span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta method-call js"><span class="meta arguments js"><span>&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="meta brace square js"><span>[</span></span><span>key</span><span class="meta brace square js"><span>]</span></span><span>&nbsp;</span><span class="keyword operator assignment js"><span>=</span></span><span>&nbsp;obj</span><span class="meta brace square js"><span>[</span></span><span>key</span><span class="meta brace square js"><span>]</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></span></span></div><div class="line"><span class="source js"><span class="meta method-call js"><span class="meta arguments js"><span>&nbsp;&nbsp;</span><span class="punctuation definition function body end bracket curly js"><span>}</span></span><span class="punctuation definition arguments end bracket round js"><span>)</span></span></span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;return&nbsp;clone;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>&nbsp;이렇게&nbsp;사용될&nbsp;수&nbsp;있다.</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span><span>(</span></span><span>clone</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;any</span><span class="meta brace round js"><span>)</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;obj</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>만약 우리가 cloneObject 메소드를 실행하기전에 들어오는 인자의 타입을 먼저 정한다면 아래처럼 작성할 것이다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>cloneObject</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span>key</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace square js"><span>]</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;mixed</span><span class="meta brace curly js"><span>}</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>\n<p>하지만 위 코드는 문제가 있다. 우리의 <strong>typeof obj</strong> annotation 또한 새로운 annotation을 갖기에 전체 목적을 파괴시킨다.</p>\n</li>\n<li>\n<p>그래서 우리는 function 안에 사용할 타입에 대해서 assertion 해야한다.</p>\n</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;</span><span class="entity name function js"><span>cloneObject</span></span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="meta brace round js"><span>(</span></span><span>obj</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="meta brace curly js"><span>{</span></span><span>&nbsp;</span><span class="meta brace square js"><span>[</span></span><span>key</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;string</span><span class="meta brace square js"><span>]</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;mixed</span><span class="meta brace curly js"><span>}</span></span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>...</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;</span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="keyword control js"><span>return</span></span><span>&nbsp;</span><span class="meta brace round js"><span>(</span><span>(</span></span><span>clone</span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;any</span><span class="meta brace round js"><span>)</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="keyword operator typeof js"><span>typeof</span></span><span>&nbsp;obj</span><span class="meta brace round js"><span>)</span></span><span class="punctuation terminator statement js"><span>;</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n<ul>\n<li>실질적인 해결 방법은 아래와 같다.</li>\n</ul>\n<pre class="editor editor-colors"><div class="line"><span class="source js"><span class="meta function js"><span class="storage type function js"><span>function</span></span><span>&nbsp;cloneObject&lt;T:&nbsp;{&nbsp;[key:&nbsp;string]:&nbsp;mixed&nbsp;}&gt;&nbsp;</span><span class="meta parameters js"><span class="punctuation definition parameters begin bracket round js"><span>(</span></span><span class="variable parameter function js"><span>obj</span></span><span class="keyword operator assignment js"><span>:</span></span><span>&nbsp;</span><span class="constant other js"><span>T</span></span><span class="punctuation definition parameters end bracket round js"><span>)</span></span></span></span><span>:&nbsp;$Shape&lt;T&gt;&nbsp;</span><span class="punctuation definition function body begin bracket curly js"><span>{</span></span></span></div><div class="line"><span class="source js"><span>&nbsp;&nbsp;</span><span class="comment line double-slash js"><span class="punctuation definition comment js"><span>//</span></span><span>...</span></span></span></div><div class="line"><span class="source js"><span class="punctuation definition function body end bracket curly js"><span>}</span></span></span></div></pre>\n</li>\n<li>\n<p>Utility Types</p>\n<ul>\n<li>flow 는 flow 자체내에 utility types 들을 제공한다.</li>\n</ul>\n<p>  홈페이지 참고 : <a href="https://flow.org/en/docs/types/utilities/">https://flow.org/en/docs/types/utilities/</a></p>\n</li>\n</ol>',
frontmatter:{title:"hello-flow",date:"March 29, 2018"}}},pathContext:{slug:"/hello-flow/"}}}});
//# sourceMappingURL=path---hello-flow-f37b9fb2cac1b9d9b179.js.map