{"version":3,"sources":["webpack:///path---hello-algorithms-graph-9356aed1a68e4ead2759.js","webpack:///./.cache/json/hello-algorithms-graph.json"],"names":["webpackJsonp","501","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,cAAgDC,gBAAmBC,GAAA,kIAAAC,KAAA;AAA4juHC,aAAqPL,MAAA,gBAAAM,KAAA,oBAAkDC,aAAgBC,KAAA","file":"path---hello-algorithms-graph-9356aed1a68e4ead2759.js","sourcesContent":["webpackJsonp([48678249744306],{\n\n/***/ 501:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/graph.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>그래프 정의</h2>\\n<ul>\\n<li>그래프는 정점과 간선으로 이루어져 있다. (지도로 치면 각 마을은 정점이며 도로가 간선이다.)</li>\\n<li>간선은 (v1, v2)와 같은 쌍으로 정의하며, 여기서 v1, v2는 그래프의 정점이다.</li>\\n<li>정점은 무게(weight) 또는 비용(cost)을 포함할 수 있다.</li>\\n<li>간선에서 정점의 순서를 따지는 그래프를 방향성 그래프(directed graph 또는 digraph)라 한다.</li>\\n<li>방향성 그래프에서는 화살표로 간선을 표시하고 정점간 흐름을 의미한다.</li>\\n<li>방향성이 없는 그래프를 무방향성 그래프(unordered graph) 또는 그래프라고 한다.</li>\\n<li>경로의 길이는 경로의 첫 번째 정점에서 마지막 정점까지의 간선 수를 의미한다.</li>\\n<li>경로는 정점 자신으로 향하는 경로 즉, 루프도 퍼함한다. 이때 루프의 길이는 0 이다.</li>\\n<li>첫 번째 정점에서 마지막 정점으로 도달하는 하나 이상의 간선으로 이루어졌으며 경로가 같은 상황을 사이클(cycle)이라 한다.</li>\\n<li>한 정점이 다른 정점과 연결되어 있고, 다른 정점도 한 정점과 연결되어 있으면 두 정점은 서로 강하게(strongly) 연결되어 있다고 말한다.</li>\\n</ul>\\n<h2>정점 표현 (Vertex 클래스)</h2>\\n<ul>\\n<li>정점을 식별할 수 있는 데이터 멤버와 정점을 방문했는지 여부를 확인할 수 있는 데이터 멤버가 필요. (label, wasVisited)</li>\\n<li>Graph 클래스가 사용할 정점은 배열에 저장할 것이다.</li>\\n</ul>\\n<h2>간선 표현</h2>\\n<ul>\\n<li>그래프의 구조를 표현하는 것은 간선</li>\\n<li>실제 정보는 간선에 저장된다.</li>\\n<li>인접 리스트 (adjacency list) 또는 인접 리스트 배열(array of adjacency list)이라 불리는 방법으로 그래프의 간선을 표현할 것이다.</li>\\n<li>인접 리스트에서는 인접한 각 정점의 배열 리스트에 정점을 인덱스로 이용해 간선을 저장한다. 예를 들어 정점 2가 정점 0, 1, 3, 4로 연결되고 인덱스는 2에 저장되어 있다고 가정하면 인덱스 2에는 정점 0, 1, 3, 4의 정보가 들어있을 것이다.</li>\\n<li>간선을 구현하는 또 다른 방법으로 인접 행렬(adjacency matrix) 이라는 방식도 있다. 인접 행렬이란 두 정점 간의 간선이 존재하는지 여부를 알려주는 요소를 포함하는 이차원 배열이다.</li>\\n</ul>\\n<h2>그래프 구현</h2>\\n<ul>\\n<li>Graph 클래스는 그래프의 정점수를 나타내는 배열 길이를 이용해 그래프의 간선 수, 정점 수 정보를 유지한다.</li>\\n<li>배열의 각 요소를 for문으로 반복하면서 각 요소에 인접 정점을 저장할 서브 배열을 추가한 다음 각 요소를 빈 문자열로 초기화 함.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"storage type class ts\\\"><span>class</span></span><span>&nbsp;</span><span class=\\\"entity name type class ts\\\"><span>Graph</span></span><span>&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>vertices</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>edges</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>adj</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"storage type ts\\\"><span>constructor</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"new expr ts\\\"><span class=\\\"keyword operator new ts\\\"><span>new</span></span><span>&nbsp;</span><span class=\\\"entity name type ts\\\"><span>Array</span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>addEdge</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>w</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;순환&nbsp;참조를&nbsp;안시키려면&nbsp;주석을&nbsp;해야한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>showGraph</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span>this.adj</span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>verticeList</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>index</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>index</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>verticeList</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>vertice</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"constant character escape ts\\\"><span>\\\\n</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>프로그램 결과</h3>\\n<ul>\\n<li>정점 0에는 정점 1,2로 연결되는 간선이</li>\\n<li>정점 1에는 정점 0,3으로 연결되는 간선이</li>\\n<li>정점 2에는 정점 0,4로 연결되는 간선이</li>\\n<li>정점 3에는 정점 1로 연결되는 간선이</li>\\n<li>정점 4에는 정점 2로 연결되는 간선이 있다.</li>\\n</ul>\\n<h2>그래프 검색</h2>\\n<ul>\\n<li>깊이 우선 검색 (depth first search)</li>\\n<li>너비 우선 검색 (breadth first search)</li>\\n<li>그래프는 사실 child 노드라고 하기 보다 인접한 노드라고 하는게 정확합니다.</li>\\n</ul>\\n<h3>깊이 우선 검색 (DFS)</h3>\\n<ul>\\n<li>한 정점에서 시작해 마지막 정점이 나올 때까지 모든 경로를 탐색한 다음 다시 이전 경로로 거슬로ㅓ 올라가 다음 경로를 찾기를 반복해 더 이상 방문할 경로가 없을 때까지 탐색 수행</li>\\n<li>이진 트리 검색중에 inorder, preorder, postorder 가 깊이 우선 검색에 해당됩니다.</li>\\n<li>child 노드를 끝까지 파고난 다음에 (마지막 노드까지 갔다가 다시 올라와서 형제 노드들을 방문) 그 다음 줄기를 검색하고 또 다시 그 다음 줄기를 검색하는 방식입니다.</li>\\n<li>깊이 우선 검색은 Stack을 이용해서 구현합니다.</li>\\n<li>스택에 일단 루트 노드를 넣고 먼저 스택에서 노드를 하나 꺼내서 그 해당 child 노드를 전부 스택에 넣고 꺼낸 노드는 출력을 하는 것입니다.</li>\\n<li>여기서 child 노드를 스택에 넣을 때는 한번 넣었던 child 노드는 넣지 않습니다.</li>\\n<li>특히 DFS를 구현할때 재귀 호출을 이용하면 코드가 간결해 집니다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"storage type class ts\\\"><span>class</span></span><span>&nbsp;</span><span class=\\\"entity name type class ts\\\"><span>Graph</span></span><span>&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>vertices</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>edges</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>adj</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>marked</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>boolean</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"storage type ts\\\"><span>constructor</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"new expr ts\\\"><span class=\\\"keyword operator new ts\\\"><span>new</span></span><span>&nbsp;</span><span class=\\\"entity name type ts\\\"><span>Array</span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;탐색을&nbsp;했는지&nbsp;안했는지&nbsp;확인하기&nbsp;위해서</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean false ts\\\"><span>false</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>addEdge</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>w</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;순환&nbsp;참조를&nbsp;안시키려면&nbsp;주석을&nbsp;해야한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>showGraph</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span>this.adj</span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>verticeList</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>index</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>index</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>verticeList</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>vertice</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"constant character escape ts\\\"><span>\\\\n</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;재귀는&nbsp;곧&nbsp;돌아와서&nbsp;다시&nbsp;할일이&nbsp;있기&nbsp;때문에&nbsp;사용한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;순서&nbsp;0&nbsp;-&gt;&nbsp;true,&nbsp;this.adj[0]&nbsp;=&nbsp;1,&nbsp;this.dfs(1),&nbsp;1&nbsp;-&gt;&nbsp;true,...</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>dfs</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Visited&nbsp;vertex:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>v</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>w</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator expression of ts\\\"><span>of</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;이미&nbsp;방문&nbsp;했던&nbsp;vertex는&nbsp;무시한다.</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>dfs</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>너비 우선 검색 (BFS)</h3>\\n<ul>\\n<li>첫 번째 정점에서 시작해 가능한 한 첫 번째 정점과 가까운 정점을 방문한다.</li>\\n<li>기본적으로 너비 우선 검색은 그래프를 계층(layer)별로 탐색한다. 즉, 첫 번째 정점에서 가장 가까운 계층을 먼저 탐색한 다음 시작 정점에서 점점 멀리 있는 계층을 검색하는 방식이다.</li>\\n<li>너비 우선 검색에서는 배열 대신 큐를 이용해 방문한 정점을 저장한다.</li>\\n<li>시작점에서 먼저 자신의 child 노드들을 다 방문 한 뒤에 그 다음의 자식의 자식을 방문을 해서 레벨 단위로 검색을 하는 것입니다.</li>\\n<li>넓이 우선 검색은 Queue를 이용해서 구현합니다.</li>\\n<li>일단 시작할 노드를 큐에 넣고 큐에서 하나 꺼내서 해당 노드의 child 노드를 큐에 넣고 꺼낸 노드는 출력하면 됩니다.</li>\\n<li>여기서 child 노드를 큐에 넣을때 한번 넣었던 child 노드는 다시 큐에 넣지 않습니다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>bfs</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>s</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>queue</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword control as ts\\\"><span>as</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>s</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>s</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&gt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>v</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>shift</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;큐에서&nbsp;가져옴</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Visited&nbsp;vertex:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>v</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>w</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator expression of ts\\\"><span>of</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;이미&nbsp;방문하지&nbsp;않았던&nbsp;w&nbsp;정점에&nbsp;대해서</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edgesTo</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;경로를&nbsp;찾을때&nbsp;간선&nbsp;정보를&nbsp;겹치지&nbsp;않게&nbsp;유지할&nbsp;배열</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;정점에&nbsp;도달</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;방문한&nbsp;정점에서&nbsp;가장&nbsp;인접한&nbsp;레벨의&nbsp;정점들을&nbsp;큐에&nbsp;넣어둔다.</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0&nbsp;-&gt;&nbsp;[1,2],&nbsp;1&nbsp;-&gt;&nbsp;[0,3],&nbsp;2&nbsp;-&gt;&nbsp;[0,4],&nbsp;3&nbsp;-&gt;&nbsp;[1],&nbsp;4&nbsp;-&gt;&nbsp;[2]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0,1,2,3,4</span></span></span></div></pre>\\n<h2>최단 경로 찾기</h2>\\n<ul>\\n<li>정점 간의 최단 경로를 찾는 것이다.</li>\\n<li><code>너비 우선 검색</code>을 수행하면 자동으로 한 정점에서 연결된 다른 정점으로 도달하는 최단 경로를 찾게 된다.</li>\\n<li>정점 A에서 정점 D로 도달하는 최단 경로를 찾는다고 할 때 1개의 간선 경로를 찾아보고 없으면 2개의 간선 경로를 찾아보는 식으로 반복 검색을 수행할 수 있다.</li>\\n<li>한 정점에서 다른 정점으로 연결하는 간선 정보를 유지할 배열이 필요 (<code>this.edgesTo</code>) : 겹치지 않게 간선 정보를 유지하는 것으로 보인다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>pathTo</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>source</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;너비&nbsp;우선&nbsp;검색을&nbsp;우선&nbsp;실행한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;간선&nbsp;정보&nbsp;수집&nbsp;및&nbsp;marked&nbsp;수집.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>bfs</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>hasPathTo</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>path</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>source</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edgesTo</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;여기서&nbsp;this.edgesTo는&nbsp;다음과&nbsp;같다.</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;const&nbsp;g&nbsp;=&nbsp;new&nbsp;Graph(5)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(0,&nbsp;1)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(0,&nbsp;2)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,&nbsp;3)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(2,&nbsp;4)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;1&nbsp;-&nbsp;0,&nbsp;2&nbsp;-&nbsp;0,&nbsp;3&nbsp;-&nbsp;1,&nbsp;4&nbsp;-&nbsp;2&nbsp;간선&nbsp;정보</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>path</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>path</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>source</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>path</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>hasPathTo</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;const&nbsp;path&nbsp;=&nbsp;g.pathTo(4)&nbsp;:&nbsp;정점&nbsp;0에서&nbsp;정점&nbsp;4로&nbsp;도달하는&nbsp;최단&nbsp;경로를&nbsp;보여줌.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0,&nbsp;2,&nbsp;4</span></span></span></div></pre>\\n<h2>위상 정렬</h2>\\n<ul>\\n<li>위상 정렬(Topological sorting)은 방향성 그래프의 모든 방향성 간선이 왼쪽에서 오른쪽 정점을 가리키도록 모든 정점을 배치하는 방법이다. 즉, 순서가 정해져 있는 작업을 차례대로 나열할때 사용한다.</li>\\n<li>이와 같은 구조는 선수 제약 일정 관리에서 찾아볼 수 있으며, 예를 들면 물리1을 이수하지 않은 학생은 물리2를 이수 할 수 없도록 하는것과 같다.</li>\\n<li>위상 정렬 알고리즘은 깊이 우선 검색 알고리즘과 비슷하다. 다만, 방문한 정점을 즉시 출력했던 깊이 우선 검색과 달리 위상 정렬 알고리즘에서는 우선 현재 정점과 인접한 모든 정점을 방문한 다음 인접 리스트를 모두 확인하고 현재 정점을 스택으로 푸시한다.</li>\\n<li>topSort() 함수로 정렬 과정을 설정한 다음, 헬퍼 함수인 topSortHelper() 함수를 호출한다.</li>\\n<li>핵심 기능은 재귀 함수인 topSortHelper() 함수에서 수행한다.</li>\\n<li>topSortHelper() 함수는 현재 방문한 정점으로 표시한 다음 현재 정점의 인접 리스트에 있는 각각의 인접 정점을 재귀적으로 방문하면서 방문한 것으로 표시한다.</li>\\n<li>위상 정렬은 DAG(Directed Acyclic Graph: 사이클이 없는 방향성이 있는 그래프) 에만 적용이 가능합니다. 즉, 사이클이 발생하면 위상정렬을 할 수 없습니다.</li>\\n<li>위상 정렬은 여러개의 답이 존재 할 수 있습니다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>addEdge</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;DAG에만&nbsp;적용이&nbsp;가능</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>this.adj[w].push(v);&nbsp;//&nbsp;순환&nbsp;참조를&nbsp;안시키려면&nbsp;주석을&nbsp;해야한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>topSort</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>stack</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span>&nbsp;</span></span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>visited</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean false ts\\\"><span>false</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>==</span></span><span>&nbsp;</span><span class=\\\"constant language boolean false ts\\\"><span>false</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>topSortHelper</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>stack</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>length</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other object ts\\\"><span>stack</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>stack</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>pop</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span><span>)</span><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>topSortHelper</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>boolean</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>stack</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>var</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>w</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator expression of ts\\\"><span>of</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>topSortHelper</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>stack</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>stack</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;const&nbsp;g&nbsp;=&nbsp;new&nbsp;Graph(6);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,2);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(2,5);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,3);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,4);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(0,1);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0&nbsp;-&gt;&nbsp;1&nbsp;-&gt;&nbsp;4&nbsp;-&gt;&nbsp;3&nbsp;-&gt;&nbsp;2&nbsp;-&gt;&nbsp;5</span></span></span></div></pre>\\n<h2>정리</h2>\\n<ul>\\n<li>그래프의 깊이를 먼저 탐색하기 위해선 재귀를 활용해서 가장 깊이 있는 뎁스 까지 내려갔다가 끝나면 남아있던 형제 정점에서 다시 탐색을 시작한다.</li>\\n<li>그래프의 너비를 먼저 탐색하기 위해선 현재 정점에 인접한(자식 뎁스)를 큐에 넣고 큐에서 하나씩 빼서 방문하게 만든다.</li>\\n</ul>\",\"frontmatter\":{\"title\":\"graph Hashing\",\"date\":\"April 20, 2020\"}}},\"pathContext\":{\"slug\":\"/hello-algorithms/graph/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---hello-algorithms-graph-9356aed1a68e4ead2759.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Merlin Tec Blog\",\"author\":\"merlin.ho\"}},\"markdownRemark\":{\"id\":\"/Users/merlin.ho/Documents/workspace/ho_blog/gatsby-blog/src/pages/hello-algorithms/graph.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>그래프 정의</h2>\\n<ul>\\n<li>그래프는 정점과 간선으로 이루어져 있다. (지도로 치면 각 마을은 정점이며 도로가 간선이다.)</li>\\n<li>간선은 (v1, v2)와 같은 쌍으로 정의하며, 여기서 v1, v2는 그래프의 정점이다.</li>\\n<li>정점은 무게(weight) 또는 비용(cost)을 포함할 수 있다.</li>\\n<li>간선에서 정점의 순서를 따지는 그래프를 방향성 그래프(directed graph 또는 digraph)라 한다.</li>\\n<li>방향성 그래프에서는 화살표로 간선을 표시하고 정점간 흐름을 의미한다.</li>\\n<li>방향성이 없는 그래프를 무방향성 그래프(unordered graph) 또는 그래프라고 한다.</li>\\n<li>경로의 길이는 경로의 첫 번째 정점에서 마지막 정점까지의 간선 수를 의미한다.</li>\\n<li>경로는 정점 자신으로 향하는 경로 즉, 루프도 퍼함한다. 이때 루프의 길이는 0 이다.</li>\\n<li>첫 번째 정점에서 마지막 정점으로 도달하는 하나 이상의 간선으로 이루어졌으며 경로가 같은 상황을 사이클(cycle)이라 한다.</li>\\n<li>한 정점이 다른 정점과 연결되어 있고, 다른 정점도 한 정점과 연결되어 있으면 두 정점은 서로 강하게(strongly) 연결되어 있다고 말한다.</li>\\n</ul>\\n<h2>정점 표현 (Vertex 클래스)</h2>\\n<ul>\\n<li>정점을 식별할 수 있는 데이터 멤버와 정점을 방문했는지 여부를 확인할 수 있는 데이터 멤버가 필요. (label, wasVisited)</li>\\n<li>Graph 클래스가 사용할 정점은 배열에 저장할 것이다.</li>\\n</ul>\\n<h2>간선 표현</h2>\\n<ul>\\n<li>그래프의 구조를 표현하는 것은 간선</li>\\n<li>실제 정보는 간선에 저장된다.</li>\\n<li>인접 리스트 (adjacency list) 또는 인접 리스트 배열(array of adjacency list)이라 불리는 방법으로 그래프의 간선을 표현할 것이다.</li>\\n<li>인접 리스트에서는 인접한 각 정점의 배열 리스트에 정점을 인덱스로 이용해 간선을 저장한다. 예를 들어 정점 2가 정점 0, 1, 3, 4로 연결되고 인덱스는 2에 저장되어 있다고 가정하면 인덱스 2에는 정점 0, 1, 3, 4의 정보가 들어있을 것이다.</li>\\n<li>간선을 구현하는 또 다른 방법으로 인접 행렬(adjacency matrix) 이라는 방식도 있다. 인접 행렬이란 두 정점 간의 간선이 존재하는지 여부를 알려주는 요소를 포함하는 이차원 배열이다.</li>\\n</ul>\\n<h2>그래프 구현</h2>\\n<ul>\\n<li>Graph 클래스는 그래프의 정점수를 나타내는 배열 길이를 이용해 그래프의 간선 수, 정점 수 정보를 유지한다.</li>\\n<li>배열의 각 요소를 for문으로 반복하면서 각 요소에 인접 정점을 저장할 서브 배열을 추가한 다음 각 요소를 빈 문자열로 초기화 함.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"storage type class ts\\\"><span>class</span></span><span>&nbsp;</span><span class=\\\"entity name type class ts\\\"><span>Graph</span></span><span>&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>vertices</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>edges</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>adj</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"storage type ts\\\"><span>constructor</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"new expr ts\\\"><span class=\\\"keyword operator new ts\\\"><span>new</span></span><span>&nbsp;</span><span class=\\\"entity name type ts\\\"><span>Array</span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>addEdge</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>w</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;순환&nbsp;참조를&nbsp;안시키려면&nbsp;주석을&nbsp;해야한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>showGraph</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span>this.adj</span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>verticeList</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>index</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>index</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>verticeList</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>vertice</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"constant character escape ts\\\"><span>\\\\n</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>프로그램 결과</h3>\\n<ul>\\n<li>정점 0에는 정점 1,2로 연결되는 간선이</li>\\n<li>정점 1에는 정점 0,3으로 연결되는 간선이</li>\\n<li>정점 2에는 정점 0,4로 연결되는 간선이</li>\\n<li>정점 3에는 정점 1로 연결되는 간선이</li>\\n<li>정점 4에는 정점 2로 연결되는 간선이 있다.</li>\\n</ul>\\n<h2>그래프 검색</h2>\\n<ul>\\n<li>깊이 우선 검색 (depth first search)</li>\\n<li>너비 우선 검색 (breadth first search)</li>\\n<li>그래프는 사실 child 노드라고 하기 보다 인접한 노드라고 하는게 정확합니다.</li>\\n</ul>\\n<h3>깊이 우선 검색 (DFS)</h3>\\n<ul>\\n<li>한 정점에서 시작해 마지막 정점이 나올 때까지 모든 경로를 탐색한 다음 다시 이전 경로로 거슬로ㅓ 올라가 다음 경로를 찾기를 반복해 더 이상 방문할 경로가 없을 때까지 탐색 수행</li>\\n<li>이진 트리 검색중에 inorder, preorder, postorder 가 깊이 우선 검색에 해당됩니다.</li>\\n<li>child 노드를 끝까지 파고난 다음에 (마지막 노드까지 갔다가 다시 올라와서 형제 노드들을 방문) 그 다음 줄기를 검색하고 또 다시 그 다음 줄기를 검색하는 방식입니다.</li>\\n<li>깊이 우선 검색은 Stack을 이용해서 구현합니다.</li>\\n<li>스택에 일단 루트 노드를 넣고 먼저 스택에서 노드를 하나 꺼내서 그 해당 child 노드를 전부 스택에 넣고 꺼낸 노드는 출력을 하는 것입니다.</li>\\n<li>여기서 child 노드를 스택에 넣을 때는 한번 넣었던 child 노드는 넣지 않습니다.</li>\\n<li>특히 DFS를 구현할때 재귀 호출을 이용하면 코드가 간결해 집니다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"storage type class ts\\\"><span>class</span></span><span>&nbsp;</span><span class=\\\"entity name type class ts\\\"><span>Graph</span></span><span>&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>vertices</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>edges</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>adj</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta field declaration ts\\\"><span class=\\\"meta definition property ts variable object property ts\\\"><span>marked</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>boolean</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"storage type ts\\\"><span>constructor</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"new expr ts\\\"><span class=\\\"keyword operator new ts\\\"><span>new</span></span><span>&nbsp;</span><span class=\\\"entity name type ts\\\"><span>Array</span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;탐색을&nbsp;했는지&nbsp;안했는지&nbsp;확인하기&nbsp;위해서</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean false ts\\\"><span>false</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>addEdge</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>w</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;순환&nbsp;참조를&nbsp;안시키려면&nbsp;주석을&nbsp;해야한다.</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>showGraph</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span>this.adj</span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other object property ts\\\"><span>adj</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>verticeList</span></span><span class=\\\"punctuation separator parameter ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable parameter ts\\\"><span>index</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>index</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span>&nbsp;-&gt;&nbsp;</span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>verticeList</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function dom ts\\\"><span>forEach</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta arrow ts\\\"><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>vertice</span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"storage type function arrow ts\\\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>vertice</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string quoted double ts\\\"><span class=\\\"punctuation definition string begin ts\\\"><span>&quot;</span></span><span class=\\\"constant character escape ts\\\"><span>\\\\n</span></span><span class=\\\"punctuation definition string end ts\\\"><span>&quot;</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta arrow ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;재귀는&nbsp;곧&nbsp;돌아와서&nbsp;다시&nbsp;할일이&nbsp;있기&nbsp;때문에&nbsp;사용한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;순서&nbsp;0&nbsp;-&gt;&nbsp;true,&nbsp;this.adj[0]&nbsp;=&nbsp;1,&nbsp;this.dfs(1),&nbsp;1&nbsp;-&gt;&nbsp;true,...</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta definition method ts entity name function ts\\\"><span>dfs</span></span><span class=\\\"meta parameters ts\\\"><span class=\\\"punctuation definition parameters begin ts\\\"><span>(</span></span><span class=\\\"variable parameter ts\\\"><span>v</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span></span><span class=\\\"punctuation definition parameters end ts\\\"><span>)</span></span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Visited&nbsp;vertex:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>v</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>w</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator expression of ts\\\"><span>of</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;이미&nbsp;방문&nbsp;했던&nbsp;vertex는&nbsp;무시한다.</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>dfs</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"meta method declaration ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta class ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div></pre>\\n<h3>너비 우선 검색 (BFS)</h3>\\n<ul>\\n<li>첫 번째 정점에서 시작해 가능한 한 첫 번째 정점과 가까운 정점을 방문한다.</li>\\n<li>기본적으로 너비 우선 검색은 그래프를 계층(layer)별로 탐색한다. 즉, 첫 번째 정점에서 가장 가까운 계층을 먼저 탐색한 다음 시작 정점에서 점점 멀리 있는 계층을 검색하는 방식이다.</li>\\n<li>너비 우선 검색에서는 배열 대신 큐를 이용해 방문한 정점을 저장한다.</li>\\n<li>시작점에서 먼저 자신의 child 노드들을 다 방문 한 뒤에 그 다음의 자식의 자식을 방문을 해서 레벨 단위로 검색을 하는 것입니다.</li>\\n<li>넓이 우선 검색은 Queue를 이용해서 구현합니다.</li>\\n<li>일단 시작할 노드를 큐에 넣고 큐에서 하나 꺼내서 해당 노드의 child 노드를 큐에 넣고 꺼낸 노드는 출력하면 됩니다.</li>\\n<li>여기서 child 노드를 큐에 넣을때 한번 넣었던 child 노드는 다시 큐에 넣지 않습니다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>bfs</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>s</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>queue</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword control as ts\\\"><span>as</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>s</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>s</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>while</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&gt;</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>v</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>shift</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span><span>)</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;큐에서&nbsp;가져옴</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"string template ts\\\"><span class=\\\"punctuation definition string template begin ts\\\"><span>`</span></span><span>Visited&nbsp;vertex:&nbsp;</span><span class=\\\"meta template expression ts\\\"><span class=\\\"punctuation definition template-expression begin ts\\\"><span>${</span></span><span class=\\\"meta embedded line ts\\\"><span class=\\\"variable other readwrite ts\\\"><span>v</span></span></span><span class=\\\"punctuation definition template-expression end ts\\\"><span>}</span></span></span><span class=\\\"punctuation definition string template end ts\\\"><span>`</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>w</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator expression of ts\\\"><span>of</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;이미&nbsp;방문하지&nbsp;않았던&nbsp;w&nbsp;정점에&nbsp;대해서</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edgesTo</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;경로를&nbsp;찾을때&nbsp;간선&nbsp;정보를&nbsp;겹치지&nbsp;않게&nbsp;유지할&nbsp;배열</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;정점에&nbsp;도달</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>queue</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;방문한&nbsp;정점에서&nbsp;가장&nbsp;인접한&nbsp;레벨의&nbsp;정점들을&nbsp;큐에&nbsp;넣어둔다.</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0&nbsp;-&gt;&nbsp;[1,2],&nbsp;1&nbsp;-&gt;&nbsp;[0,3],&nbsp;2&nbsp;-&gt;&nbsp;[0,4],&nbsp;3&nbsp;-&gt;&nbsp;[1],&nbsp;4&nbsp;-&gt;&nbsp;[2]</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0,1,2,3,4</span></span></span></div></pre>\\n<h2>최단 경로 찾기</h2>\\n<ul>\\n<li>정점 간의 최단 경로를 찾는 것이다.</li>\\n<li><code>너비 우선 검색</code>을 수행하면 자동으로 한 정점에서 연결된 다른 정점으로 도달하는 최단 경로를 찾게 된다.</li>\\n<li>정점 A에서 정점 D로 도달하는 최단 경로를 찾는다고 할 때 1개의 간선 경로를 찾아보고 없으면 2개의 간선 경로를 찾아보는 식으로 반복 검색을 수행할 수 있다.</li>\\n<li>한 정점에서 다른 정점으로 연결하는 간선 정보를 유지할 배열이 필요 (<code>this.edgesTo</code>) : 겹치지 않게 간선 정보를 유지하는 것으로 보인다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>pathTo</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>source</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;너비&nbsp;우선&nbsp;검색을&nbsp;우선&nbsp;실행한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;간선&nbsp;정보&nbsp;수집&nbsp;및&nbsp;marked&nbsp;수집.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>bfs</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>hasPathTo</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"constant language undefined ts\\\"><span>undefined</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>path</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>!==</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>source</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edgesTo</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;여기서&nbsp;this.edgesTo는&nbsp;다음과&nbsp;같다.</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;const&nbsp;g&nbsp;=&nbsp;new&nbsp;Graph(5)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(0,&nbsp;1)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(0,&nbsp;2)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,&nbsp;3)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(2,&nbsp;4)</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;1&nbsp;-&nbsp;0,&nbsp;2&nbsp;-&nbsp;0,&nbsp;3&nbsp;-&nbsp;1,&nbsp;4&nbsp;-&nbsp;2&nbsp;간선&nbsp;정보</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>path</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>path</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>source</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>path</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>hasPathTo</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control flow ts\\\"><span>return</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>marked</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;const&nbsp;path&nbsp;=&nbsp;g.pathTo(4)&nbsp;:&nbsp;정점&nbsp;0에서&nbsp;정점&nbsp;4로&nbsp;도달하는&nbsp;최단&nbsp;경로를&nbsp;보여줌.</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0,&nbsp;2,&nbsp;4</span></span></span></div></pre>\\n<h2>위상 정렬</h2>\\n<ul>\\n<li>위상 정렬(Topological sorting)은 방향성 그래프의 모든 방향성 간선이 왼쪽에서 오른쪽 정점을 가리키도록 모든 정점을 배치하는 방법이다. 즉, 순서가 정해져 있는 작업을 차례대로 나열할때 사용한다.</li>\\n<li>이와 같은 구조는 선수 제약 일정 관리에서 찾아볼 수 있으며, 예를 들면 물리1을 이수하지 않은 학생은 물리2를 이수 할 수 없도록 하는것과 같다.</li>\\n<li>위상 정렬 알고리즘은 깊이 우선 검색 알고리즘과 비슷하다. 다만, 방문한 정점을 즉시 출력했던 깊이 우선 검색과 달리 위상 정렬 알고리즘에서는 우선 현재 정점과 인접한 모든 정점을 방문한 다음 인접 리스트를 모두 확인하고 현재 정점을 스택으로 푸시한다.</li>\\n<li>topSort() 함수로 정렬 과정을 설정한 다음, 헬퍼 함수인 topSortHelper() 함수를 호출한다.</li>\\n<li>핵심 기능은 재귀 함수인 topSortHelper() 함수에서 수행한다.</li>\\n<li>topSortHelper() 함수는 현재 방문한 정점으로 표시한 다음 현재 정점의 인접 리스트에 있는 각각의 인접 정점을 재귀적으로 방문하면서 방문한 것으로 표시한다.</li>\\n<li>위상 정렬은 DAG(Directed Acyclic Graph: 사이클이 없는 방향성이 있는 그래프) 에만 적용이 가능합니다. 즉, 사이클이 발생하면 위상정렬을 할 수 없습니다.</li>\\n<li>위상 정렬은 여러개의 답이 존재 할 수 있습니다.</li>\\n</ul>\\n<pre class=\\\"editor editor-colors\\\"><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>addEdge</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;DAG에만&nbsp;적용이&nbsp;가능</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation whitespace comment leading ts\\\"><span>&nbsp;&nbsp;</span></span><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>this.adj[w].push(v);&nbsp;//&nbsp;순환&nbsp;참조를&nbsp;안시키려면&nbsp;주석을&nbsp;해야한다.</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>edges</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>topSort</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>stack</span></span><span class=\\\"meta type annotation ts\\\"><span class=\\\"keyword operator type annotation ts\\\"><span>:</span></span><span>&nbsp;</span><span class=\\\"support type primitive ts\\\"><span>number</span></span><span class=\\\"meta type tuple ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span>&nbsp;</span></span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>const</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>visited</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean false ts\\\"><span>false</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>vertices</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator comparison ts\\\"><span>==</span></span><span>&nbsp;</span><span class=\\\"constant language boolean false ts\\\"><span>false</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>topSortHelper</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>stack</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>length</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"variable other object ts\\\"><span>stack</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support variable property ts\\\"><span>length</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>let</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span></span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant numeric decimal ts\\\"><span>0</span></span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span>&nbsp;</span><span class=\\\"keyword operator relational ts\\\"><span>&lt;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>length</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>i</span></span><span class=\\\"keyword operator increment ts\\\"><span>++</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"support class console ts\\\"><span>console</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function console ts\\\"><span>log</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>stack</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>pop</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span><span>)</span><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta function-call ts\\\"><span class=\\\"entity name function ts\\\"><span>topSortHelper</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>boolean</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>stack</span></span><span>:&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>number</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span>&nbsp;</span><span class=\\\"keyword operator assignment ts\\\"><span>=</span></span><span>&nbsp;</span><span class=\\\"constant language boolean true ts\\\"><span>true</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"keyword control loop ts\\\"><span>for</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"meta var expr ts\\\"><span class=\\\"storage type ts\\\"><span>var</span></span><span>&nbsp;</span><span class=\\\"meta var-single-variable expr ts\\\"><span class=\\\"meta definition variable ts variable other readwrite ts\\\"><span>w</span></span></span></span><span>&nbsp;</span><span class=\\\"keyword operator expression of ts\\\"><span>of</span></span><span>&nbsp;</span><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"variable other property ts\\\"><span>adj</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"keyword control conditional ts\\\"><span>if</span></span><span>&nbsp;</span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"keyword operator logical ts\\\"><span>!</span></span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"meta array literal ts\\\"><span class=\\\"meta brace square ts\\\"><span>[</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"meta brace square ts\\\"><span>]</span></span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span>&nbsp;</span><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>{</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable language this ts\\\"><span>this</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"entity name function ts\\\"><span>topSortHelper</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>w</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>visited</span></span><span class=\\\"punctuation separator comma ts\\\"><span>,</span></span><span>&nbsp;</span><span class=\\\"variable other readwrite ts\\\"><span>stack</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span>&nbsp;&nbsp;</span><span class=\\\"meta function-call ts\\\"><span class=\\\"variable other object ts\\\"><span>stack</span></span><span class=\\\"punctuation accessor ts\\\"><span>.</span></span><span class=\\\"support function ts\\\"><span>push</span></span></span><span class=\\\"meta brace round ts\\\"><span>(</span></span><span class=\\\"variable other readwrite ts\\\"><span>v</span></span><span class=\\\"meta brace round ts\\\"><span>)</span></span><span class=\\\"punctuation terminator statement ts\\\"><span>;</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"meta block ts\\\"><span class=\\\"punctuation definition block ts\\\"><span>}</span></span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span>&nbsp;</span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;const&nbsp;g&nbsp;=&nbsp;new&nbsp;Graph(6);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,2);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(2,5);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,3);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(1,4);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;g.addEdge(0,1);</span></span></span></div><div class=\\\"line\\\"><span class=\\\"source ts\\\"><span class=\\\"comment line double-slash ts\\\"><span class=\\\"punctuation definition comment ts\\\"><span>//</span></span><span>&nbsp;0&nbsp;-&gt;&nbsp;1&nbsp;-&gt;&nbsp;4&nbsp;-&gt;&nbsp;3&nbsp;-&gt;&nbsp;2&nbsp;-&gt;&nbsp;5</span></span></span></div></pre>\\n<h2>정리</h2>\\n<ul>\\n<li>그래프의 깊이를 먼저 탐색하기 위해선 재귀를 활용해서 가장 깊이 있는 뎁스 까지 내려갔다가 끝나면 남아있던 형제 정점에서 다시 탐색을 시작한다.</li>\\n<li>그래프의 너비를 먼저 탐색하기 위해선 현재 정점에 인접한(자식 뎁스)를 큐에 넣고 큐에서 하나씩 빼서 방문하게 만든다.</li>\\n</ul>\",\"frontmatter\":{\"title\":\"graph Hashing\",\"date\":\"April 20, 2020\"}}},\"pathContext\":{\"slug\":\"/hello-algorithms/graph/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/hello-algorithms-graph.json\n// module id = 501\n// module chunks = 48678249744306"],"sourceRoot":""}